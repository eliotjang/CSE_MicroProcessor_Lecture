
project11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d0  00800200  000017a6  0000183a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c0  008002d0  008002d0  0000190a  2**0
                  ALLOC
  3 .stab         0000117c  00000000  00000000  0000190c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000039d  00000000  00000000  00002a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002e8  00000000  00000000  00002e28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000292b  00000000  00000000  00003110  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014b9  00000000  00000000  00005a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016b2  00000000  00000000  00006ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007f0  00000000  00000000  000085a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000804  00000000  00000000  00008d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c87  00000000  00000000  0000959c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000b223  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__vector_15>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 ea       	ldi	r30, 0xA6	; 166
      fc:	f7 e1       	ldi	r31, 0x17	; 23
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 3d       	cpi	r26, 0xD0	; 208
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	15 e0       	ldi	r17, 0x05	; 5
     112:	a0 ed       	ldi	r26, 0xD0	; 208
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a0 39       	cpi	r26, 0x90	; 144
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 38 06 	call	0xc70	; 0xc70 <main>
     124:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <is_prime>:
#include "task.h"
#include "timer.h"
extern volatile int exe_time;

int is_prime(int n)
{
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	fc 01       	movw	r30, r24
 int i;
 for (i = 2; i <= n/2; i++)
     132:	62 e0       	ldi	r22, 0x02	; 2
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__divmodhi4>
     13a:	eb 01       	movw	r28, r22
     13c:	22 e0       	ldi	r18, 0x02	; 2
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	08 c0       	rjmp	.+16     	; 0x152 <is_prime+0x26>
	 if ((n % i) == 0)
     142:	cf 01       	movw	r24, r30
     144:	b9 01       	movw	r22, r18
     146:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__divmodhi4>
     14a:	00 97       	sbiw	r24, 0x00	; 0
     14c:	41 f0       	breq	.+16     	; 0x15e <is_prime+0x32>
extern volatile int exe_time;

int is_prime(int n)
{
 int i;
 for (i = 2; i <= n/2; i++)
     14e:	2f 5f       	subi	r18, 0xFF	; 255
     150:	3f 4f       	sbci	r19, 0xFF	; 255
     152:	c2 17       	cp	r28, r18
     154:	d3 07       	cpc	r29, r19
     156:	ac f7       	brge	.-22     	; 0x142 <is_prime+0x16>
	 if ((n % i) == 0)
	 	return(0);
 return(1);
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	02 c0       	rjmp	.+4      	; 0x162 <is_prime+0x36>
int is_prime(int n)
{
 int i;
 for (i = 2; i <= n/2; i++)
	 if ((n % i) == 0)
	 	return(0);
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
 return(1);
}
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28
     166:	08 95       	ret

00000168 <app_prime>:
void app_prime(char *ap)
{
     168:	cf 92       	push	r12
     16a:	df 92       	push	r13
     16c:	ef 92       	push	r14
     16e:	ff 92       	push	r15
     170:	0f 93       	push	r16
     172:	1f 93       	push	r17
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
 int t = 2000, count = 0, n;
 if (ap) t = atoi(ap);
     178:	00 97       	sbiw	r24, 0x00	; 0
     17a:	21 f0       	breq	.+8      	; 0x184 <app_prime+0x1c>
     17c:	0e 94 b8 07 	call	0xf70	; 0xf70 <atoi>
     180:	7c 01       	movw	r14, r24
     182:	04 c0       	rjmp	.+8      	; 0x18c <app_prime+0x24>
	 	return(0);
 return(1);
}
void app_prime(char *ap)
{
 int t = 2000, count = 0, n;
     184:	90 ed       	ldi	r25, 0xD0	; 208
     186:	e9 2e       	mov	r14, r25
     188:	97 e0       	ldi	r25, 0x07	; 7
     18a:	f9 2e       	mov	r15, r25
 if (ap) t = atoi(ap);

 for (n = 2; n <= t; n++) {
     18c:	c2 e0       	ldi	r28, 0x02	; 2
     18e:	d0 e0       	ldi	r29, 0x00	; 0
	 	return(0);
 return(1);
}
void app_prime(char *ap)
{
 int t = 2000, count = 0, n;
     190:	00 e0       	ldi	r16, 0x00	; 0
     192:	10 e0       	ldi	r17, 0x00	; 0
 if (ap) t = atoi(ap);

 for (n = 2; n <= t; n++) {
 	if (is_prime(n)) {
	 	count++;
	 	printf("%d is a prime number !!!\n", n);
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	c8 2e       	mov	r12, r24
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	d8 2e       	mov	r13, r24
void app_prime(char *ap)
{
 int t = 2000, count = 0, n;
 if (ap) t = atoi(ap);

 for (n = 2; n <= t; n++) {
     19c:	16 c0       	rjmp	.+44     	; 0x1ca <app_prime+0x62>
 	if (is_prime(n)) {
     19e:	ce 01       	movw	r24, r28
     1a0:	0e 94 96 00 	call	0x12c	; 0x12c <is_prime>
     1a4:	00 97       	sbiw	r24, 0x00	; 0
     1a6:	81 f0       	breq	.+32     	; 0x1c8 <app_prime+0x60>
	 	count++;
     1a8:	0f 5f       	subi	r16, 0xFF	; 255
     1aa:	1f 4f       	sbci	r17, 0xFF	; 255
	 	printf("%d is a prime number !!!\n", n);
     1ac:	00 d0       	rcall	.+0      	; 0x1ae <app_prime+0x46>
     1ae:	0f 92       	push	r0
     1b0:	ed b7       	in	r30, 0x3d	; 61
     1b2:	fe b7       	in	r31, 0x3e	; 62
     1b4:	d2 82       	std	Z+2, r13	; 0x02
     1b6:	c1 82       	std	Z+1, r12	; 0x01
     1b8:	d4 83       	std	Z+4, r29	; 0x04
     1ba:	c3 83       	std	Z+3, r28	; 0x03
     1bc:	0e 94 74 08 	call	0x10e8	; 0x10e8 <printf>
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	0f 90       	pop	r0
     1c6:	0f 90       	pop	r0
void app_prime(char *ap)
{
 int t = 2000, count = 0, n;
 if (ap) t = atoi(ap);

 for (n = 2; n <= t; n++) {
     1c8:	21 96       	adiw	r28, 0x01	; 1
     1ca:	ec 16       	cp	r14, r28
     1cc:	fd 06       	cpc	r15, r29
     1ce:	3c f7       	brge	.-50     	; 0x19e <app_prime+0x36>
 	if (is_prime(n)) {
	 	count++;
	 	printf("%d is a prime number !!!\n", n);
	 }
 }
 printf("count=%d\n", count);
     1d0:	00 d0       	rcall	.+0      	; 0x1d2 <app_prime+0x6a>
     1d2:	0f 92       	push	r0
     1d4:	8a e1       	ldi	r24, 0x1A	; 26
     1d6:	92 e0       	ldi	r25, 0x02	; 2
     1d8:	ed b7       	in	r30, 0x3d	; 61
     1da:	fe b7       	in	r31, 0x3e	; 62
     1dc:	92 83       	std	Z+2, r25	; 0x02
     1de:	81 83       	std	Z+1, r24	; 0x01
     1e0:	14 83       	std	Z+4, r17	; 0x04
     1e2:	03 83       	std	Z+3, r16	; 0x03
     1e4:	0e 94 74 08 	call	0x10e8	; 0x10e8 <printf>
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
}
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	1f 91       	pop	r17
     1f6:	0f 91       	pop	r16
     1f8:	ff 90       	pop	r15
     1fa:	ef 90       	pop	r14
     1fc:	df 90       	pop	r13
     1fe:	cf 90       	pop	r12
     200:	08 95       	ret

00000202 <app_timer>:
void  app_timer(char *ap)  {
     202:	0f 93       	push	r16
     204:	1f 93       	push	r17
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	62 97       	sbiw	r28, 0x12	; 18
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	f8 94       	cli
     214:	de bf       	out	0x3e, r29	; 62
     216:	0f be       	out	0x3f, r0	; 63
     218:	cd bf       	out	0x3d, r28	; 61
  int ms;
  struct task  tsk;
  //>>5000
  //typing end with ctl + z
  while(1) {
   printf(">> ");
     21a:	04 e2       	ldi	r16, 0x24	; 36
     21c:	12 e0       	ldi	r17, 0x02	; 2
     21e:	0f 92       	push	r0
     220:	0f 92       	push	r0
     222:	ed b7       	in	r30, 0x3d	; 61
     224:	fe b7       	in	r31, 0x3e	; 62
     226:	12 83       	std	Z+2, r17	; 0x02
     228:	01 83       	std	Z+1, r16	; 0x01
     22a:	0e 94 74 08 	call	0x10e8	; 0x10e8 <printf>
   if (fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     22e:	0f 90       	pop	r0
     230:	0f 90       	pop	r0
     232:	40 91 8a 05 	lds	r20, 0x058A
     236:	50 91 8b 05 	lds	r21, 0x058B
     23a:	ce 01       	movw	r24, r28
     23c:	01 96       	adiw	r24, 0x01	; 1
     23e:	68 e0       	ldi	r22, 0x08	; 8
     240:	70 e0       	ldi	r23, 0x00	; 0
     242:	0e 94 1a 08 	call	0x1034	; 0x1034 <fgets>
     246:	00 97       	sbiw	r24, 0x00	; 0
     248:	61 f0       	breq	.+24     	; 0x262 <app_timer+0x60>
     24a:	ce 01       	movw	r24, r28
     24c:	01 96       	adiw	r24, 0x01	; 1
     24e:	0e 94 b8 07 	call	0xf70	; 0xf70 <atoi>
     252:	bc 01       	movw	r22, r24
     254:	00 97       	sbiw	r24, 0x00	; 0
     256:	29 f0       	breq	.+10     	; 0x262 <app_timer+0x60>
     break;
   insert_timer(&tsk, ms);
     258:	ce 01       	movw	r24, r28
     25a:	09 96       	adiw	r24, 0x09	; 9
     25c:	0e 94 84 04 	call	0x908	; 0x908 <insert_timer>
  }
     260:	de cf       	rjmp	.-68     	; 0x21e <app_timer+0x1c>
  tour_timer();
     262:	0e 94 2c 04 	call	0x858	; 0x858 <tour_timer>
  free_timer();
     266:	0e 94 6e 04 	call	0x8dc	; 0x8dc <free_timer>
}
     26a:	62 96       	adiw	r28, 0x12	; 18
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	f8 94       	cli
     270:	de bf       	out	0x3e, r29	; 62
     272:	0f be       	out	0x3f, r0	; 63
     274:	cd bf       	out	0x3d, r28	; 61
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	1f 91       	pop	r17
     27c:	0f 91       	pop	r16
     27e:	08 95       	ret

00000280 <app_time>:
void app_time(){
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
	printf("MIN : SEC\n");
     284:	88 e2       	ldi	r24, 0x28	; 40
     286:	92 e0       	ldi	r25, 0x02	; 2
     288:	0e 94 8d 08 	call	0x111a	; 0x111a <puts>
	printf("%.2d : %.2d\n", exe_time/60, exe_time%60);
     28c:	80 91 d7 02 	lds	r24, 0x02D7
     290:	90 91 d8 02 	lds	r25, 0x02D8
     294:	e0 91 d7 02 	lds	r30, 0x02D7
     298:	f0 91 d8 02 	lds	r31, 0x02D8
     29c:	00 d0       	rcall	.+0      	; 0x29e <app_time+0x1e>
     29e:	00 d0       	rcall	.+0      	; 0x2a0 <app_time+0x20>
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
     2a4:	21 96       	adiw	r28, 0x01	; 1
     2a6:	22 e3       	ldi	r18, 0x32	; 50
     2a8:	32 e0       	ldi	r19, 0x02	; 2
     2aa:	ad b7       	in	r26, 0x3d	; 61
     2ac:	be b7       	in	r27, 0x3e	; 62
     2ae:	12 96       	adiw	r26, 0x02	; 2
     2b0:	3c 93       	st	X, r19
     2b2:	2e 93       	st	-X, r18
     2b4:	11 97       	sbiw	r26, 0x01	; 1
     2b6:	2c e3       	ldi	r18, 0x3C	; 60
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	b9 01       	movw	r22, r18
     2bc:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__divmodhi4>
     2c0:	7b 83       	std	Y+3, r23	; 0x03
     2c2:	6a 83       	std	Y+2, r22	; 0x02
     2c4:	cf 01       	movw	r24, r30
     2c6:	b9 01       	movw	r22, r18
     2c8:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__divmodhi4>
     2cc:	9d 83       	std	Y+5, r25	; 0x05
     2ce:	8c 83       	std	Y+4, r24	; 0x04
     2d0:	0e 94 74 08 	call	0x10e8	; 0x10e8 <printf>
     2d4:	8d b7       	in	r24, 0x3d	; 61
     2d6:	9e b7       	in	r25, 0x3e	; 62
     2d8:	06 96       	adiw	r24, 0x06	; 6
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	f8 94       	cli
     2de:	9e bf       	out	0x3e, r25	; 62
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	8d bf       	out	0x3d, r24	; 61
}
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	08 95       	ret

000002ea <led_init>:
#include "timer.h"

static uint8_t Leds;

void led_init() {
	DDRL = PORTL = 0xff;
     2ea:	8f ef       	ldi	r24, 0xFF	; 255
     2ec:	80 93 0b 01 	sts	0x010B, r24
     2f0:	80 93 0a 01 	sts	0x010A, r24
}
     2f4:	08 95       	ret

000002f6 <led_on_all>:
void led_on_all(void) {
	Leds = PORTL = 0x00;
     2f6:	10 92 0b 01 	sts	0x010B, r1
     2fa:	10 92 d0 02 	sts	0x02D0, r1
}
     2fe:	08 95       	ret

00000300 <led_off_all>:
void led_off_all(void) {
	 Leds = PORTL = 0xff;
     300:	8f ef       	ldi	r24, 0xFF	; 255
     302:	80 93 0b 01 	sts	0x010B, r24
     306:	80 93 d0 02 	sts	0x02D0, r24
}
     30a:	08 95       	ret

0000030c <task_led>:
	else{
		led_off_all();
		flag = 0;
	}
}*/
void task_led(char *ap){
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	cd b7       	in	r28, 0x3d	; 61
     316:	de b7       	in	r29, 0x3e	; 62
     318:	2a 97       	sbiw	r28, 0x0a	; 10
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	f8 94       	cli
     31e:	de bf       	out	0x3e, r29	; 62
     320:	0f be       	out	0x3f, r0	; 63
     322:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	static int tag;
	int ms = 1024*5;
	if(ap&&*ap)
     324:	00 97       	sbiw	r24, 0x00	; 0
     326:	41 f0       	breq	.+16     	; 0x338 <task_led+0x2c>
     328:	dc 01       	movw	r26, r24
     32a:	2c 91       	ld	r18, X
     32c:	22 23       	and	r18, r18
     32e:	21 f0       	breq	.+8      	; 0x338 <task_led+0x2c>
		ms = atoi(ap);
     330:	0e 94 b8 07 	call	0xf70	; 0xf70 <atoi>
     334:	8c 01       	movw	r16, r24
     336:	02 c0       	rjmp	.+4      	; 0x33c <task_led+0x30>
	}
}*/
void task_led(char *ap){
	struct task task;
	static int tag;
	int ms = 1024*5;
     338:	00 e0       	ldi	r16, 0x00	; 0
     33a:	14 e1       	ldi	r17, 0x14	; 20
	if(ap&&*ap)
		ms = atoi(ap);
	
	if(tag){
     33c:	80 91 d1 02 	lds	r24, 0x02D1
     340:	90 91 d2 02 	lds	r25, 0x02D2
     344:	00 97       	sbiw	r24, 0x00	; 0
     346:	39 f0       	breq	.+14     	; 0x356 <task_led+0x4a>
		led_on_all();
     348:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <led_on_all>
		tag = 0;
     34c:	10 92 d2 02 	sts	0x02D2, r1
     350:	10 92 d1 02 	sts	0x02D1, r1
     354:	08 c0       	rjmp	.+16     	; 0x366 <task_led+0x5a>
	}
	else{
		led_off_all();
     356:	0e 94 80 01 	call	0x300	; 0x300 <led_off_all>
		tag = 1;
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	90 93 d2 02 	sts	0x02D2, r25
     362:	80 93 d1 02 	sts	0x02D1, r24
	}
	task.fun=(void *)task_led;
     366:	86 e8       	ldi	r24, 0x86	; 134
     368:	91 e0       	ldi	r25, 0x01	; 1
     36a:	9a 83       	std	Y+2, r25	; 0x02
     36c:	89 83       	std	Y+1, r24	; 0x01
	sprintf(task.arg,"%d",ms);
     36e:	00 d0       	rcall	.+0      	; 0x370 <task_led+0x64>
     370:	00 d0       	rcall	.+0      	; 0x372 <task_led+0x66>
     372:	ed b7       	in	r30, 0x3d	; 61
     374:	fe b7       	in	r31, 0x3e	; 62
     376:	31 96       	adiw	r30, 0x01	; 1
     378:	ce 01       	movw	r24, r28
     37a:	03 96       	adiw	r24, 0x03	; 3
     37c:	ad b7       	in	r26, 0x3d	; 61
     37e:	be b7       	in	r27, 0x3e	; 62
     380:	12 96       	adiw	r26, 0x02	; 2
     382:	9c 93       	st	X, r25
     384:	8e 93       	st	-X, r24
     386:	11 97       	sbiw	r26, 0x01	; 1
     388:	8f e3       	ldi	r24, 0x3F	; 63
     38a:	92 e0       	ldi	r25, 0x02	; 2
     38c:	93 83       	std	Z+3, r25	; 0x03
     38e:	82 83       	std	Z+2, r24	; 0x02
     390:	15 83       	std	Z+5, r17	; 0x05
     392:	04 83       	std	Z+4, r16	; 0x04
     394:	0e 94 bb 08 	call	0x1176	; 0x1176 <sprintf>
	insert_timer(&task, ms/256);
     398:	ed b7       	in	r30, 0x3d	; 61
     39a:	fe b7       	in	r31, 0x3e	; 62
     39c:	36 96       	adiw	r30, 0x06	; 6
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	f8 94       	cli
     3a2:	fe bf       	out	0x3e, r31	; 62
     3a4:	0f be       	out	0x3f, r0	; 63
     3a6:	ed bf       	out	0x3d, r30	; 61
     3a8:	c8 01       	movw	r24, r16
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	71 e0       	ldi	r23, 0x01	; 1
     3ae:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__divmodhi4>
     3b2:	ce 01       	movw	r24, r28
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	0e 94 84 04 	call	0x908	; 0x908 <insert_timer>
}
     3ba:	2a 96       	adiw	r28, 0x0a	; 10
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	f8 94       	cli
     3c0:	de bf       	out	0x3e, r29	; 62
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	cd bf       	out	0x3d, r28	; 61
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	1f 91       	pop	r17
     3cc:	0f 91       	pop	r16
     3ce:	08 95       	ret

000003d0 <led_on>:
}
void led_off_all(void) {
	 Leds = PORTL = 0xff;
}
void led_on(uint8_t led_no) {
	Leds &= ~(1 << led_no);
     3d0:	21 e0       	ldi	r18, 0x01	; 1
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <led_on+0xa>
     3d6:	22 0f       	add	r18, r18
     3d8:	33 1f       	adc	r19, r19
     3da:	8a 95       	dec	r24
     3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <led_on+0x6>
     3de:	20 95       	com	r18
     3e0:	80 91 d0 02 	lds	r24, 0x02D0
     3e4:	28 23       	and	r18, r24
     3e6:	20 93 d0 02 	sts	0x02D0, r18
	PORTL = Leds;
     3ea:	20 93 0b 01 	sts	0x010B, r18
}
     3ee:	08 95       	ret

000003f0 <led_off>:
void led_off(uint8_t led_no) {
	Leds |= (1 << led_no);
     3f0:	21 e0       	ldi	r18, 0x01	; 1
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	02 c0       	rjmp	.+4      	; 0x3fa <led_off+0xa>
     3f6:	22 0f       	add	r18, r18
     3f8:	33 1f       	adc	r19, r19
     3fa:	8a 95       	dec	r24
     3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <led_off+0x6>
     3fe:	80 91 d0 02 	lds	r24, 0x02D0
     402:	82 2b       	or	r24, r18
     404:	80 93 d0 02 	sts	0x02D0, r24
	PORTL = Leds;
     408:	80 93 0b 01 	sts	0x010B, r24
}
     40c:	08 95       	ret

0000040e <led_set>:
void led_set(uint8_t led_mask) {
	Leds = ~led_mask;
     40e:	80 95       	com	r24
     410:	80 93 d0 02 	sts	0x02D0, r24
	PORTL = Leds;
     414:	80 93 0b 01 	sts	0x010B, r24
} 
     418:	08 95       	ret

0000041a <q_init>:
char qo[QO_SIZE];
int fi, ri;
int fo, ro;
void q_init()
{
	fi = ri = fo = ro = 0;
     41a:	10 92 de 03 	sts	0x03DE, r1
     41e:	10 92 dd 03 	sts	0x03DD, r1
     422:	10 92 dc 03 	sts	0x03DC, r1
     426:	10 92 db 03 	sts	0x03DB, r1
     42a:	10 92 e0 03 	sts	0x03E0, r1
     42e:	10 92 df 03 	sts	0x03DF, r1
     432:	10 92 da 02 	sts	0x02DA, r1
     436:	10 92 d9 02 	sts	0x02D9, r1
}
     43a:	08 95       	ret

0000043c <qi_insert>:
int qi_insert(char ch)
{
     43c:	48 2f       	mov	r20, r24
 	if ((ri + 1) % QI_SIZE == fi)
     43e:	20 91 df 03 	lds	r18, 0x03DF
     442:	30 91 e0 03 	lds	r19, 0x03E0
     446:	2f 5f       	subi	r18, 0xFF	; 255
     448:	3f 4f       	sbci	r19, 0xFF	; 255
     44a:	c9 01       	movw	r24, r18
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	71 e0       	ldi	r23, 0x01	; 1
     450:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__divmodhi4>
     454:	9c 01       	movw	r18, r24
     456:	80 91 d9 02 	lds	r24, 0x02D9
     45a:	90 91 da 02 	lds	r25, 0x02DA
     45e:	28 17       	cp	r18, r24
     460:	39 07       	cpc	r19, r25
     462:	59 f0       	breq	.+22     	; 0x47a <qi_insert+0x3e>
 		return(0); // full
	ri = (ri + 1) % QI_SIZE;
     464:	30 93 e0 03 	sts	0x03E0, r19
     468:	20 93 df 03 	sts	0x03DF, r18
	qi[ri] = ch;
     46c:	2f 51       	subi	r18, 0x1F	; 31
     46e:	3c 4f       	sbci	r19, 0xFC	; 252
     470:	f9 01       	movw	r30, r18
     472:	40 83       	st	Z, r20
	return(1);
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	08 95       	ret
	fi = ri = fo = ro = 0;
}
int qi_insert(char ch)
{
 	if ((ri + 1) % QI_SIZE == fi)
 		return(0); // full
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return(1);
}
     47e:	08 95       	ret

00000480 <qi_delete>:
int qi_delete()
{
 if (ri == fi)
     480:	80 91 d9 02 	lds	r24, 0x02D9
     484:	90 91 da 02 	lds	r25, 0x02DA
     488:	20 91 df 03 	lds	r18, 0x03DF
     48c:	30 91 e0 03 	lds	r19, 0x03E0
     490:	28 17       	cp	r18, r24
     492:	39 07       	cpc	r19, r25
     494:	79 f0       	breq	.+30     	; 0x4b4 <qi_delete+0x34>
 	return(0); // empty
 fi = (fi + 1) % QI_SIZE;
     496:	01 96       	adiw	r24, 0x01	; 1
     498:	60 e0       	ldi	r22, 0x00	; 0
     49a:	71 e0       	ldi	r23, 0x01	; 1
     49c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__divmodhi4>
     4a0:	90 93 da 02 	sts	0x02DA, r25
     4a4:	80 93 d9 02 	sts	0x02D9, r24
 	return(qi[fi]);
     4a8:	8f 51       	subi	r24, 0x1F	; 31
     4aa:	9c 4f       	sbci	r25, 0xFC	; 252
     4ac:	fc 01       	movw	r30, r24
     4ae:	80 81       	ld	r24, Z
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	08 95       	ret
	return(1);
}
int qi_delete()
{
 if (ri == fi)
 	return(0); // empty
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	90 e0       	ldi	r25, 0x00	; 0
 fi = (fi + 1) % QI_SIZE;
 	return(qi[fi]);
}
     4b8:	08 95       	ret

000004ba <qo_insert>:

int qo_insert(char ch)
{
     4ba:	48 2f       	mov	r20, r24
 	if ((ro + 1) % QO_SIZE == fo)
     4bc:	20 91 dd 03 	lds	r18, 0x03DD
     4c0:	30 91 de 03 	lds	r19, 0x03DE
     4c4:	2f 5f       	subi	r18, 0xFF	; 255
     4c6:	3f 4f       	sbci	r19, 0xFF	; 255
     4c8:	c9 01       	movw	r24, r18
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	71 e0       	ldi	r23, 0x01	; 1
     4ce:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__divmodhi4>
     4d2:	9c 01       	movw	r18, r24
     4d4:	80 91 db 03 	lds	r24, 0x03DB
     4d8:	90 91 dc 03 	lds	r25, 0x03DC
     4dc:	28 17       	cp	r18, r24
     4de:	39 07       	cpc	r19, r25
     4e0:	59 f0       	breq	.+22     	; 0x4f8 <qo_insert+0x3e>
 		return(0); // full
	ro = (ro + 1) % QO_SIZE;
     4e2:	30 93 de 03 	sts	0x03DE, r19
     4e6:	20 93 dd 03 	sts	0x03DD, r18
	qo[ro] = ch;
     4ea:	25 52       	subi	r18, 0x25	; 37
     4ec:	3d 4f       	sbci	r19, 0xFD	; 253
     4ee:	f9 01       	movw	r30, r18
     4f0:	40 83       	st	Z, r20
	return(1);
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	08 95       	ret
}

int qo_insert(char ch)
{
 	if ((ro + 1) % QO_SIZE == fo)
 		return(0); // full
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return(1);
}
     4fc:	08 95       	ret

000004fe <qo_delete>:
int qo_delete()
{
 if (ro == fo)
     4fe:	80 91 db 03 	lds	r24, 0x03DB
     502:	90 91 dc 03 	lds	r25, 0x03DC
     506:	20 91 dd 03 	lds	r18, 0x03DD
     50a:	30 91 de 03 	lds	r19, 0x03DE
     50e:	28 17       	cp	r18, r24
     510:	39 07       	cpc	r19, r25
     512:	79 f0       	breq	.+30     	; 0x532 <qo_delete+0x34>
 	return(0); // empty
 fo = (fo + 1) % QO_SIZE;
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	71 e0       	ldi	r23, 0x01	; 1
     51a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__divmodhi4>
     51e:	90 93 dc 03 	sts	0x03DC, r25
     522:	80 93 db 03 	sts	0x03DB, r24
 	return(qo[fo]);
     526:	85 52       	subi	r24, 0x25	; 37
     528:	9d 4f       	sbci	r25, 0xFD	; 253
     52a:	fc 01       	movw	r30, r24
     52c:	80 81       	ld	r24, Z
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	08 95       	ret
	return(1);
}
int qo_delete()
{
 if (ro == fo)
 	return(0); // empty
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	90 e0       	ldi	r25, 0x00	; 0
 fo = (fo + 1) % QO_SIZE;
 	return(qo[fo]);
}
     536:	08 95       	ret

00000538 <task_prime>:
	}else{
			printf("!!!-444\n");
			printf("$ ");
	}
}
void task_prime(char *ap){
     538:	cf 92       	push	r12
     53a:	df 92       	push	r13
     53c:	ef 92       	push	r14
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
	int t=2000, count = 0, n;
	if(ap &&*ap) t = atoi(ap);
     548:	00 97       	sbiw	r24, 0x00	; 0
     54a:	41 f0       	breq	.+16     	; 0x55c <task_prime+0x24>
     54c:	fc 01       	movw	r30, r24
     54e:	20 81       	ld	r18, Z
     550:	22 23       	and	r18, r18
     552:	21 f0       	breq	.+8      	; 0x55c <task_prime+0x24>
     554:	0e 94 b8 07 	call	0xf70	; 0xf70 <atoi>
     558:	8c 01       	movw	r16, r24
     55a:	02 c0       	rjmp	.+4      	; 0x560 <task_prime+0x28>
			printf("!!!-444\n");
			printf("$ ");
	}
}
void task_prime(char *ap){
	int t=2000, count = 0, n;
     55c:	00 ed       	ldi	r16, 0xD0	; 208
     55e:	17 e0       	ldi	r17, 0x07	; 7
	if(ap &&*ap) t = atoi(ap);
	for(n = 2; n <= t; n++){
     560:	c2 e0       	ldi	r28, 0x02	; 2
     562:	d0 e0       	ldi	r29, 0x00	; 0
			printf("!!!-444\n");
			printf("$ ");
	}
}
void task_prime(char *ap){
	int t=2000, count = 0, n;
     564:	ee 24       	eor	r14, r14
     566:	ff 24       	eor	r15, r15
	if(ap &&*ap) t = atoi(ap);
	for(n = 2; n <= t; n++){
		if(is_prime(n)){
			count++;
			printf("%d is a prime number!!!\n",n);
     568:	85 e4       	ldi	r24, 0x45	; 69
     56a:	c8 2e       	mov	r12, r24
     56c:	82 e0       	ldi	r24, 0x02	; 2
     56e:	d8 2e       	mov	r13, r24
	}
}
void task_prime(char *ap){
	int t=2000, count = 0, n;
	if(ap &&*ap) t = atoi(ap);
	for(n = 2; n <= t; n++){
     570:	17 c0       	rjmp	.+46     	; 0x5a0 <task_prime+0x68>
		if(is_prime(n)){
     572:	ce 01       	movw	r24, r28
     574:	0e 94 96 00 	call	0x12c	; 0x12c <is_prime>
     578:	00 97       	sbiw	r24, 0x00	; 0
     57a:	89 f0       	breq	.+34     	; 0x59e <task_prime+0x66>
			count++;
     57c:	08 94       	sec
     57e:	e1 1c       	adc	r14, r1
     580:	f1 1c       	adc	r15, r1
			printf("%d is a prime number!!!\n",n);
     582:	00 d0       	rcall	.+0      	; 0x584 <task_prime+0x4c>
     584:	0f 92       	push	r0
     586:	ed b7       	in	r30, 0x3d	; 61
     588:	fe b7       	in	r31, 0x3e	; 62
     58a:	d2 82       	std	Z+2, r13	; 0x02
     58c:	c1 82       	std	Z+1, r12	; 0x01
     58e:	d4 83       	std	Z+4, r29	; 0x04
     590:	c3 83       	std	Z+3, r28	; 0x03
     592:	0e 94 74 08 	call	0x10e8	; 0x10e8 <printf>
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
	}
}
void task_prime(char *ap){
	int t=2000, count = 0, n;
	if(ap &&*ap) t = atoi(ap);
	for(n = 2; n <= t; n++){
     59e:	21 96       	adiw	r28, 0x01	; 1
     5a0:	0c 17       	cp	r16, r28
     5a2:	1d 07       	cpc	r17, r29
     5a4:	34 f7       	brge	.-52     	; 0x572 <task_prime+0x3a>
		if(is_prime(n)){
			count++;
			printf("%d is a prime number!!!\n",n);
		}
 	}
	printf("count=%d\n",count);
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <task_prime+0x70>
     5a8:	0f 92       	push	r0
     5aa:	8e e5       	ldi	r24, 0x5E	; 94
     5ac:	92 e0       	ldi	r25, 0x02	; 2
     5ae:	ed b7       	in	r30, 0x3d	; 61
     5b0:	fe b7       	in	r31, 0x3e	; 62
     5b2:	92 83       	std	Z+2, r25	; 0x02
     5b4:	81 83       	std	Z+1, r24	; 0x01
     5b6:	f4 82       	std	Z+4, r15	; 0x04
     5b8:	e3 82       	std	Z+3, r14	; 0x03
     5ba:	0e 94 74 08 	call	0x10e8	; 0x10e8 <printf>
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
}
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	1f 91       	pop	r17
     5cc:	0f 91       	pop	r16
     5ce:	ff 90       	pop	r15
     5d0:	ef 90       	pop	r14
     5d2:	df 90       	pop	r13
     5d4:	cf 90       	pop	r12
     5d6:	08 95       	ret

000005d8 <task_init>:
#define MAX_TASK 16
struct task Task_q[MAX_TASK];
volatile int Task_f, Task_r;

void task_init(){
	Task_f = Task_r = 0;
     5d8:	10 92 e2 04 	sts	0x04E2, r1
     5dc:	10 92 e1 04 	sts	0x04E1, r1
     5e0:	10 92 84 05 	sts	0x0584, r1
     5e4:	10 92 83 05 	sts	0x0583, r1
}
     5e8:	08 95       	ret

000005ea <task_insert>:
int task_insert(struct task *tskp){
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	48 2f       	mov	r20, r24
     5f0:	e9 2f       	mov	r30, r25
	if((Task_r + 1) % MAX_TASK == Task_f)
     5f2:	80 91 e1 04 	lds	r24, 0x04E1
     5f6:	90 91 e2 04 	lds	r25, 0x04E2
     5fa:	c0 91 83 05 	lds	r28, 0x0583
     5fe:	d0 91 84 05 	lds	r29, 0x0584
     602:	01 96       	adiw	r24, 0x01	; 1
     604:	20 e1       	ldi	r18, 0x10	; 16
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	b9 01       	movw	r22, r18
     60a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__divmodhi4>
     60e:	8c 17       	cp	r24, r28
     610:	9d 07       	cpc	r25, r29
     612:	31 f1       	breq	.+76     	; 0x660 <task_insert+0x76>
		return(0);
	Task_r = (Task_r + 1) % MAX_TASK;
     614:	80 91 e1 04 	lds	r24, 0x04E1
     618:	90 91 e2 04 	lds	r25, 0x04E2
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	b9 01       	movw	r22, r18
     620:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__divmodhi4>
     624:	90 93 e2 04 	sts	0x04E2, r25
     628:	80 93 e1 04 	sts	0x04E1, r24
	Task_q[Task_r] = *tskp;
     62c:	80 91 e1 04 	lds	r24, 0x04E1
     630:	90 91 e2 04 	lds	r25, 0x04E2
     634:	dc 01       	movw	r26, r24
     636:	aa 0f       	add	r26, r26
     638:	bb 1f       	adc	r27, r27
     63a:	63 e0       	ldi	r22, 0x03	; 3
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	6a 95       	dec	r22
     642:	e1 f7       	brne	.-8      	; 0x63c <task_insert+0x52>
     644:	a8 0f       	add	r26, r24
     646:	b9 1f       	adc	r27, r25
     648:	ad 51       	subi	r26, 0x1D	; 29
     64a:	bb 4f       	sbci	r27, 0xFB	; 251
     64c:	c4 2f       	mov	r28, r20
     64e:	de 2f       	mov	r29, r30
     650:	8a e0       	ldi	r24, 0x0A	; 10
     652:	09 90       	ld	r0, Y+
     654:	0d 92       	st	X+, r0
     656:	81 50       	subi	r24, 0x01	; 1
     658:	e1 f7       	brne	.-8      	; 0x652 <task_insert+0x68>
	return(1);
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	02 c0       	rjmp	.+4      	; 0x664 <task_insert+0x7a>
void task_init(){
	Task_f = Task_r = 0;
}
int task_insert(struct task *tskp){
	if((Task_r + 1) % MAX_TASK == Task_f)
		return(0);
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	90 e0       	ldi	r25, 0x00	; 0
	Task_r = (Task_r + 1) % MAX_TASK;
	Task_q[Task_r] = *tskp;
	return(1);
}
     664:	df 91       	pop	r29
     666:	cf 91       	pop	r28
     668:	08 95       	ret

0000066a <task_delete>:
int task_delete(struct task *tskp)
{
     66a:	9c 01       	movw	r18, r24
	if(Task_r == Task_f)
     66c:	40 91 e1 04 	lds	r20, 0x04E1
     670:	50 91 e2 04 	lds	r21, 0x04E2
     674:	80 91 83 05 	lds	r24, 0x0583
     678:	90 91 84 05 	lds	r25, 0x0584
     67c:	48 17       	cp	r20, r24
     67e:	59 07       	cpc	r21, r25
     680:	31 f1       	breq	.+76     	; 0x6ce <task_delete+0x64>
		return(0);
	Task_f = (Task_f + 1) % MAX_TASK;
     682:	80 91 83 05 	lds	r24, 0x0583
     686:	90 91 84 05 	lds	r25, 0x0584
     68a:	01 96       	adiw	r24, 0x01	; 1
     68c:	60 e1       	ldi	r22, 0x10	; 16
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__divmodhi4>
     694:	90 93 84 05 	sts	0x0584, r25
     698:	80 93 83 05 	sts	0x0583, r24
	*tskp = Task_q[Task_f];
     69c:	80 91 83 05 	lds	r24, 0x0583
     6a0:	90 91 84 05 	lds	r25, 0x0584
     6a4:	fc 01       	movw	r30, r24
     6a6:	ee 0f       	add	r30, r30
     6a8:	ff 1f       	adc	r31, r31
     6aa:	a3 e0       	ldi	r26, 0x03	; 3
     6ac:	88 0f       	add	r24, r24
     6ae:	99 1f       	adc	r25, r25
     6b0:	aa 95       	dec	r26
     6b2:	e1 f7       	brne	.-8      	; 0x6ac <task_delete+0x42>
     6b4:	e8 0f       	add	r30, r24
     6b6:	f9 1f       	adc	r31, r25
     6b8:	d9 01       	movw	r26, r18
     6ba:	ed 51       	subi	r30, 0x1D	; 29
     6bc:	fb 4f       	sbci	r31, 0xFB	; 251
     6be:	8a e0       	ldi	r24, 0x0A	; 10
     6c0:	01 90       	ld	r0, Z+
     6c2:	0d 92       	st	X+, r0
     6c4:	81 50       	subi	r24, 0x01	; 1
     6c6:	e1 f7       	brne	.-8      	; 0x6c0 <task_delete+0x56>
	return(1);
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	08 95       	ret
	return(1);
}
int task_delete(struct task *tskp)
{
	if(Task_r == Task_f)
		return(0);
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	90 e0       	ldi	r25, 0x00	; 0
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return(1);
}
     6d2:	08 95       	ret

000006d4 <task_cmd>:
//there is no loop in task_cmd function
void task_cmd(void *arg){
     6d4:	af 92       	push	r10
     6d6:	bf 92       	push	r11
     6d8:	cf 92       	push	r12
     6da:	df 92       	push	r13
     6dc:	ef 92       	push	r14
     6de:	ff 92       	push	r15
     6e0:	0f 93       	push	r16
     6e2:	1f 93       	push	r17
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	ca 54       	subi	r28, 0x4A	; 74
     6ee:	d0 40       	sbci	r29, 0x00	; 0
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	f8 94       	cli
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	cd bf       	out	0x3d, r28	; 61
	char buf[64], *cp0, *cp1, *cp2, *cp3;
	struct task task;
	int ms;
	if(gets(buf) == NULL){
     6fa:	ce 01       	movw	r24, r28
     6fc:	0b 96       	adiw	r24, 0x0b	; 11
     6fe:	0e 94 4e 08 	call	0x109c	; 0x109c <gets>
     702:	00 97       	sbiw	r24, 0x00	; 0
     704:	09 f4       	brne	.+2      	; 0x708 <task_cmd+0x34>
     706:	75 c0       	rjmp	.+234    	; 0x7f2 <task_cmd+0x11e>
		printf("$ ");
		return;
	}
	cp0 = strtok(buf, " \t\n\r");
     708:	ce 01       	movw	r24, r28
     70a:	0b 96       	adiw	r24, 0x0b	; 11
     70c:	6b e6       	ldi	r22, 0x6B	; 107
     70e:	72 e0       	ldi	r23, 0x02	; 2
     710:	0e 94 d6 07 	call	0xfac	; 0xfac <strtok>
     714:	8c 01       	movw	r16, r24
	cp1 = strtok(NULL, " \t\n\r");
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	6b e6       	ldi	r22, 0x6B	; 107
     71c:	72 e0       	ldi	r23, 0x02	; 2
     71e:	0e 94 d6 07 	call	0xfac	; 0xfac <strtok>
     722:	7c 01       	movw	r14, r24
	cp2 = strtok(NULL, " \t\n\r");
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	6b e6       	ldi	r22, 0x6B	; 107
     72a:	72 e0       	ldi	r23, 0x02	; 2
     72c:	0e 94 d6 07 	call	0xfac	; 0xfac <strtok>
     730:	5c 01       	movw	r10, r24
	cp3 = strtok(NULL, " \t\n\r");
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	6b e6       	ldi	r22, 0x6B	; 107
     738:	72 e0       	ldi	r23, 0x02	; 2
     73a:	0e 94 d6 07 	call	0xfac	; 0xfac <strtok>
     73e:	6c 01       	movw	r12, r24

	if (cp0 == NULL){
     740:	01 15       	cp	r16, r1
     742:	11 05       	cpc	r17, r1
     744:	39 f4       	brne	.+14     	; 0x754 <task_cmd+0x80>
		printf("!!!-111\n");
     746:	80 e7       	ldi	r24, 0x70	; 112
     748:	92 e0       	ldi	r25, 0x02	; 2
     74a:	0e 94 8d 08 	call	0x111a	; 0x111a <puts>
		tour_timer();
     74e:	0e 94 2c 04 	call	0x858	; 0x858 <tour_timer>
     752:	4f c0       	rjmp	.+158    	; 0x7f2 <task_cmd+0x11e>
		printf("$ ");
		return;
	}
	//using tsk_prime
	if(!strcmp(cp0, "prime")){
     754:	c8 01       	movw	r24, r16
     756:	68 e7       	ldi	r22, 0x78	; 120
     758:	72 e0       	ldi	r23, 0x02	; 2
     75a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <strcmp>
     75e:	00 97       	sbiw	r24, 0x00	; 0
     760:	21 f4       	brne	.+8      	; 0x76a <task_cmd+0x96>
		task_prime(cp1);
     762:	c7 01       	movw	r24, r14
     764:	0e 94 9c 02 	call	0x538	; 0x538 <task_prime>
     768:	50 c0       	rjmp	.+160    	; 0x80a <task_cmd+0x136>
	}
	//not using app_timer
	else if(!strcmp(cp0, "timer")){
     76a:	c8 01       	movw	r24, r16
     76c:	6e e7       	ldi	r22, 0x7E	; 126
     76e:	72 e0       	ldi	r23, 0x02	; 2
     770:	0e 94 db 07 	call	0xfb6	; 0xfb6 <strcmp>
     774:	00 97       	sbiw	r24, 0x00	; 0
     776:	c9 f5       	brne	.+114    	; 0x7ea <task_cmd+0x116>
		if(cp1 == NULL){
     778:	e1 14       	cp	r14, r1
     77a:	f1 04       	cpc	r15, r1
     77c:	19 f4       	brne	.+6      	; 0x784 <task_cmd+0xb0>
			printf("!!!-222\n");
     77e:	84 e8       	ldi	r24, 0x84	; 132
     780:	92 e0       	ldi	r25, 0x02	; 2
     782:	35 c0       	rjmp	.+106    	; 0x7ee <task_cmd+0x11a>
			printf("$ ");
			return;
		}
		ms = atoi(cp1)/256;
     784:	c7 01       	movw	r24, r14
     786:	0e 94 b8 07 	call	0xf70	; 0xf70 <atoi>
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	71 e0       	ldi	r23, 0x01	; 1
     78e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__divmodhi4>
     792:	8b 01       	movw	r16, r22
		if(!strcmp(cp2, "prime")){
     794:	c5 01       	movw	r24, r10
     796:	68 e7       	ldi	r22, 0x78	; 120
     798:	72 e0       	ldi	r23, 0x02	; 2
     79a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <strcmp>
     79e:	00 97       	sbiw	r24, 0x00	; 0
     7a0:	19 f4       	brne	.+6      	; 0x7a8 <task_cmd+0xd4>
			task.fun = (void *)task_prime;
     7a2:	8c e9       	ldi	r24, 0x9C	; 156
     7a4:	92 e0       	ldi	r25, 0x02	; 2
     7a6:	09 c0       	rjmp	.+18     	; 0x7ba <task_cmd+0xe6>
			}
			cli();
			insert_timer(&task, ms);
			sei();
		}
		else if(!strcmp(cp2, "led")){
     7a8:	c5 01       	movw	r24, r10
     7aa:	6d e8       	ldi	r22, 0x8D	; 141
     7ac:	72 e0       	ldi	r23, 0x02	; 2
     7ae:	0e 94 db 07 	call	0xfb6	; 0xfb6 <strcmp>
     7b2:	00 97       	sbiw	r24, 0x00	; 0
     7b4:	b9 f4       	brne	.+46     	; 0x7e4 <task_cmd+0x110>
			task.fun = task_led;
     7b6:	86 e8       	ldi	r24, 0x86	; 134
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	9a 83       	std	Y+2, r25	; 0x02
     7bc:	89 83       	std	Y+1, r24	; 0x01
			if(cp3){
				strcpy(task.arg, cp3);
     7be:	ce 01       	movw	r24, r28
     7c0:	03 96       	adiw	r24, 0x03	; 3
			insert_timer(&task, ms);
			sei();
		}
		else if(!strcmp(cp2, "led")){
			task.fun = task_led;
			if(cp3){
     7c2:	c1 14       	cp	r12, r1
     7c4:	d1 04       	cpc	r13, r1
     7c6:	11 f0       	breq	.+4      	; 0x7cc <task_cmd+0xf8>
				strcpy(task.arg, cp3);
     7c8:	b6 01       	movw	r22, r12
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <task_cmd+0xfc>
			}
			else{
				strcpy(task.arg,"");
     7cc:	6c e8       	ldi	r22, 0x8C	; 140
     7ce:	72 e0       	ldi	r23, 0x02	; 2
     7d0:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <strcpy>
			}
			cli();
     7d4:	f8 94       	cli
			insert_timer(&task, ms);
     7d6:	ce 01       	movw	r24, r28
     7d8:	01 96       	adiw	r24, 0x01	; 1
     7da:	b8 01       	movw	r22, r16
     7dc:	0e 94 84 04 	call	0x908	; 0x908 <insert_timer>
			sei();
     7e0:	78 94       	sei
     7e2:	13 c0       	rjmp	.+38     	; 0x80a <task_cmd+0x136>
		}
		else{
			printf("!!!-333\n");
     7e4:	81 e9       	ldi	r24, 0x91	; 145
     7e6:	92 e0       	ldi	r25, 0x02	; 2
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <task_cmd+0x11a>
			printf("$ ");
		}
	}else{
			printf("!!!-444\n");
     7ea:	89 e9       	ldi	r24, 0x99	; 153
     7ec:	92 e0       	ldi	r25, 0x02	; 2
     7ee:	0e 94 8d 08 	call	0x111a	; 0x111a <puts>
			printf("$ ");
     7f2:	0f 92       	push	r0
     7f4:	0f 92       	push	r0
     7f6:	88 e6       	ldi	r24, 0x68	; 104
     7f8:	92 e0       	ldi	r25, 0x02	; 2
     7fa:	ed b7       	in	r30, 0x3d	; 61
     7fc:	fe b7       	in	r31, 0x3e	; 62
     7fe:	92 83       	std	Z+2, r25	; 0x02
     800:	81 83       	std	Z+1, r24	; 0x01
     802:	0e 94 74 08 	call	0x10e8	; 0x10e8 <printf>
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
	}
}
     80a:	c6 5b       	subi	r28, 0xB6	; 182
     80c:	df 4f       	sbci	r29, 0xFF	; 255
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	f8 94       	cli
     812:	de bf       	out	0x3e, r29	; 62
     814:	0f be       	out	0x3f, r0	; 63
     816:	cd bf       	out	0x3d, r28	; 61
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	ff 90       	pop	r15
     822:	ef 90       	pop	r14
     824:	df 90       	pop	r13
     826:	cf 90       	pop	r12
     828:	bf 90       	pop	r11
     82a:	af 90       	pop	r10
     82c:	08 95       	ret

0000082e <timer_init>:

struct timer *Thead = NULL;

void timer_init() {
	// Initialize   Timer/Counter2 set all bits to zero
	TCNT2 = 0;
     82e:	10 92 b2 00 	sts	0x00B2, r1
	// Asynchronous Timer/Counter2, if AS2 is zero TCNT2 using IOclock, if AS2 is one TCNT2 using Timer Oscillator 1
	sbi(ASSR, AS2);
     832:	e6 eb       	ldi	r30, 0xB6	; 182
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	80 81       	ld	r24, Z
     838:	80 62       	ori	r24, 0x20	; 32
     83a:	80 83       	st	Z, r24
	// Timer2 Overflow Int. Enable
	sbi(TIMSK2, TOIE2);
     83c:	e0 e7       	ldi	r30, 0x70	; 112
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	80 81       	ld	r24, Z
     842:	81 60       	ori	r24, 0x01	; 1
     844:	80 83       	st	Z, r24
	// 32KHz/32 prescaling, Start
	sbi(TCCR2B, CS20);
     846:	e1 eb       	ldi	r30, 0xB1	; 177
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	80 81       	ld	r24, Z
     84c:	81 60       	ori	r24, 0x01	; 1
     84e:	80 83       	st	Z, r24
	sbi(TCCR2B, CS21);
     850:	80 81       	ld	r24, Z
     852:	82 60       	ori	r24, 0x02	; 2
     854:	80 83       	st	Z, r24
}
     856:	08 95       	ret

00000858 <tour_timer>:
		//insert into middle
		pp->link = tp;
		tp->link = cp;
	}
}
void tour_timer(){
     858:	ef 92       	push	r14
     85a:	ff 92       	push	r15
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
 	struct timer *cp;
	int    total = 0;
  printf("\n");
     864:	8a e0       	ldi	r24, 0x0A	; 10
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 86 08 	call	0x110c	; 0x110c <putchar>
	for (cp = Thead; cp != NULL; cp = cp->link) {
     86c:	c0 91 d3 02 	lds	r28, 0x02D3
     870:	d0 91 d4 02 	lds	r29, 0x02D4
		tp->link = cp;
	}
}
void tour_timer(){
 	struct timer *cp;
	int    total = 0;
     874:	00 e0       	ldi	r16, 0x00	; 0
     876:	10 e0       	ldi	r17, 0x00	; 0
  printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     878:	81 ea       	ldi	r24, 0xA1	; 161
     87a:	e8 2e       	mov	r14, r24
     87c:	82 e0       	ldi	r24, 0x02	; 2
     87e:	f8 2e       	mov	r15, r24
}
void tour_timer(){
 	struct timer *cp;
	int    total = 0;
  printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
     880:	20 c0       	rjmp	.+64     	; 0x8c2 <tour_timer+0x6a>
		total += cp->time;
     882:	88 81       	ld	r24, Y
     884:	99 81       	ldd	r25, Y+1	; 0x01
     886:	08 0f       	add	r16, r24
     888:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     88a:	00 d0       	rcall	.+0      	; 0x88c <tour_timer+0x34>
     88c:	00 d0       	rcall	.+0      	; 0x88e <tour_timer+0x36>
     88e:	ed b7       	in	r30, 0x3d	; 61
     890:	fe b7       	in	r31, 0x3e	; 62
     892:	31 96       	adiw	r30, 0x01	; 1
     894:	ad b7       	in	r26, 0x3d	; 61
     896:	be b7       	in	r27, 0x3e	; 62
     898:	12 96       	adiw	r26, 0x02	; 2
     89a:	fc 92       	st	X, r15
     89c:	ee 92       	st	-X, r14
     89e:	11 97       	sbiw	r26, 0x01	; 1
     8a0:	93 83       	std	Z+3, r25	; 0x03
     8a2:	82 83       	std	Z+2, r24	; 0x02
     8a4:	15 83       	std	Z+5, r17	; 0x05
     8a6:	04 83       	std	Z+4, r16	; 0x04
     8a8:	0e 94 74 08 	call	0x10e8	; 0x10e8 <printf>
}
void tour_timer(){
 	struct timer *cp;
	int    total = 0;
  printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
     8ac:	0c 84       	ldd	r0, Y+12	; 0x0c
     8ae:	dd 85       	ldd	r29, Y+13	; 0x0d
     8b0:	c0 2d       	mov	r28, r0
     8b2:	8d b7       	in	r24, 0x3d	; 61
     8b4:	9e b7       	in	r25, 0x3e	; 62
     8b6:	06 96       	adiw	r24, 0x06	; 6
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	f8 94       	cli
     8bc:	9e bf       	out	0x3e, r25	; 62
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	8d bf       	out	0x3d, r24	; 61
     8c2:	20 97       	sbiw	r28, 0x00	; 0
     8c4:	f1 f6       	brne	.-68     	; 0x882 <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     8c6:	8a e0       	ldi	r24, 0x0A	; 10
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 86 08 	call	0x110c	; 0x110c <putchar>
}
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	ff 90       	pop	r15
     8d8:	ef 90       	pop	r14
     8da:	08 95       	ret

000008dc <free_timer>:
void free_timer(){
 	struct timer *cp;
 	for ( ;Thead != NULL; ){
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     8de:	fc 01       	movw	r30, r24
     8e0:	24 85       	ldd	r18, Z+12	; 0x0c
     8e2:	35 85       	ldd	r19, Z+13	; 0x0d
     8e4:	30 93 d4 02 	sts	0x02D4, r19
     8e8:	20 93 d3 02 	sts	0x02D3, r18
		free(cp);
     8ec:	0e 94 1f 07 	call	0xe3e	; 0xe3e <free>
	}
	printf("\n");
}
void free_timer(){
 	struct timer *cp;
 	for ( ;Thead != NULL; ){
     8f0:	80 91 d3 02 	lds	r24, 0x02D3
     8f4:	90 91 d4 02 	lds	r25, 0x02D4
     8f8:	00 97       	sbiw	r24, 0x00	; 0
     8fa:	89 f7       	brne	.-30     	; 0x8de <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
}
     8fc:	08 95       	ret

000008fe <get_timer>:
struct timer *get_timer()
{
	struct timer *tp;
  tp = (struct timer *)malloc(sizeof(*tp));
     8fe:	8e e0       	ldi	r24, 0x0E	; 14
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 89 06 	call	0xd12	; 0xd12 <malloc>
	return(tp);
}
     906:	08 95       	ret

00000908 <insert_timer>:
	// 32KHz/32 prescaling, Start
	sbi(TCCR2B, CS20);
	sbi(TCCR2B, CS21);
}

void insert_timer(struct task *tskp, int ms){
     908:	ef 92       	push	r14
     90a:	ff 92       	push	r15
     90c:	0f 93       	push	r16
     90e:	1f 93       	push	r17
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	f8 2e       	mov	r15, r24
     916:	e9 2e       	mov	r14, r25
     918:	8b 01       	movw	r16, r22
	int total;
	struct timer *tp, *cp, *pp;
	//get a new node
	tp = get_timer();
     91a:	0e 94 7f 04 	call	0x8fe	; 0x8fe <get_timer>
     91e:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     920:	dc 01       	movw	r26, r24
     922:	12 96       	adiw	r26, 0x02	; 2
     924:	ef 2d       	mov	r30, r15
     926:	fe 2d       	mov	r31, r14
     928:	8a e0       	ldi	r24, 0x0A	; 10
     92a:	01 90       	ld	r0, Z+
     92c:	0d 92       	st	X+, r0
     92e:	81 50       	subi	r24, 0x01	; 1
     930:	e1 f7       	brne	.-8      	; 0x92a <insert_timer+0x22>
	tp->time = ms;
     932:	19 83       	std	Y+1, r17	; 0x01
     934:	08 83       	st	Y, r16

	//insert into empty timer list
  if (Thead == NULL) {
     936:	e0 91 d3 02 	lds	r30, 0x02D3
     93a:	f0 91 d4 02 	lds	r31, 0x02D4
     93e:	30 97       	sbiw	r30, 0x00	; 0
     940:	29 f4       	brne	.+10     	; 0x94c <insert_timer+0x44>
		Thead = tp;
     942:	d0 93 d4 02 	sts	0x02D4, r29
     946:	c0 93 d3 02 	sts	0x02D3, r28
     94a:	2f c0       	rjmp	.+94     	; 0x9aa <insert_timer+0xa2>
	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;

	//insert into empty timer list
  if (Thead == NULL) {
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	01 c0       	rjmp	.+2      	; 0x958 <insert_timer+0x50>
	}

	pp = NULL;
	total = 0;
	//loop while cp is not null
	for (cp = Thead; cp; cp = cp->link) {
     956:	fd 01       	movw	r30, r26
			total += cp->time;
     958:	80 81       	ld	r24, Z
     95a:	91 81       	ldd	r25, Z+1	; 0x01
     95c:	28 0f       	add	r18, r24
     95e:	39 1f       	adc	r19, r25
			//if total is bigger than ms then pp point to right before cp
			if (total >= ms)
     960:	20 17       	cp	r18, r16
     962:	31 07       	cpc	r19, r17
     964:	34 f4       	brge	.+12     	; 0x972 <insert_timer+0x6a>
	}

	pp = NULL;
	total = 0;
	//loop while cp is not null
	for (cp = Thead; cp; cp = cp->link) {
     966:	a4 85       	ldd	r26, Z+12	; 0x0c
     968:	b5 85       	ldd	r27, Z+13	; 0x0d
     96a:	af 01       	movw	r20, r30
     96c:	10 97       	sbiw	r26, 0x00	; 0
     96e:	99 f7       	brne	.-26     	; 0x956 <insert_timer+0x4e>
     970:	01 c0       	rjmp	.+2      	; 0x974 <insert_timer+0x6c>
			total += cp->time;
			//if total is bigger than ms then pp point to right before cp
			if (total >= ms)
     972:	df 01       	movw	r26, r30
			//break at cp
				break;
      pp = cp;
  }
	//insert into head. second node time is subtracted by insertion node time
  if (pp == NULL) {
     974:	41 15       	cp	r20, r1
     976:	51 05       	cpc	r21, r1
     978:	79 f4       	brne	.+30     	; 0x998 <insert_timer+0x90>
		cp->time -= tp->time;
     97a:	8d 91       	ld	r24, X+
     97c:	9c 91       	ld	r25, X
     97e:	11 97       	sbiw	r26, 0x01	; 1
     980:	80 1b       	sub	r24, r16
     982:	91 0b       	sbc	r25, r17
     984:	11 96       	adiw	r26, 0x01	; 1
     986:	9c 93       	st	X, r25
     988:	8e 93       	st	-X, r24
		tp->link = cp;
     98a:	bd 87       	std	Y+13, r27	; 0x0d
     98c:	ac 87       	std	Y+12, r26	; 0x0c
	 	Thead = tp;
     98e:	d0 93 d4 02 	sts	0x02D4, r29
     992:	c0 93 d3 02 	sts	0x02D3, r28
     996:	24 c0       	rjmp	.+72     	; 0x9e0 <insert_timer+0xd8>
	}
	//insert into tail. last one is subtracted by total
	else if (cp == NULL) {
     998:	10 97       	sbiw	r26, 0x00	; 0
     99a:	51 f4       	brne	.+20     	; 0x9b0 <insert_timer+0xa8>
		tp->time -= total; // pp->time
     99c:	02 1b       	sub	r16, r18
     99e:	13 0b       	sbc	r17, r19
     9a0:	19 83       	std	Y+1, r17	; 0x01
     9a2:	08 83       	st	Y, r16
		pp->link = tp;
     9a4:	fa 01       	movw	r30, r20
     9a6:	d5 87       	std	Z+13, r29	; 0x0d
     9a8:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     9aa:	1d 86       	std	Y+13, r1	; 0x0d
     9ac:	1c 86       	std	Y+12, r1	; 0x0c
     9ae:	18 c0       	rjmp	.+48     	; 0x9e0 <insert_timer+0xd8>
	}
	//insert into some where in the middle of list
	else {
		//re evaluate total time before cp
		total -= cp->time;
     9b0:	8d 91       	ld	r24, X+
     9b2:	9c 91       	ld	r25, X
     9b4:	11 97       	sbiw	r26, 0x01	; 1
     9b6:	b9 01       	movw	r22, r18
     9b8:	68 1b       	sub	r22, r24
     9ba:	79 0b       	sbc	r23, r25
		//re calculate time of insertion and followed nodes
		tp->time -= total;
     9bc:	98 01       	movw	r18, r16
     9be:	26 1b       	sub	r18, r22
     9c0:	37 0b       	sbc	r19, r23
     9c2:	39 83       	std	Y+1, r19	; 0x01
     9c4:	28 83       	st	Y, r18
		cp->time -= tp->time;
     9c6:	8d 91       	ld	r24, X+
     9c8:	9c 91       	ld	r25, X
     9ca:	11 97       	sbiw	r26, 0x01	; 1
     9cc:	82 1b       	sub	r24, r18
     9ce:	93 0b       	sbc	r25, r19
     9d0:	11 96       	adiw	r26, 0x01	; 1
     9d2:	9c 93       	st	X, r25
     9d4:	8e 93       	st	-X, r24
		//insert into middle
		pp->link = tp;
     9d6:	fa 01       	movw	r30, r20
     9d8:	d5 87       	std	Z+13, r29	; 0x0d
     9da:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     9dc:	bd 87       	std	Y+13, r27	; 0x0d
     9de:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	0f 91       	pop	r16
     9e8:	ff 90       	pop	r15
     9ea:	ef 90       	pop	r14
     9ec:	08 95       	ret

000009ee <timer_expire>:
{
	struct timer *tp;
  tp = (struct timer *)malloc(sizeof(*tp));
	return(tp);
}
void timer_expire(void){
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
	struct timer *tp;
	for(; Thead != NULL && Thead->time==0;){
     9f2:	0d c0       	rjmp	.+26     	; 0xa0e <timer_expire+0x20>
		tp = Thead;
		Thead = tp->link;
     9f4:	8c 85       	ldd	r24, Y+12	; 0x0c
     9f6:	9d 85       	ldd	r25, Y+13	; 0x0d
     9f8:	90 93 d4 02 	sts	0x02D4, r25
     9fc:	80 93 d3 02 	sts	0x02D3, r24
		task_insert(&tp->task);
     a00:	ce 01       	movw	r24, r28
     a02:	02 96       	adiw	r24, 0x02	; 2
     a04:	0e 94 f5 02 	call	0x5ea	; 0x5ea <task_insert>
		free(tp);
     a08:	ce 01       	movw	r24, r28
     a0a:	0e 94 1f 07 	call	0xe3e	; 0xe3e <free>
  tp = (struct timer *)malloc(sizeof(*tp));
	return(tp);
}
void timer_expire(void){
	struct timer *tp;
	for(; Thead != NULL && Thead->time==0;){
     a0e:	c0 91 d3 02 	lds	r28, 0x02D3
     a12:	d0 91 d4 02 	lds	r29, 0x02D4
     a16:	20 97       	sbiw	r28, 0x00	; 0
     a18:	21 f0       	breq	.+8      	; 0xa22 <timer_expire+0x34>
     a1a:	88 81       	ld	r24, Y
     a1c:	99 81       	ldd	r25, Y+1	; 0x01
     a1e:	00 97       	sbiw	r24, 0x00	; 0
     a20:	49 f3       	breq	.-46     	; 0x9f4 <timer_expire+0x6>
		tp = Thead;
		Thead = tp->link;
		task_insert(&tp->task);
		free(tp);
	}
}
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	08 95       	ret

00000a28 <__vector_15>:
ISR(TIMER2_OVF_vect){
     a28:	1f 92       	push	r1
     a2a:	0f 92       	push	r0
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	0f 92       	push	r0
     a30:	0b b6       	in	r0, 0x3b	; 59
     a32:	0f 92       	push	r0
     a34:	11 24       	eor	r1, r1
     a36:	2f 93       	push	r18
     a38:	3f 93       	push	r19
     a3a:	4f 93       	push	r20
     a3c:	5f 93       	push	r21
     a3e:	6f 93       	push	r22
     a40:	7f 93       	push	r23
     a42:	8f 93       	push	r24
     a44:	9f 93       	push	r25
     a46:	af 93       	push	r26
     a48:	bf 93       	push	r27
     a4a:	ef 93       	push	r30
     a4c:	ff 93       	push	r31
			led_off_all();
			led = 0;
			onesec = 0;
		}
	}*/
	if(!Thead)
     a4e:	e0 91 d3 02 	lds	r30, 0x02D3
     a52:	f0 91 d4 02 	lds	r31, 0x02D4
     a56:	30 97       	sbiw	r30, 0x00	; 0
     a58:	49 f0       	breq	.+18     	; 0xa6c <__vector_15+0x44>
		return;
	if(--Thead->time == 0)
     a5a:	80 81       	ld	r24, Z
     a5c:	91 81       	ldd	r25, Z+1	; 0x01
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	91 83       	std	Z+1, r25	; 0x01
     a62:	80 83       	st	Z, r24
     a64:	00 97       	sbiw	r24, 0x00	; 0
     a66:	11 f4       	brne	.+4      	; 0xa6c <__vector_15+0x44>
		timer_expire();
     a68:	0e 94 f7 04 	call	0x9ee	; 0x9ee <timer_expire>
}
     a6c:	ff 91       	pop	r31
     a6e:	ef 91       	pop	r30
     a70:	bf 91       	pop	r27
     a72:	af 91       	pop	r26
     a74:	9f 91       	pop	r25
     a76:	8f 91       	pop	r24
     a78:	7f 91       	pop	r23
     a7a:	6f 91       	pop	r22
     a7c:	5f 91       	pop	r21
     a7e:	4f 91       	pop	r20
     a80:	3f 91       	pop	r19
     a82:	2f 91       	pop	r18
     a84:	0f 90       	pop	r0
     a86:	0b be       	out	0x3b, r0	; 59
     a88:	0f 90       	pop	r0
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	0f 90       	pop	r0
     a8e:	1f 90       	pop	r1
     a90:	18 95       	reti

00000a92 <uart_getchar>:
}
int uart_getchar(FILE *stream)
{
	char ch;
 	do {
 		cli();
     a92:	f8 94       	cli
 		ch = qi_delete();
     a94:	0e 94 40 02 	call	0x480	; 0x480 <qi_delete>
 		sei();
     a98:	78 94       	sei
 	} while (ch == 0);
     a9a:	88 23       	and	r24, r24
     a9c:	d1 f3       	breq	.-12     	; 0xa92 <uart_getchar>
 	if (ch == ETX) return(-1);
     a9e:	84 30       	cpi	r24, 0x04	; 4
     aa0:	11 f0       	breq	.+4      	; 0xaa6 <uart_getchar+0x14>
 	else return(ch);
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	08 95       	ret
 	do {
 		cli();
 		ch = qi_delete();
 		sei();
 	} while (ch == 0);
 	if (ch == ETX) return(-1);
     aa6:	8f ef       	ldi	r24, 0xFF	; 255
     aa8:	9f ef       	ldi	r25, 0xFF	; 255
 	else return(ch);
 }
     aaa:	08 95       	ret

00000aac <uart_putchar>:
	 sbi(UCSR0B, RXEN0); // RX enable
 	 sbi(UCSR0B, RXCIE0); // RX complete interrupt enable
 }

int uart_putchar(char ch, FILE *stream)
{
     aac:	cf 93       	push	r28
     aae:	c8 2f       	mov	r28, r24

	 if (ch == '\n')
     ab0:	8a 30       	cpi	r24, 0x0A	; 10
     ab2:	19 f4       	brne	.+6      	; 0xaba <uart_putchar+0xe>
	 	uart_putchar('\r', stream);
     ab4:	8d e0       	ldi	r24, 0x0D	; 13
     ab6:	0e 94 56 05 	call	0xaac	; 0xaac <uart_putchar>
	 cli(); /* clear interrupt flag */
     aba:	f8 94       	cli
	 if (!uart_busy) {
     abc:	80 91 85 05 	lds	r24, 0x0585
     ac0:	88 23       	and	r24, r24
     ac2:	59 f4       	brne	.+22     	; 0xada <uart_putchar+0x2e>
	 	UDR0 = ch;
     ac4:	c0 93 c6 00 	sts	0x00C6, r28
	 	uart_busy = 1;
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	80 93 85 05 	sts	0x0585, r24
     ace:	0a c0       	rjmp	.+20     	; 0xae4 <uart_putchar+0x38>
	 }
	 else {
	 	while(qo_insert(ch) == 0) {
	 		sei();
     ad0:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ad2:	86 ef       	ldi	r24, 0xF6	; 246
     ad4:	8a 95       	dec	r24
     ad6:	f1 f7       	brne	.-4      	; 0xad4 <uart_putchar+0x28>
	 		_delay_us(100);
	 		cli();
     ad8:	f8 94       	cli
	 if (!uart_busy) {
	 	UDR0 = ch;
	 	uart_busy = 1;
	 }
	 else {
	 	while(qo_insert(ch) == 0) {
     ada:	8c 2f       	mov	r24, r28
     adc:	0e 94 5d 02 	call	0x4ba	; 0x4ba <qo_insert>
     ae0:	00 97       	sbiw	r24, 0x00	; 0
     ae2:	b1 f3       	breq	.-20     	; 0xad0 <uart_putchar+0x24>
	 		sei();
	 		_delay_us(100);
	 		cli();
	 	}
	 }
	 sei(); /* set interrupt flag */
     ae4:	78 94       	sei
	 return(1);
}
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	cf 91       	pop	r28
     aec:	08 95       	ret

00000aee <uart_init>:
 FILE Mystdin = FDEV_SETUP_STREAM (NULL, uart_getchar,_FDEV_SETUP_READ);
 unsigned char uart_busy;

 void uart_init()
 {
 	 stdin = &Mystdin;
     aee:	8d ea       	ldi	r24, 0xAD	; 173
     af0:	92 e0       	ldi	r25, 0x02	; 2
     af2:	90 93 8b 05 	sts	0x058B, r25
     af6:	80 93 8a 05 	sts	0x058A, r24
	 stdout = &Mystdout;
     afa:	8b eb       	ldi	r24, 0xBB	; 187
     afc:	92 e0       	ldi	r25, 0x02	; 2
     afe:	90 93 8d 05 	sts	0x058D, r25
     b02:	80 93 8c 05 	sts	0x058C, r24
	 q_init();
     b06:	0e 94 0d 02 	call	0x41a	; 0x41a <q_init>
	 uart_busy = 0; // false
     b0a:	10 92 85 05 	sts	0x0585, r1
	 UBRR0H = 0x00; UBRR0L = 0x07;
     b0e:	10 92 c5 00 	sts	0x00C5, r1
     b12:	87 e0       	ldi	r24, 0x07	; 7
     b14:	80 93 c4 00 	sts	0x00C4, r24
	 sbi(UCSR0A, U2X0); // UCSR)A |= (1 << U2X0);
     b18:	e0 ec       	ldi	r30, 0xC0	; 192
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	80 81       	ld	r24, Z
     b1e:	82 60       	ori	r24, 0x02	; 2
     b20:	80 83       	st	Z, r24
	 sbi(UCSR0B, TXEN0);
     b22:	e1 ec       	ldi	r30, 0xC1	; 193
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	80 81       	ld	r24, Z
     b28:	88 60       	ori	r24, 0x08	; 8
     b2a:	80 83       	st	Z, r24
	 sbi(UCSR0B, TXCIE0);
     b2c:	80 81       	ld	r24, Z
     b2e:	80 64       	ori	r24, 0x40	; 64
     b30:	80 83       	st	Z, r24
	 sbi(UCSR0B, RXEN0); // RX enable
     b32:	80 81       	ld	r24, Z
     b34:	80 61       	ori	r24, 0x10	; 16
     b36:	80 83       	st	Z, r24
 	 sbi(UCSR0B, RXCIE0); // RX complete interrupt enable
     b38:	80 81       	ld	r24, Z
     b3a:	80 68       	ori	r24, 0x80	; 128
     b3c:	80 83       	st	Z, r24
 }
     b3e:	08 95       	ret

00000b40 <uart_echo>:
 	} while (ch == 0);
 	if (ch == ETX) return(-1);
 	else return(ch);
 }
 void uart_echo(char ch)
 {
     b40:	cf 93       	push	r28
     b42:	c8 2f       	mov	r28, r24
 	if (ch == '\n') uart_echo('\r');
     b44:	8a 30       	cpi	r24, 0x0A	; 10
     b46:	19 f4       	brne	.+6      	; 0xb4e <uart_echo+0xe>
     b48:	8d e0       	ldi	r24, 0x0D	; 13
     b4a:	0e 94 a0 05 	call	0xb40	; 0xb40 <uart_echo>
 	if (!uart_busy) {
     b4e:	80 91 85 05 	lds	r24, 0x0585
     b52:	88 23       	and	r24, r24
     b54:	31 f4       	brne	.+12     	; 0xb62 <uart_echo+0x22>
 		UDR0 = ch;
     b56:	c0 93 c6 00 	sts	0x00C6, r28
 		uart_busy = 1;
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	80 93 85 05 	sts	0x0585, r24
     b60:	03 c0       	rjmp	.+6      	; 0xb68 <uart_echo+0x28>
 	}
 	else
 	qo_insert(ch);
     b62:	8c 2f       	mov	r24, r28
     b64:	0e 94 5d 02 	call	0x4ba	; 0x4ba <qo_insert>
 }
     b68:	cf 91       	pop	r28
     b6a:	08 95       	ret

00000b6c <__vector_27>:

ISR(USART0_TX_vect)
{
     b6c:	1f 92       	push	r1
     b6e:	0f 92       	push	r0
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	0f 92       	push	r0
     b74:	0b b6       	in	r0, 0x3b	; 59
     b76:	0f 92       	push	r0
     b78:	11 24       	eor	r1, r1
     b7a:	2f 93       	push	r18
     b7c:	3f 93       	push	r19
     b7e:	4f 93       	push	r20
     b80:	5f 93       	push	r21
     b82:	6f 93       	push	r22
     b84:	7f 93       	push	r23
     b86:	8f 93       	push	r24
     b88:	9f 93       	push	r25
     b8a:	af 93       	push	r26
     b8c:	bf 93       	push	r27
     b8e:	ef 93       	push	r30
     b90:	ff 93       	push	r31
	 char ch;
	 if ((ch = qo_delete()) == 0)
     b92:	0e 94 7f 02 	call	0x4fe	; 0x4fe <qo_delete>
     b96:	88 23       	and	r24, r24
     b98:	19 f4       	brne	.+6      	; 0xba0 <__vector_27+0x34>
	 	uart_busy = 0;
     b9a:	10 92 85 05 	sts	0x0585, r1
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <__vector_27+0x38>
	 else
		UDR0 = ch;
     ba0:	80 93 c6 00 	sts	0x00C6, r24
}
     ba4:	ff 91       	pop	r31
     ba6:	ef 91       	pop	r30
     ba8:	bf 91       	pop	r27
     baa:	af 91       	pop	r26
     bac:	9f 91       	pop	r25
     bae:	8f 91       	pop	r24
     bb0:	7f 91       	pop	r23
     bb2:	6f 91       	pop	r22
     bb4:	5f 91       	pop	r21
     bb6:	4f 91       	pop	r20
     bb8:	3f 91       	pop	r19
     bba:	2f 91       	pop	r18
     bbc:	0f 90       	pop	r0
     bbe:	0b be       	out	0x3b, r0	; 59
     bc0:	0f 90       	pop	r0
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	0f 90       	pop	r0
     bc6:	1f 90       	pop	r1
     bc8:	18 95       	reti

00000bca <__vector_25>:
ISR(USART0_RX_vect)
{
     bca:	1f 92       	push	r1
     bcc:	0f 92       	push	r0
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	0f 92       	push	r0
     bd2:	0b b6       	in	r0, 0x3b	; 59
     bd4:	0f 92       	push	r0
     bd6:	11 24       	eor	r1, r1
     bd8:	1f 93       	push	r17
     bda:	2f 93       	push	r18
     bdc:	3f 93       	push	r19
     bde:	4f 93       	push	r20
     be0:	5f 93       	push	r21
     be2:	6f 93       	push	r22
     be4:	7f 93       	push	r23
     be6:	8f 93       	push	r24
     be8:	9f 93       	push	r25
     bea:	af 93       	push	r26
     bec:	bf 93       	push	r27
     bee:	ef 93       	push	r30
     bf0:	ff 93       	push	r31
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	cd b7       	in	r28, 0x3d	; 61
     bf8:	de b7       	in	r29, 0x3e	; 62
     bfa:	2a 97       	sbiw	r28, 0x0a	; 10
     bfc:	de bf       	out	0x3e, r29	; 62
     bfe:	cd bf       	out	0x3d, r28	; 61
	struct task task;
 	char ch;
 	ch = UDR0;
     c00:	10 91 c6 00 	lds	r17, 0x00C6
	if (ch != ETX) {
     c04:	14 30       	cpi	r17, 0x04	; 4
     c06:	31 f0       	breq	.+12     	; 0xc14 <__vector_25+0x4a>
 		if (ch == '\r')
     c08:	1d 30       	cpi	r17, 0x0D	; 13
     c0a:	09 f4       	brne	.+2      	; 0xc0e <__vector_25+0x44>
 		 ch = '\n';
     c0c:	1a e0       	ldi	r17, 0x0A	; 10
 		uart_echo(ch);
     c0e:	81 2f       	mov	r24, r17
     c10:	0e 94 a0 05 	call	0xb40	; 0xb40 <uart_echo>
 	}

 	qi_insert(ch);
     c14:	81 2f       	mov	r24, r17
     c16:	0e 94 1e 02 	call	0x43c	; 0x43c <qi_insert>
  //type one line then execute task_cmd at the first time
	if(ch == ETX || ch == '\n'){
     c1a:	14 30       	cpi	r17, 0x04	; 4
     c1c:	11 f0       	breq	.+4      	; 0xc22 <__vector_25+0x58>
     c1e:	1a 30       	cpi	r17, 0x0A	; 10
     c20:	71 f4       	brne	.+28     	; 0xc3e <__vector_25+0x74>
		task.fun = task_cmd;
     c22:	8a e6       	ldi	r24, 0x6A	; 106
     c24:	93 e0       	ldi	r25, 0x03	; 3
     c26:	9a 83       	std	Y+2, r25	; 0x02
     c28:	89 83       	std	Y+1, r24	; 0x01
		strcpy(task.arg, "");
     c2a:	ce 01       	movw	r24, r28
     c2c:	03 96       	adiw	r24, 0x03	; 3
     c2e:	6c ea       	ldi	r22, 0xAC	; 172
     c30:	72 e0       	ldi	r23, 0x02	; 2
     c32:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <strcpy>
		task_insert(&task);
     c36:	ce 01       	movw	r24, r28
     c38:	01 96       	adiw	r24, 0x01	; 1
     c3a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <task_insert>
	}
}
     c3e:	2a 96       	adiw	r28, 0x0a	; 10
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	ff 91       	pop	r31
     c4a:	ef 91       	pop	r30
     c4c:	bf 91       	pop	r27
     c4e:	af 91       	pop	r26
     c50:	9f 91       	pop	r25
     c52:	8f 91       	pop	r24
     c54:	7f 91       	pop	r23
     c56:	6f 91       	pop	r22
     c58:	5f 91       	pop	r21
     c5a:	4f 91       	pop	r20
     c5c:	3f 91       	pop	r19
     c5e:	2f 91       	pop	r18
     c60:	1f 91       	pop	r17
     c62:	0f 90       	pop	r0
     c64:	0b be       	out	0x3b, r0	; 59
     c66:	0f 90       	pop	r0
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	0f 90       	pop	r0
     c6c:	1f 90       	pop	r1
     c6e:	18 95       	reti

00000c70 <main>:

#include "timer.h"
#include "led.h"

int main()
{
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
     c78:	2a 97       	sbiw	r28, 0x0a	; 10
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	de bf       	out	0x3e, r29	; 62
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	cd bf       	out	0x3d, r28	; 61
	int tag;
	struct task task;
	//led_init();
	uart_init();
     c84:	0e 94 77 05 	call	0xaee	; 0xaee <uart_init>
	task_init();
     c88:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <task_init>
	timer_init();
     c8c:	0e 94 17 04 	call	0x82e	; 0x82e <timer_init>

	printf("$ ");
     c90:	0f 92       	push	r0
     c92:	0f 92       	push	r0
     c94:	82 e4       	ldi	r24, 0x42	; 66
     c96:	92 e0       	ldi	r25, 0x02	; 2
     c98:	ed b7       	in	r30, 0x3d	; 61
     c9a:	fe b7       	in	r31, 0x3e	; 62
     c9c:	92 83       	std	Z+2, r25	; 0x02
     c9e:	81 83       	std	Z+1, r24	; 0x01
     ca0:	0e 94 74 08 	call	0x10e8	; 0x10e8 <printf>
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0

	while(1){
		cli();
     ca8:	f8 94       	cli
		tag = task_delete(&task);
     caa:	ce 01       	movw	r24, r28
     cac:	01 96       	adiw	r24, 0x01	; 1
     cae:	0e 94 35 03 	call	0x66a	; 0x66a <task_delete>
		sei();
     cb2:	78 94       	sei
		if(tag){
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	c1 f3       	breq	.-16     	; 0xca8 <main+0x38>
			((*task.fun))(task.arg);
     cb8:	e9 81       	ldd	r30, Y+1	; 0x01
     cba:	fa 81       	ldd	r31, Y+2	; 0x02
     cbc:	ce 01       	movw	r24, r28
     cbe:	03 96       	adiw	r24, 0x03	; 3
     cc0:	19 95       	eicall
     cc2:	f2 cf       	rjmp	.-28     	; 0xca8 <main+0x38>

00000cc4 <__divmodhi4>:
     cc4:	97 fb       	bst	r25, 7
     cc6:	09 2e       	mov	r0, r25
     cc8:	07 26       	eor	r0, r23
     cca:	0a d0       	rcall	.+20     	; 0xce0 <__divmodhi4_neg1>
     ccc:	77 fd       	sbrc	r23, 7
     cce:	04 d0       	rcall	.+8      	; 0xcd8 <__divmodhi4_neg2>
     cd0:	0c d0       	rcall	.+24     	; 0xcea <__udivmodhi4>
     cd2:	06 d0       	rcall	.+12     	; 0xce0 <__divmodhi4_neg1>
     cd4:	00 20       	and	r0, r0
     cd6:	1a f4       	brpl	.+6      	; 0xcde <__divmodhi4_exit>

00000cd8 <__divmodhi4_neg2>:
     cd8:	70 95       	com	r23
     cda:	61 95       	neg	r22
     cdc:	7f 4f       	sbci	r23, 0xFF	; 255

00000cde <__divmodhi4_exit>:
     cde:	08 95       	ret

00000ce0 <__divmodhi4_neg1>:
     ce0:	f6 f7       	brtc	.-4      	; 0xcde <__divmodhi4_exit>
     ce2:	90 95       	com	r25
     ce4:	81 95       	neg	r24
     ce6:	9f 4f       	sbci	r25, 0xFF	; 255
     ce8:	08 95       	ret

00000cea <__udivmodhi4>:
     cea:	aa 1b       	sub	r26, r26
     cec:	bb 1b       	sub	r27, r27
     cee:	51 e1       	ldi	r21, 0x11	; 17
     cf0:	07 c0       	rjmp	.+14     	; 0xd00 <__udivmodhi4_ep>

00000cf2 <__udivmodhi4_loop>:
     cf2:	aa 1f       	adc	r26, r26
     cf4:	bb 1f       	adc	r27, r27
     cf6:	a6 17       	cp	r26, r22
     cf8:	b7 07       	cpc	r27, r23
     cfa:	10 f0       	brcs	.+4      	; 0xd00 <__udivmodhi4_ep>
     cfc:	a6 1b       	sub	r26, r22
     cfe:	b7 0b       	sbc	r27, r23

00000d00 <__udivmodhi4_ep>:
     d00:	88 1f       	adc	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	5a 95       	dec	r21
     d06:	a9 f7       	brne	.-22     	; 0xcf2 <__udivmodhi4_loop>
     d08:	80 95       	com	r24
     d0a:	90 95       	com	r25
     d0c:	bc 01       	movw	r22, r24
     d0e:	cd 01       	movw	r24, r26
     d10:	08 95       	ret

00000d12 <malloc>:
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	ac 01       	movw	r20, r24
     d18:	82 30       	cpi	r24, 0x02	; 2
     d1a:	91 05       	cpc	r25, r1
     d1c:	10 f4       	brcc	.+4      	; 0xd22 <malloc+0x10>
     d1e:	42 e0       	ldi	r20, 0x02	; 2
     d20:	50 e0       	ldi	r21, 0x00	; 0
     d22:	e0 91 88 05 	lds	r30, 0x0588
     d26:	f0 91 89 05 	lds	r31, 0x0589
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	a0 e0       	ldi	r26, 0x00	; 0
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	24 c0       	rjmp	.+72     	; 0xd7c <malloc+0x6a>
     d34:	80 81       	ld	r24, Z
     d36:	91 81       	ldd	r25, Z+1	; 0x01
     d38:	84 17       	cp	r24, r20
     d3a:	95 07       	cpc	r25, r21
     d3c:	d0 f0       	brcs	.+52     	; 0xd72 <malloc+0x60>
     d3e:	84 17       	cp	r24, r20
     d40:	95 07       	cpc	r25, r21
     d42:	71 f4       	brne	.+28     	; 0xd60 <malloc+0x4e>
     d44:	82 81       	ldd	r24, Z+2	; 0x02
     d46:	93 81       	ldd	r25, Z+3	; 0x03
     d48:	10 97       	sbiw	r26, 0x00	; 0
     d4a:	29 f0       	breq	.+10     	; 0xd56 <malloc+0x44>
     d4c:	13 96       	adiw	r26, 0x03	; 3
     d4e:	9c 93       	st	X, r25
     d50:	8e 93       	st	-X, r24
     d52:	12 97       	sbiw	r26, 0x02	; 2
     d54:	2c c0       	rjmp	.+88     	; 0xdae <malloc+0x9c>
     d56:	90 93 89 05 	sts	0x0589, r25
     d5a:	80 93 88 05 	sts	0x0588, r24
     d5e:	27 c0       	rjmp	.+78     	; 0xdae <malloc+0x9c>
     d60:	21 15       	cp	r18, r1
     d62:	31 05       	cpc	r19, r1
     d64:	19 f0       	breq	.+6      	; 0xd6c <malloc+0x5a>
     d66:	82 17       	cp	r24, r18
     d68:	93 07       	cpc	r25, r19
     d6a:	18 f4       	brcc	.+6      	; 0xd72 <malloc+0x60>
     d6c:	9c 01       	movw	r18, r24
     d6e:	bd 01       	movw	r22, r26
     d70:	ef 01       	movw	r28, r30
     d72:	92 81       	ldd	r25, Z+2	; 0x02
     d74:	83 81       	ldd	r24, Z+3	; 0x03
     d76:	df 01       	movw	r26, r30
     d78:	e9 2f       	mov	r30, r25
     d7a:	f8 2f       	mov	r31, r24
     d7c:	30 97       	sbiw	r30, 0x00	; 0
     d7e:	d1 f6       	brne	.-76     	; 0xd34 <malloc+0x22>
     d80:	21 15       	cp	r18, r1
     d82:	31 05       	cpc	r19, r1
     d84:	f9 f0       	breq	.+62     	; 0xdc4 <malloc+0xb2>
     d86:	c9 01       	movw	r24, r18
     d88:	84 1b       	sub	r24, r20
     d8a:	95 0b       	sbc	r25, r21
     d8c:	84 30       	cpi	r24, 0x04	; 4
     d8e:	91 05       	cpc	r25, r1
     d90:	80 f4       	brcc	.+32     	; 0xdb2 <malloc+0xa0>
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	9b 81       	ldd	r25, Y+3	; 0x03
     d96:	61 15       	cp	r22, r1
     d98:	71 05       	cpc	r23, r1
     d9a:	21 f0       	breq	.+8      	; 0xda4 <malloc+0x92>
     d9c:	fb 01       	movw	r30, r22
     d9e:	93 83       	std	Z+3, r25	; 0x03
     da0:	82 83       	std	Z+2, r24	; 0x02
     da2:	04 c0       	rjmp	.+8      	; 0xdac <malloc+0x9a>
     da4:	90 93 89 05 	sts	0x0589, r25
     da8:	80 93 88 05 	sts	0x0588, r24
     dac:	fe 01       	movw	r30, r28
     dae:	32 96       	adiw	r30, 0x02	; 2
     db0:	42 c0       	rjmp	.+132    	; 0xe36 <malloc+0x124>
     db2:	fe 01       	movw	r30, r28
     db4:	e8 0f       	add	r30, r24
     db6:	f9 1f       	adc	r31, r25
     db8:	41 93       	st	Z+, r20
     dba:	51 93       	st	Z+, r21
     dbc:	02 97       	sbiw	r24, 0x02	; 2
     dbe:	99 83       	std	Y+1, r25	; 0x01
     dc0:	88 83       	st	Y, r24
     dc2:	39 c0       	rjmp	.+114    	; 0xe36 <malloc+0x124>
     dc4:	80 91 86 05 	lds	r24, 0x0586
     dc8:	90 91 87 05 	lds	r25, 0x0587
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	41 f4       	brne	.+16     	; 0xde0 <malloc+0xce>
     dd0:	80 91 cb 02 	lds	r24, 0x02CB
     dd4:	90 91 cc 02 	lds	r25, 0x02CC
     dd8:	90 93 87 05 	sts	0x0587, r25
     ddc:	80 93 86 05 	sts	0x0586, r24
     de0:	20 91 c9 02 	lds	r18, 0x02C9
     de4:	30 91 ca 02 	lds	r19, 0x02CA
     de8:	21 15       	cp	r18, r1
     dea:	31 05       	cpc	r19, r1
     dec:	41 f4       	brne	.+16     	; 0xdfe <malloc+0xec>
     dee:	2d b7       	in	r18, 0x3d	; 61
     df0:	3e b7       	in	r19, 0x3e	; 62
     df2:	80 91 cd 02 	lds	r24, 0x02CD
     df6:	90 91 ce 02 	lds	r25, 0x02CE
     dfa:	28 1b       	sub	r18, r24
     dfc:	39 0b       	sbc	r19, r25
     dfe:	e0 91 86 05 	lds	r30, 0x0586
     e02:	f0 91 87 05 	lds	r31, 0x0587
     e06:	e2 17       	cp	r30, r18
     e08:	f3 07       	cpc	r31, r19
     e0a:	98 f4       	brcc	.+38     	; 0xe32 <malloc+0x120>
     e0c:	2e 1b       	sub	r18, r30
     e0e:	3f 0b       	sbc	r19, r31
     e10:	24 17       	cp	r18, r20
     e12:	35 07       	cpc	r19, r21
     e14:	70 f0       	brcs	.+28     	; 0xe32 <malloc+0x120>
     e16:	ca 01       	movw	r24, r20
     e18:	02 96       	adiw	r24, 0x02	; 2
     e1a:	28 17       	cp	r18, r24
     e1c:	39 07       	cpc	r19, r25
     e1e:	48 f0       	brcs	.+18     	; 0xe32 <malloc+0x120>
     e20:	8e 0f       	add	r24, r30
     e22:	9f 1f       	adc	r25, r31
     e24:	90 93 87 05 	sts	0x0587, r25
     e28:	80 93 86 05 	sts	0x0586, r24
     e2c:	41 93       	st	Z+, r20
     e2e:	51 93       	st	Z+, r21
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <malloc+0x124>
     e32:	e0 e0       	ldi	r30, 0x00	; 0
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	cf 01       	movw	r24, r30
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	08 95       	ret

00000e3e <free>:
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	9c 01       	movw	r18, r24
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	09 f4       	brne	.+2      	; 0xe4e <free+0x10>
     e4c:	8c c0       	rjmp	.+280    	; 0xf66 <free+0x128>
     e4e:	dc 01       	movw	r26, r24
     e50:	12 97       	sbiw	r26, 0x02	; 2
     e52:	13 96       	adiw	r26, 0x03	; 3
     e54:	1c 92       	st	X, r1
     e56:	1e 92       	st	-X, r1
     e58:	12 97       	sbiw	r26, 0x02	; 2
     e5a:	60 91 88 05 	lds	r22, 0x0588
     e5e:	70 91 89 05 	lds	r23, 0x0589
     e62:	61 15       	cp	r22, r1
     e64:	71 05       	cpc	r23, r1
     e66:	89 f4       	brne	.+34     	; 0xe8a <free+0x4c>
     e68:	8d 91       	ld	r24, X+
     e6a:	9c 91       	ld	r25, X
     e6c:	11 97       	sbiw	r26, 0x01	; 1
     e6e:	82 0f       	add	r24, r18
     e70:	93 1f       	adc	r25, r19
     e72:	20 91 86 05 	lds	r18, 0x0586
     e76:	30 91 87 05 	lds	r19, 0x0587
     e7a:	28 17       	cp	r18, r24
     e7c:	39 07       	cpc	r19, r25
     e7e:	69 f5       	brne	.+90     	; 0xeda <free+0x9c>
     e80:	b0 93 87 05 	sts	0x0587, r27
     e84:	a0 93 86 05 	sts	0x0586, r26
     e88:	6e c0       	rjmp	.+220    	; 0xf66 <free+0x128>
     e8a:	fb 01       	movw	r30, r22
     e8c:	40 e0       	ldi	r20, 0x00	; 0
     e8e:	50 e0       	ldi	r21, 0x00	; 0
     e90:	01 c0       	rjmp	.+2      	; 0xe94 <free+0x56>
     e92:	fc 01       	movw	r30, r24
     e94:	ea 17       	cp	r30, r26
     e96:	fb 07       	cpc	r31, r27
     e98:	30 f4       	brcc	.+12     	; 0xea6 <free+0x68>
     e9a:	82 81       	ldd	r24, Z+2	; 0x02
     e9c:	93 81       	ldd	r25, Z+3	; 0x03
     e9e:	af 01       	movw	r20, r30
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	b9 f7       	brne	.-18     	; 0xe92 <free+0x54>
     ea4:	1f c0       	rjmp	.+62     	; 0xee4 <free+0xa6>
     ea6:	e9 01       	movw	r28, r18
     ea8:	22 97       	sbiw	r28, 0x02	; 2
     eaa:	fb 83       	std	Y+3, r31	; 0x03
     eac:	ea 83       	std	Y+2, r30	; 0x02
     eae:	08 81       	ld	r16, Y
     eb0:	19 81       	ldd	r17, Y+1	; 0x01
     eb2:	c9 01       	movw	r24, r18
     eb4:	80 0f       	add	r24, r16
     eb6:	91 1f       	adc	r25, r17
     eb8:	8e 17       	cp	r24, r30
     eba:	9f 07       	cpc	r25, r31
     ebc:	59 f4       	brne	.+22     	; 0xed4 <free+0x96>
     ebe:	80 81       	ld	r24, Z
     ec0:	91 81       	ldd	r25, Z+1	; 0x01
     ec2:	80 0f       	add	r24, r16
     ec4:	91 1f       	adc	r25, r17
     ec6:	02 96       	adiw	r24, 0x02	; 2
     ec8:	99 83       	std	Y+1, r25	; 0x01
     eca:	88 83       	st	Y, r24
     ecc:	82 81       	ldd	r24, Z+2	; 0x02
     ece:	93 81       	ldd	r25, Z+3	; 0x03
     ed0:	9b 83       	std	Y+3, r25	; 0x03
     ed2:	8a 83       	std	Y+2, r24	; 0x02
     ed4:	41 15       	cp	r20, r1
     ed6:	51 05       	cpc	r21, r1
     ed8:	29 f4       	brne	.+10     	; 0xee4 <free+0xa6>
     eda:	b0 93 89 05 	sts	0x0589, r27
     ede:	a0 93 88 05 	sts	0x0588, r26
     ee2:	41 c0       	rjmp	.+130    	; 0xf66 <free+0x128>
     ee4:	fa 01       	movw	r30, r20
     ee6:	b3 83       	std	Z+3, r27	; 0x03
     ee8:	a2 83       	std	Z+2, r26	; 0x02
     eea:	c1 91       	ld	r28, Z+
     eec:	d1 91       	ld	r29, Z+
     eee:	ec 0f       	add	r30, r28
     ef0:	fd 1f       	adc	r31, r29
     ef2:	ae 17       	cp	r26, r30
     ef4:	bf 07       	cpc	r27, r31
     ef6:	81 f4       	brne	.+32     	; 0xf18 <free+0xda>
     ef8:	f9 01       	movw	r30, r18
     efa:	92 91       	ld	r25, -Z
     efc:	82 91       	ld	r24, -Z
     efe:	8c 0f       	add	r24, r28
     f00:	9d 1f       	adc	r25, r29
     f02:	02 96       	adiw	r24, 0x02	; 2
     f04:	da 01       	movw	r26, r20
     f06:	11 96       	adiw	r26, 0x01	; 1
     f08:	9c 93       	st	X, r25
     f0a:	8e 93       	st	-X, r24
     f0c:	82 81       	ldd	r24, Z+2	; 0x02
     f0e:	93 81       	ldd	r25, Z+3	; 0x03
     f10:	13 96       	adiw	r26, 0x03	; 3
     f12:	9c 93       	st	X, r25
     f14:	8e 93       	st	-X, r24
     f16:	12 97       	sbiw	r26, 0x02	; 2
     f18:	e0 e0       	ldi	r30, 0x00	; 0
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <free+0xe4>
     f1e:	fb 01       	movw	r30, r22
     f20:	bc 01       	movw	r22, r24
     f22:	db 01       	movw	r26, r22
     f24:	12 96       	adiw	r26, 0x02	; 2
     f26:	8d 91       	ld	r24, X+
     f28:	9c 91       	ld	r25, X
     f2a:	13 97       	sbiw	r26, 0x03	; 3
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	b9 f7       	brne	.-18     	; 0xf1e <free+0xe0>
     f30:	cb 01       	movw	r24, r22
     f32:	02 96       	adiw	r24, 0x02	; 2
     f34:	2d 91       	ld	r18, X+
     f36:	3c 91       	ld	r19, X
     f38:	11 97       	sbiw	r26, 0x01	; 1
     f3a:	82 0f       	add	r24, r18
     f3c:	93 1f       	adc	r25, r19
     f3e:	20 91 86 05 	lds	r18, 0x0586
     f42:	30 91 87 05 	lds	r19, 0x0587
     f46:	28 17       	cp	r18, r24
     f48:	39 07       	cpc	r19, r25
     f4a:	69 f4       	brne	.+26     	; 0xf66 <free+0x128>
     f4c:	30 97       	sbiw	r30, 0x00	; 0
     f4e:	29 f4       	brne	.+10     	; 0xf5a <free+0x11c>
     f50:	10 92 89 05 	sts	0x0589, r1
     f54:	10 92 88 05 	sts	0x0588, r1
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <free+0x120>
     f5a:	13 82       	std	Z+3, r1	; 0x03
     f5c:	12 82       	std	Z+2, r1	; 0x02
     f5e:	70 93 87 05 	sts	0x0587, r23
     f62:	60 93 86 05 	sts	0x0586, r22
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	0f 91       	pop	r16
     f6e:	08 95       	ret

00000f70 <atoi>:
     f70:	fc 01       	movw	r30, r24
     f72:	88 27       	eor	r24, r24
     f74:	99 27       	eor	r25, r25
     f76:	e8 94       	clt
     f78:	21 91       	ld	r18, Z+
     f7a:	20 32       	cpi	r18, 0x20	; 32
     f7c:	e9 f3       	breq	.-6      	; 0xf78 <atoi+0x8>
     f7e:	29 30       	cpi	r18, 0x09	; 9
     f80:	10 f0       	brcs	.+4      	; 0xf86 <atoi+0x16>
     f82:	2e 30       	cpi	r18, 0x0E	; 14
     f84:	c8 f3       	brcs	.-14     	; 0xf78 <atoi+0x8>
     f86:	2b 32       	cpi	r18, 0x2B	; 43
     f88:	41 f0       	breq	.+16     	; 0xf9a <atoi+0x2a>
     f8a:	2d 32       	cpi	r18, 0x2D	; 45
     f8c:	39 f4       	brne	.+14     	; 0xf9c <atoi+0x2c>
     f8e:	68 94       	set
     f90:	04 c0       	rjmp	.+8      	; 0xf9a <atoi+0x2a>
     f92:	0e 94 12 08 	call	0x1024	; 0x1024 <__mulhi_const_10>
     f96:	82 0f       	add	r24, r18
     f98:	91 1d       	adc	r25, r1
     f9a:	21 91       	ld	r18, Z+
     f9c:	20 53       	subi	r18, 0x30	; 48
     f9e:	2a 30       	cpi	r18, 0x0A	; 10
     fa0:	c0 f3       	brcs	.-16     	; 0xf92 <atoi+0x22>
     fa2:	1e f4       	brtc	.+6      	; 0xfaa <atoi+0x3a>
     fa4:	90 95       	com	r25
     fa6:	81 95       	neg	r24
     fa8:	9f 4f       	sbci	r25, 0xFF	; 255
     faa:	08 95       	ret

00000fac <strtok>:
     fac:	45 ed       	ldi	r20, 0xD5	; 213
     fae:	52 e0       	ldi	r21, 0x02	; 2
     fb0:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <strtok_r>
     fb4:	08 95       	ret

00000fb6 <strcmp>:
     fb6:	fb 01       	movw	r30, r22
     fb8:	dc 01       	movw	r26, r24
     fba:	8d 91       	ld	r24, X+
     fbc:	01 90       	ld	r0, Z+
     fbe:	80 19       	sub	r24, r0
     fc0:	01 10       	cpse	r0, r1
     fc2:	d9 f3       	breq	.-10     	; 0xfba <strcmp+0x4>
     fc4:	99 0b       	sbc	r25, r25
     fc6:	08 95       	ret

00000fc8 <strcpy>:
     fc8:	fb 01       	movw	r30, r22
     fca:	dc 01       	movw	r26, r24
     fcc:	01 90       	ld	r0, Z+
     fce:	0d 92       	st	X+, r0
     fd0:	00 20       	and	r0, r0
     fd2:	e1 f7       	brne	.-8      	; 0xfcc <strcpy+0x4>
     fd4:	08 95       	ret

00000fd6 <strtok_r>:
     fd6:	fa 01       	movw	r30, r20
     fd8:	a1 91       	ld	r26, Z+
     fda:	b0 81       	ld	r27, Z
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	19 f4       	brne	.+6      	; 0xfe6 <strtok_r+0x10>
     fe0:	10 97       	sbiw	r26, 0x00	; 0
     fe2:	e1 f0       	breq	.+56     	; 0x101c <strtok_r+0x46>
     fe4:	cd 01       	movw	r24, r26
     fe6:	dc 01       	movw	r26, r24
     fe8:	cd 01       	movw	r24, r26
     fea:	0d 90       	ld	r0, X+
     fec:	00 20       	and	r0, r0
     fee:	11 f4       	brne	.+4      	; 0xff4 <strtok_r+0x1e>
     ff0:	c0 01       	movw	r24, r0
     ff2:	13 c0       	rjmp	.+38     	; 0x101a <strtok_r+0x44>
     ff4:	fb 01       	movw	r30, r22
     ff6:	21 91       	ld	r18, Z+
     ff8:	22 23       	and	r18, r18
     ffa:	19 f0       	breq	.+6      	; 0x1002 <strtok_r+0x2c>
     ffc:	20 15       	cp	r18, r0
     ffe:	d9 f7       	brne	.-10     	; 0xff6 <strtok_r+0x20>
    1000:	f3 cf       	rjmp	.-26     	; 0xfe8 <strtok_r+0x12>
    1002:	fb 01       	movw	r30, r22
    1004:	21 91       	ld	r18, Z+
    1006:	20 15       	cp	r18, r0
    1008:	19 f4       	brne	.+6      	; 0x1010 <strtok_r+0x3a>
    100a:	1e 92       	st	-X, r1
    100c:	11 96       	adiw	r26, 0x01	; 1
    100e:	06 c0       	rjmp	.+12     	; 0x101c <strtok_r+0x46>
    1010:	22 23       	and	r18, r18
    1012:	c1 f7       	brne	.-16     	; 0x1004 <strtok_r+0x2e>
    1014:	0d 90       	ld	r0, X+
    1016:	00 20       	and	r0, r0
    1018:	a1 f7       	brne	.-24     	; 0x1002 <strtok_r+0x2c>
    101a:	d0 01       	movw	r26, r0
    101c:	fa 01       	movw	r30, r20
    101e:	a1 93       	st	Z+, r26
    1020:	b0 83       	st	Z, r27
    1022:	08 95       	ret

00001024 <__mulhi_const_10>:
    1024:	7a e0       	ldi	r23, 0x0A	; 10
    1026:	97 9f       	mul	r25, r23
    1028:	90 2d       	mov	r25, r0
    102a:	87 9f       	mul	r24, r23
    102c:	80 2d       	mov	r24, r0
    102e:	91 0d       	add	r25, r1
    1030:	11 24       	eor	r1, r1
    1032:	08 95       	ret

00001034 <fgets>:
    1034:	cf 92       	push	r12
    1036:	df 92       	push	r13
    1038:	ef 92       	push	r14
    103a:	ff 92       	push	r15
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	8c 01       	movw	r16, r24
    1046:	6a 01       	movw	r12, r20
    1048:	fa 01       	movw	r30, r20
    104a:	83 81       	ldd	r24, Z+3	; 0x03
    104c:	80 ff       	sbrs	r24, 0
    104e:	1a c0       	rjmp	.+52     	; 0x1084 <fgets+0x50>
    1050:	16 16       	cp	r1, r22
    1052:	17 06       	cpc	r1, r23
    1054:	bc f4       	brge	.+46     	; 0x1084 <fgets+0x50>
    1056:	7b 01       	movw	r14, r22
    1058:	e8 01       	movw	r28, r16
    105a:	0e c0       	rjmp	.+28     	; 0x1078 <fgets+0x44>
    105c:	c6 01       	movw	r24, r12
    105e:	0e 94 07 0b 	call	0x160e	; 0x160e <fgetc>
    1062:	ff ef       	ldi	r31, 0xFF	; 255
    1064:	8f 3f       	cpi	r24, 0xFF	; 255
    1066:	9f 07       	cpc	r25, r31
    1068:	69 f0       	breq	.+26     	; 0x1084 <fgets+0x50>
    106a:	89 93       	st	Y+, r24
    106c:	08 94       	sec
    106e:	e1 08       	sbc	r14, r1
    1070:	f1 08       	sbc	r15, r1
    1072:	8a 30       	cpi	r24, 0x0A	; 10
    1074:	91 05       	cpc	r25, r1
    1076:	21 f0       	breq	.+8      	; 0x1080 <fgets+0x4c>
    1078:	21 e0       	ldi	r18, 0x01	; 1
    107a:	e2 16       	cp	r14, r18
    107c:	f1 04       	cpc	r15, r1
    107e:	71 f7       	brne	.-36     	; 0x105c <fgets+0x28>
    1080:	18 82       	st	Y, r1
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <fgets+0x54>
    1084:	00 e0       	ldi	r16, 0x00	; 0
    1086:	10 e0       	ldi	r17, 0x00	; 0
    1088:	c8 01       	movw	r24, r16
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	1f 91       	pop	r17
    1090:	0f 91       	pop	r16
    1092:	ff 90       	pop	r15
    1094:	ef 90       	pop	r14
    1096:	df 90       	pop	r13
    1098:	cf 90       	pop	r12
    109a:	08 95       	ret

0000109c <gets>:
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	8c 01       	movw	r16, r24
    10a6:	e0 91 8a 05 	lds	r30, 0x058A
    10aa:	f0 91 8b 05 	lds	r31, 0x058B
    10ae:	83 81       	ldd	r24, Z+3	; 0x03
    10b0:	80 ff       	sbrs	r24, 0
    10b2:	12 c0       	rjmp	.+36     	; 0x10d8 <gets+0x3c>
    10b4:	e8 01       	movw	r28, r16
    10b6:	80 91 8a 05 	lds	r24, 0x058A
    10ba:	90 91 8b 05 	lds	r25, 0x058B
    10be:	0e 94 07 0b 	call	0x160e	; 0x160e <fgetc>
    10c2:	2f ef       	ldi	r18, 0xFF	; 255
    10c4:	8f 3f       	cpi	r24, 0xFF	; 255
    10c6:	92 07       	cpc	r25, r18
    10c8:	39 f0       	breq	.+14     	; 0x10d8 <gets+0x3c>
    10ca:	89 93       	st	Y+, r24
    10cc:	8a 30       	cpi	r24, 0x0A	; 10
    10ce:	91 05       	cpc	r25, r1
    10d0:	91 f7       	brne	.-28     	; 0x10b6 <gets+0x1a>
    10d2:	21 97       	sbiw	r28, 0x01	; 1
    10d4:	18 82       	st	Y, r1
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <gets+0x40>
    10d8:	00 e0       	ldi	r16, 0x00	; 0
    10da:	10 e0       	ldi	r17, 0x00	; 0
    10dc:	c8 01       	movw	r24, r16
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	1f 91       	pop	r17
    10e4:	0f 91       	pop	r16
    10e6:	08 95       	ret

000010e8 <printf>:
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	fe 01       	movw	r30, r28
    10f2:	36 96       	adiw	r30, 0x06	; 6
    10f4:	61 91       	ld	r22, Z+
    10f6:	71 91       	ld	r23, Z+
    10f8:	80 91 8c 05 	lds	r24, 0x058C
    10fc:	90 91 8d 05 	lds	r25, 0x058D
    1100:	af 01       	movw	r20, r30
    1102:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <vfprintf>
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	08 95       	ret

0000110c <putchar>:
    110c:	60 91 8c 05 	lds	r22, 0x058C
    1110:	70 91 8d 05 	lds	r23, 0x058D
    1114:	0e 94 47 0b 	call	0x168e	; 0x168e <fputc>
    1118:	08 95       	ret

0000111a <puts>:
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	8c 01       	movw	r16, r24
    1124:	e0 91 8c 05 	lds	r30, 0x058C
    1128:	f0 91 8d 05 	lds	r31, 0x058D
    112c:	83 81       	ldd	r24, Z+3	; 0x03
    112e:	81 ff       	sbrs	r24, 1
    1130:	1a c0       	rjmp	.+52     	; 0x1166 <puts+0x4c>
    1132:	c0 e0       	ldi	r28, 0x00	; 0
    1134:	d0 e0       	ldi	r29, 0x00	; 0
    1136:	05 c0       	rjmp	.+10     	; 0x1142 <puts+0x28>
    1138:	19 95       	eicall
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	11 f0       	breq	.+4      	; 0x1142 <puts+0x28>
    113e:	cf ef       	ldi	r28, 0xFF	; 255
    1140:	df ef       	ldi	r29, 0xFF	; 255
    1142:	f8 01       	movw	r30, r16
    1144:	81 91       	ld	r24, Z+
    1146:	8f 01       	movw	r16, r30
    1148:	60 91 8c 05 	lds	r22, 0x058C
    114c:	70 91 8d 05 	lds	r23, 0x058D
    1150:	db 01       	movw	r26, r22
    1152:	18 96       	adiw	r26, 0x08	; 8
    1154:	ed 91       	ld	r30, X+
    1156:	fc 91       	ld	r31, X
    1158:	19 97       	sbiw	r26, 0x09	; 9
    115a:	88 23       	and	r24, r24
    115c:	69 f7       	brne	.-38     	; 0x1138 <puts+0x1e>
    115e:	8a e0       	ldi	r24, 0x0A	; 10
    1160:	19 95       	eicall
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	11 f0       	breq	.+4      	; 0x116a <puts+0x50>
    1166:	cf ef       	ldi	r28, 0xFF	; 255
    1168:	df ef       	ldi	r29, 0xFF	; 255
    116a:	ce 01       	movw	r24, r28
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	08 95       	ret

00001176 <sprintf>:
    1176:	0f 93       	push	r16
    1178:	1f 93       	push	r17
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	2e 97       	sbiw	r28, 0x0e	; 14
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	0e 89       	ldd	r16, Y+22	; 0x16
    1190:	1f 89       	ldd	r17, Y+23	; 0x17
    1192:	86 e0       	ldi	r24, 0x06	; 6
    1194:	8c 83       	std	Y+4, r24	; 0x04
    1196:	1a 83       	std	Y+2, r17	; 0x02
    1198:	09 83       	std	Y+1, r16	; 0x01
    119a:	8f ef       	ldi	r24, 0xFF	; 255
    119c:	9f e7       	ldi	r25, 0x7F	; 127
    119e:	9e 83       	std	Y+6, r25	; 0x06
    11a0:	8d 83       	std	Y+5, r24	; 0x05
    11a2:	ae 01       	movw	r20, r28
    11a4:	46 5e       	subi	r20, 0xE6	; 230
    11a6:	5f 4f       	sbci	r21, 0xFF	; 255
    11a8:	ce 01       	movw	r24, r28
    11aa:	01 96       	adiw	r24, 0x01	; 1
    11ac:	68 8d       	ldd	r22, Y+24	; 0x18
    11ae:	79 8d       	ldd	r23, Y+25	; 0x19
    11b0:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <vfprintf>
    11b4:	ef 81       	ldd	r30, Y+7	; 0x07
    11b6:	f8 85       	ldd	r31, Y+8	; 0x08
    11b8:	e0 0f       	add	r30, r16
    11ba:	f1 1f       	adc	r31, r17
    11bc:	10 82       	st	Z, r1
    11be:	2e 96       	adiw	r28, 0x0e	; 14
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	1f 91       	pop	r17
    11d0:	0f 91       	pop	r16
    11d2:	08 95       	ret

000011d4 <vfprintf>:
    11d4:	2f 92       	push	r2
    11d6:	3f 92       	push	r3
    11d8:	4f 92       	push	r4
    11da:	5f 92       	push	r5
    11dc:	6f 92       	push	r6
    11de:	7f 92       	push	r7
    11e0:	8f 92       	push	r8
    11e2:	9f 92       	push	r9
    11e4:	af 92       	push	r10
    11e6:	bf 92       	push	r11
    11e8:	cf 92       	push	r12
    11ea:	df 92       	push	r13
    11ec:	ef 92       	push	r14
    11ee:	ff 92       	push	r15
    11f0:	0f 93       	push	r16
    11f2:	1f 93       	push	r17
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	2d 97       	sbiw	r28, 0x0d	; 13
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	3c 01       	movw	r6, r24
    120a:	7d 87       	std	Y+13, r23	; 0x0d
    120c:	6c 87       	std	Y+12, r22	; 0x0c
    120e:	5a 01       	movw	r10, r20
    1210:	fc 01       	movw	r30, r24
    1212:	17 82       	std	Z+7, r1	; 0x07
    1214:	16 82       	std	Z+6, r1	; 0x06
    1216:	83 81       	ldd	r24, Z+3	; 0x03
    1218:	81 ff       	sbrs	r24, 1
    121a:	c8 c1       	rjmp	.+912    	; 0x15ac <vfprintf+0x3d8>
    121c:	2e 01       	movw	r4, r28
    121e:	08 94       	sec
    1220:	41 1c       	adc	r4, r1
    1222:	51 1c       	adc	r5, r1
    1224:	f3 01       	movw	r30, r6
    1226:	93 81       	ldd	r25, Z+3	; 0x03
    1228:	ec 85       	ldd	r30, Y+12	; 0x0c
    122a:	fd 85       	ldd	r31, Y+13	; 0x0d
    122c:	93 fd       	sbrc	r25, 3
    122e:	85 91       	lpm	r24, Z+
    1230:	93 ff       	sbrs	r25, 3
    1232:	81 91       	ld	r24, Z+
    1234:	fd 87       	std	Y+13, r31	; 0x0d
    1236:	ec 87       	std	Y+12, r30	; 0x0c
    1238:	88 23       	and	r24, r24
    123a:	09 f4       	brne	.+2      	; 0x123e <vfprintf+0x6a>
    123c:	b3 c1       	rjmp	.+870    	; 0x15a4 <vfprintf+0x3d0>
    123e:	85 32       	cpi	r24, 0x25	; 37
    1240:	41 f4       	brne	.+16     	; 0x1252 <vfprintf+0x7e>
    1242:	93 fd       	sbrc	r25, 3
    1244:	85 91       	lpm	r24, Z+
    1246:	93 ff       	sbrs	r25, 3
    1248:	81 91       	ld	r24, Z+
    124a:	fd 87       	std	Y+13, r31	; 0x0d
    124c:	ec 87       	std	Y+12, r30	; 0x0c
    124e:	85 32       	cpi	r24, 0x25	; 37
    1250:	29 f4       	brne	.+10     	; 0x125c <vfprintf+0x88>
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	b3 01       	movw	r22, r6
    1256:	0e 94 47 0b 	call	0x168e	; 0x168e <fputc>
    125a:	e4 cf       	rjmp	.-56     	; 0x1224 <vfprintf+0x50>
    125c:	ff 24       	eor	r15, r15
    125e:	ee 24       	eor	r14, r14
    1260:	10 e0       	ldi	r17, 0x00	; 0
    1262:	10 32       	cpi	r17, 0x20	; 32
    1264:	b0 f4       	brcc	.+44     	; 0x1292 <vfprintf+0xbe>
    1266:	8b 32       	cpi	r24, 0x2B	; 43
    1268:	69 f0       	breq	.+26     	; 0x1284 <vfprintf+0xb0>
    126a:	8c 32       	cpi	r24, 0x2C	; 44
    126c:	28 f4       	brcc	.+10     	; 0x1278 <vfprintf+0xa4>
    126e:	80 32       	cpi	r24, 0x20	; 32
    1270:	51 f0       	breq	.+20     	; 0x1286 <vfprintf+0xb2>
    1272:	83 32       	cpi	r24, 0x23	; 35
    1274:	71 f4       	brne	.+28     	; 0x1292 <vfprintf+0xbe>
    1276:	0b c0       	rjmp	.+22     	; 0x128e <vfprintf+0xba>
    1278:	8d 32       	cpi	r24, 0x2D	; 45
    127a:	39 f0       	breq	.+14     	; 0x128a <vfprintf+0xb6>
    127c:	80 33       	cpi	r24, 0x30	; 48
    127e:	49 f4       	brne	.+18     	; 0x1292 <vfprintf+0xbe>
    1280:	11 60       	ori	r17, 0x01	; 1
    1282:	2c c0       	rjmp	.+88     	; 0x12dc <vfprintf+0x108>
    1284:	12 60       	ori	r17, 0x02	; 2
    1286:	14 60       	ori	r17, 0x04	; 4
    1288:	29 c0       	rjmp	.+82     	; 0x12dc <vfprintf+0x108>
    128a:	18 60       	ori	r17, 0x08	; 8
    128c:	27 c0       	rjmp	.+78     	; 0x12dc <vfprintf+0x108>
    128e:	10 61       	ori	r17, 0x10	; 16
    1290:	25 c0       	rjmp	.+74     	; 0x12dc <vfprintf+0x108>
    1292:	17 fd       	sbrc	r17, 7
    1294:	2e c0       	rjmp	.+92     	; 0x12f2 <vfprintf+0x11e>
    1296:	28 2f       	mov	r18, r24
    1298:	20 53       	subi	r18, 0x30	; 48
    129a:	2a 30       	cpi	r18, 0x0A	; 10
    129c:	98 f4       	brcc	.+38     	; 0x12c4 <vfprintf+0xf0>
    129e:	16 ff       	sbrs	r17, 6
    12a0:	08 c0       	rjmp	.+16     	; 0x12b2 <vfprintf+0xde>
    12a2:	8f 2d       	mov	r24, r15
    12a4:	88 0f       	add	r24, r24
    12a6:	f8 2e       	mov	r15, r24
    12a8:	ff 0c       	add	r15, r15
    12aa:	ff 0c       	add	r15, r15
    12ac:	f8 0e       	add	r15, r24
    12ae:	f2 0e       	add	r15, r18
    12b0:	15 c0       	rjmp	.+42     	; 0x12dc <vfprintf+0x108>
    12b2:	8e 2d       	mov	r24, r14
    12b4:	88 0f       	add	r24, r24
    12b6:	e8 2e       	mov	r14, r24
    12b8:	ee 0c       	add	r14, r14
    12ba:	ee 0c       	add	r14, r14
    12bc:	e8 0e       	add	r14, r24
    12be:	e2 0e       	add	r14, r18
    12c0:	10 62       	ori	r17, 0x20	; 32
    12c2:	0c c0       	rjmp	.+24     	; 0x12dc <vfprintf+0x108>
    12c4:	8e 32       	cpi	r24, 0x2E	; 46
    12c6:	21 f4       	brne	.+8      	; 0x12d0 <vfprintf+0xfc>
    12c8:	16 fd       	sbrc	r17, 6
    12ca:	6c c1       	rjmp	.+728    	; 0x15a4 <vfprintf+0x3d0>
    12cc:	10 64       	ori	r17, 0x40	; 64
    12ce:	06 c0       	rjmp	.+12     	; 0x12dc <vfprintf+0x108>
    12d0:	8c 36       	cpi	r24, 0x6C	; 108
    12d2:	11 f4       	brne	.+4      	; 0x12d8 <vfprintf+0x104>
    12d4:	10 68       	ori	r17, 0x80	; 128
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <vfprintf+0x108>
    12d8:	88 36       	cpi	r24, 0x68	; 104
    12da:	59 f4       	brne	.+22     	; 0x12f2 <vfprintf+0x11e>
    12dc:	ec 85       	ldd	r30, Y+12	; 0x0c
    12de:	fd 85       	ldd	r31, Y+13	; 0x0d
    12e0:	93 fd       	sbrc	r25, 3
    12e2:	85 91       	lpm	r24, Z+
    12e4:	93 ff       	sbrs	r25, 3
    12e6:	81 91       	ld	r24, Z+
    12e8:	fd 87       	std	Y+13, r31	; 0x0d
    12ea:	ec 87       	std	Y+12, r30	; 0x0c
    12ec:	88 23       	and	r24, r24
    12ee:	09 f0       	breq	.+2      	; 0x12f2 <vfprintf+0x11e>
    12f0:	b8 cf       	rjmp	.-144    	; 0x1262 <vfprintf+0x8e>
    12f2:	98 2f       	mov	r25, r24
    12f4:	95 54       	subi	r25, 0x45	; 69
    12f6:	93 30       	cpi	r25, 0x03	; 3
    12f8:	18 f0       	brcs	.+6      	; 0x1300 <vfprintf+0x12c>
    12fa:	90 52       	subi	r25, 0x20	; 32
    12fc:	93 30       	cpi	r25, 0x03	; 3
    12fe:	38 f4       	brcc	.+14     	; 0x130e <vfprintf+0x13a>
    1300:	24 e0       	ldi	r18, 0x04	; 4
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	a2 0e       	add	r10, r18
    1306:	b3 1e       	adc	r11, r19
    1308:	3f e3       	ldi	r19, 0x3F	; 63
    130a:	39 83       	std	Y+1, r19	; 0x01
    130c:	0f c0       	rjmp	.+30     	; 0x132c <vfprintf+0x158>
    130e:	83 36       	cpi	r24, 0x63	; 99
    1310:	31 f0       	breq	.+12     	; 0x131e <vfprintf+0x14a>
    1312:	83 37       	cpi	r24, 0x73	; 115
    1314:	81 f0       	breq	.+32     	; 0x1336 <vfprintf+0x162>
    1316:	83 35       	cpi	r24, 0x53	; 83
    1318:	09 f0       	breq	.+2      	; 0x131c <vfprintf+0x148>
    131a:	5a c0       	rjmp	.+180    	; 0x13d0 <vfprintf+0x1fc>
    131c:	22 c0       	rjmp	.+68     	; 0x1362 <vfprintf+0x18e>
    131e:	f5 01       	movw	r30, r10
    1320:	80 81       	ld	r24, Z
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	22 e0       	ldi	r18, 0x02	; 2
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	a2 0e       	add	r10, r18
    132a:	b3 1e       	adc	r11, r19
    132c:	21 e0       	ldi	r18, 0x01	; 1
    132e:	c2 2e       	mov	r12, r18
    1330:	d1 2c       	mov	r13, r1
    1332:	42 01       	movw	r8, r4
    1334:	14 c0       	rjmp	.+40     	; 0x135e <vfprintf+0x18a>
    1336:	92 e0       	ldi	r25, 0x02	; 2
    1338:	29 2e       	mov	r2, r25
    133a:	31 2c       	mov	r3, r1
    133c:	2a 0c       	add	r2, r10
    133e:	3b 1c       	adc	r3, r11
    1340:	f5 01       	movw	r30, r10
    1342:	80 80       	ld	r8, Z
    1344:	91 80       	ldd	r9, Z+1	; 0x01
    1346:	16 ff       	sbrs	r17, 6
    1348:	03 c0       	rjmp	.+6      	; 0x1350 <vfprintf+0x17c>
    134a:	6f 2d       	mov	r22, r15
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <vfprintf+0x180>
    1350:	6f ef       	ldi	r22, 0xFF	; 255
    1352:	7f ef       	ldi	r23, 0xFF	; 255
    1354:	c4 01       	movw	r24, r8
    1356:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <strnlen>
    135a:	6c 01       	movw	r12, r24
    135c:	51 01       	movw	r10, r2
    135e:	1f 77       	andi	r17, 0x7F	; 127
    1360:	15 c0       	rjmp	.+42     	; 0x138c <vfprintf+0x1b8>
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	28 2e       	mov	r2, r24
    1366:	31 2c       	mov	r3, r1
    1368:	2a 0c       	add	r2, r10
    136a:	3b 1c       	adc	r3, r11
    136c:	f5 01       	movw	r30, r10
    136e:	80 80       	ld	r8, Z
    1370:	91 80       	ldd	r9, Z+1	; 0x01
    1372:	16 ff       	sbrs	r17, 6
    1374:	03 c0       	rjmp	.+6      	; 0x137c <vfprintf+0x1a8>
    1376:	6f 2d       	mov	r22, r15
    1378:	70 e0       	ldi	r23, 0x00	; 0
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <vfprintf+0x1ac>
    137c:	6f ef       	ldi	r22, 0xFF	; 255
    137e:	7f ef       	ldi	r23, 0xFF	; 255
    1380:	c4 01       	movw	r24, r8
    1382:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <strnlen_P>
    1386:	6c 01       	movw	r12, r24
    1388:	10 68       	ori	r17, 0x80	; 128
    138a:	51 01       	movw	r10, r2
    138c:	13 fd       	sbrc	r17, 3
    138e:	1c c0       	rjmp	.+56     	; 0x13c8 <vfprintf+0x1f4>
    1390:	06 c0       	rjmp	.+12     	; 0x139e <vfprintf+0x1ca>
    1392:	80 e2       	ldi	r24, 0x20	; 32
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	b3 01       	movw	r22, r6
    1398:	0e 94 47 0b 	call	0x168e	; 0x168e <fputc>
    139c:	ea 94       	dec	r14
    139e:	8e 2d       	mov	r24, r14
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	c8 16       	cp	r12, r24
    13a4:	d9 06       	cpc	r13, r25
    13a6:	a8 f3       	brcs	.-22     	; 0x1392 <vfprintf+0x1be>
    13a8:	0f c0       	rjmp	.+30     	; 0x13c8 <vfprintf+0x1f4>
    13aa:	f4 01       	movw	r30, r8
    13ac:	17 fd       	sbrc	r17, 7
    13ae:	85 91       	lpm	r24, Z+
    13b0:	17 ff       	sbrs	r17, 7
    13b2:	81 91       	ld	r24, Z+
    13b4:	4f 01       	movw	r8, r30
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	b3 01       	movw	r22, r6
    13ba:	0e 94 47 0b 	call	0x168e	; 0x168e <fputc>
    13be:	e1 10       	cpse	r14, r1
    13c0:	ea 94       	dec	r14
    13c2:	08 94       	sec
    13c4:	c1 08       	sbc	r12, r1
    13c6:	d1 08       	sbc	r13, r1
    13c8:	c1 14       	cp	r12, r1
    13ca:	d1 04       	cpc	r13, r1
    13cc:	71 f7       	brne	.-36     	; 0x13aa <vfprintf+0x1d6>
    13ce:	e7 c0       	rjmp	.+462    	; 0x159e <vfprintf+0x3ca>
    13d0:	84 36       	cpi	r24, 0x64	; 100
    13d2:	11 f0       	breq	.+4      	; 0x13d8 <vfprintf+0x204>
    13d4:	89 36       	cpi	r24, 0x69	; 105
    13d6:	51 f5       	brne	.+84     	; 0x142c <vfprintf+0x258>
    13d8:	f5 01       	movw	r30, r10
    13da:	17 ff       	sbrs	r17, 7
    13dc:	07 c0       	rjmp	.+14     	; 0x13ec <vfprintf+0x218>
    13de:	80 81       	ld	r24, Z
    13e0:	91 81       	ldd	r25, Z+1	; 0x01
    13e2:	a2 81       	ldd	r26, Z+2	; 0x02
    13e4:	b3 81       	ldd	r27, Z+3	; 0x03
    13e6:	24 e0       	ldi	r18, 0x04	; 4
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	08 c0       	rjmp	.+16     	; 0x13fc <vfprintf+0x228>
    13ec:	80 81       	ld	r24, Z
    13ee:	91 81       	ldd	r25, Z+1	; 0x01
    13f0:	aa 27       	eor	r26, r26
    13f2:	97 fd       	sbrc	r25, 7
    13f4:	a0 95       	com	r26
    13f6:	ba 2f       	mov	r27, r26
    13f8:	22 e0       	ldi	r18, 0x02	; 2
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	a2 0e       	add	r10, r18
    13fe:	b3 1e       	adc	r11, r19
    1400:	01 2f       	mov	r16, r17
    1402:	0f 76       	andi	r16, 0x6F	; 111
    1404:	b7 ff       	sbrs	r27, 7
    1406:	08 c0       	rjmp	.+16     	; 0x1418 <vfprintf+0x244>
    1408:	b0 95       	com	r27
    140a:	a0 95       	com	r26
    140c:	90 95       	com	r25
    140e:	81 95       	neg	r24
    1410:	9f 4f       	sbci	r25, 0xFF	; 255
    1412:	af 4f       	sbci	r26, 0xFF	; 255
    1414:	bf 4f       	sbci	r27, 0xFF	; 255
    1416:	00 68       	ori	r16, 0x80	; 128
    1418:	bc 01       	movw	r22, r24
    141a:	cd 01       	movw	r24, r26
    141c:	a2 01       	movw	r20, r4
    141e:	2a e0       	ldi	r18, 0x0A	; 10
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__ultoa_invert>
    1426:	d8 2e       	mov	r13, r24
    1428:	d4 18       	sub	r13, r4
    142a:	3f c0       	rjmp	.+126    	; 0x14aa <vfprintf+0x2d6>
    142c:	85 37       	cpi	r24, 0x75	; 117
    142e:	21 f4       	brne	.+8      	; 0x1438 <vfprintf+0x264>
    1430:	1f 7e       	andi	r17, 0xEF	; 239
    1432:	2a e0       	ldi	r18, 0x0A	; 10
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	20 c0       	rjmp	.+64     	; 0x1478 <vfprintf+0x2a4>
    1438:	19 7f       	andi	r17, 0xF9	; 249
    143a:	8f 36       	cpi	r24, 0x6F	; 111
    143c:	a9 f0       	breq	.+42     	; 0x1468 <vfprintf+0x294>
    143e:	80 37       	cpi	r24, 0x70	; 112
    1440:	20 f4       	brcc	.+8      	; 0x144a <vfprintf+0x276>
    1442:	88 35       	cpi	r24, 0x58	; 88
    1444:	09 f0       	breq	.+2      	; 0x1448 <vfprintf+0x274>
    1446:	ae c0       	rjmp	.+348    	; 0x15a4 <vfprintf+0x3d0>
    1448:	0b c0       	rjmp	.+22     	; 0x1460 <vfprintf+0x28c>
    144a:	80 37       	cpi	r24, 0x70	; 112
    144c:	21 f0       	breq	.+8      	; 0x1456 <vfprintf+0x282>
    144e:	88 37       	cpi	r24, 0x78	; 120
    1450:	09 f0       	breq	.+2      	; 0x1454 <vfprintf+0x280>
    1452:	a8 c0       	rjmp	.+336    	; 0x15a4 <vfprintf+0x3d0>
    1454:	01 c0       	rjmp	.+2      	; 0x1458 <vfprintf+0x284>
    1456:	10 61       	ori	r17, 0x10	; 16
    1458:	14 ff       	sbrs	r17, 4
    145a:	09 c0       	rjmp	.+18     	; 0x146e <vfprintf+0x29a>
    145c:	14 60       	ori	r17, 0x04	; 4
    145e:	07 c0       	rjmp	.+14     	; 0x146e <vfprintf+0x29a>
    1460:	14 ff       	sbrs	r17, 4
    1462:	08 c0       	rjmp	.+16     	; 0x1474 <vfprintf+0x2a0>
    1464:	16 60       	ori	r17, 0x06	; 6
    1466:	06 c0       	rjmp	.+12     	; 0x1474 <vfprintf+0x2a0>
    1468:	28 e0       	ldi	r18, 0x08	; 8
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	05 c0       	rjmp	.+10     	; 0x1478 <vfprintf+0x2a4>
    146e:	20 e1       	ldi	r18, 0x10	; 16
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <vfprintf+0x2a4>
    1474:	20 e1       	ldi	r18, 0x10	; 16
    1476:	32 e0       	ldi	r19, 0x02	; 2
    1478:	f5 01       	movw	r30, r10
    147a:	17 ff       	sbrs	r17, 7
    147c:	07 c0       	rjmp	.+14     	; 0x148c <vfprintf+0x2b8>
    147e:	60 81       	ld	r22, Z
    1480:	71 81       	ldd	r23, Z+1	; 0x01
    1482:	82 81       	ldd	r24, Z+2	; 0x02
    1484:	93 81       	ldd	r25, Z+3	; 0x03
    1486:	44 e0       	ldi	r20, 0x04	; 4
    1488:	50 e0       	ldi	r21, 0x00	; 0
    148a:	06 c0       	rjmp	.+12     	; 0x1498 <vfprintf+0x2c4>
    148c:	60 81       	ld	r22, Z
    148e:	71 81       	ldd	r23, Z+1	; 0x01
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	42 e0       	ldi	r20, 0x02	; 2
    1496:	50 e0       	ldi	r21, 0x00	; 0
    1498:	a4 0e       	add	r10, r20
    149a:	b5 1e       	adc	r11, r21
    149c:	a2 01       	movw	r20, r4
    149e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__ultoa_invert>
    14a2:	d8 2e       	mov	r13, r24
    14a4:	d4 18       	sub	r13, r4
    14a6:	01 2f       	mov	r16, r17
    14a8:	0f 77       	andi	r16, 0x7F	; 127
    14aa:	06 ff       	sbrs	r16, 6
    14ac:	09 c0       	rjmp	.+18     	; 0x14c0 <vfprintf+0x2ec>
    14ae:	0e 7f       	andi	r16, 0xFE	; 254
    14b0:	df 14       	cp	r13, r15
    14b2:	30 f4       	brcc	.+12     	; 0x14c0 <vfprintf+0x2ec>
    14b4:	04 ff       	sbrs	r16, 4
    14b6:	06 c0       	rjmp	.+12     	; 0x14c4 <vfprintf+0x2f0>
    14b8:	02 fd       	sbrc	r16, 2
    14ba:	04 c0       	rjmp	.+8      	; 0x14c4 <vfprintf+0x2f0>
    14bc:	0f 7e       	andi	r16, 0xEF	; 239
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <vfprintf+0x2f0>
    14c0:	1d 2d       	mov	r17, r13
    14c2:	01 c0       	rjmp	.+2      	; 0x14c6 <vfprintf+0x2f2>
    14c4:	1f 2d       	mov	r17, r15
    14c6:	80 2f       	mov	r24, r16
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	04 ff       	sbrs	r16, 4
    14cc:	0c c0       	rjmp	.+24     	; 0x14e6 <vfprintf+0x312>
    14ce:	fe 01       	movw	r30, r28
    14d0:	ed 0d       	add	r30, r13
    14d2:	f1 1d       	adc	r31, r1
    14d4:	20 81       	ld	r18, Z
    14d6:	20 33       	cpi	r18, 0x30	; 48
    14d8:	11 f4       	brne	.+4      	; 0x14de <vfprintf+0x30a>
    14da:	09 7e       	andi	r16, 0xE9	; 233
    14dc:	09 c0       	rjmp	.+18     	; 0x14f0 <vfprintf+0x31c>
    14de:	02 ff       	sbrs	r16, 2
    14e0:	06 c0       	rjmp	.+12     	; 0x14ee <vfprintf+0x31a>
    14e2:	1e 5f       	subi	r17, 0xFE	; 254
    14e4:	05 c0       	rjmp	.+10     	; 0x14f0 <vfprintf+0x31c>
    14e6:	86 78       	andi	r24, 0x86	; 134
    14e8:	90 70       	andi	r25, 0x00	; 0
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	09 f0       	breq	.+2      	; 0x14f0 <vfprintf+0x31c>
    14ee:	1f 5f       	subi	r17, 0xFF	; 255
    14f0:	80 2e       	mov	r8, r16
    14f2:	99 24       	eor	r9, r9
    14f4:	03 fd       	sbrc	r16, 3
    14f6:	12 c0       	rjmp	.+36     	; 0x151c <vfprintf+0x348>
    14f8:	00 ff       	sbrs	r16, 0
    14fa:	0d c0       	rjmp	.+26     	; 0x1516 <vfprintf+0x342>
    14fc:	fd 2c       	mov	r15, r13
    14fe:	1e 15       	cp	r17, r14
    1500:	50 f4       	brcc	.+20     	; 0x1516 <vfprintf+0x342>
    1502:	fe 0c       	add	r15, r14
    1504:	f1 1a       	sub	r15, r17
    1506:	1e 2d       	mov	r17, r14
    1508:	06 c0       	rjmp	.+12     	; 0x1516 <vfprintf+0x342>
    150a:	80 e2       	ldi	r24, 0x20	; 32
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	b3 01       	movw	r22, r6
    1510:	0e 94 47 0b 	call	0x168e	; 0x168e <fputc>
    1514:	1f 5f       	subi	r17, 0xFF	; 255
    1516:	1e 15       	cp	r17, r14
    1518:	c0 f3       	brcs	.-16     	; 0x150a <vfprintf+0x336>
    151a:	04 c0       	rjmp	.+8      	; 0x1524 <vfprintf+0x350>
    151c:	1e 15       	cp	r17, r14
    151e:	10 f4       	brcc	.+4      	; 0x1524 <vfprintf+0x350>
    1520:	e1 1a       	sub	r14, r17
    1522:	01 c0       	rjmp	.+2      	; 0x1526 <vfprintf+0x352>
    1524:	ee 24       	eor	r14, r14
    1526:	84 fe       	sbrs	r8, 4
    1528:	0f c0       	rjmp	.+30     	; 0x1548 <vfprintf+0x374>
    152a:	80 e3       	ldi	r24, 0x30	; 48
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	b3 01       	movw	r22, r6
    1530:	0e 94 47 0b 	call	0x168e	; 0x168e <fputc>
    1534:	82 fe       	sbrs	r8, 2
    1536:	1f c0       	rjmp	.+62     	; 0x1576 <vfprintf+0x3a2>
    1538:	81 fe       	sbrs	r8, 1
    153a:	03 c0       	rjmp	.+6      	; 0x1542 <vfprintf+0x36e>
    153c:	88 e5       	ldi	r24, 0x58	; 88
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	10 c0       	rjmp	.+32     	; 0x1562 <vfprintf+0x38e>
    1542:	88 e7       	ldi	r24, 0x78	; 120
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	0d c0       	rjmp	.+26     	; 0x1562 <vfprintf+0x38e>
    1548:	c4 01       	movw	r24, r8
    154a:	86 78       	andi	r24, 0x86	; 134
    154c:	90 70       	andi	r25, 0x00	; 0
    154e:	00 97       	sbiw	r24, 0x00	; 0
    1550:	91 f0       	breq	.+36     	; 0x1576 <vfprintf+0x3a2>
    1552:	81 fc       	sbrc	r8, 1
    1554:	02 c0       	rjmp	.+4      	; 0x155a <vfprintf+0x386>
    1556:	80 e2       	ldi	r24, 0x20	; 32
    1558:	01 c0       	rjmp	.+2      	; 0x155c <vfprintf+0x388>
    155a:	8b e2       	ldi	r24, 0x2B	; 43
    155c:	07 fd       	sbrc	r16, 7
    155e:	8d e2       	ldi	r24, 0x2D	; 45
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	b3 01       	movw	r22, r6
    1564:	0e 94 47 0b 	call	0x168e	; 0x168e <fputc>
    1568:	06 c0       	rjmp	.+12     	; 0x1576 <vfprintf+0x3a2>
    156a:	80 e3       	ldi	r24, 0x30	; 48
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	b3 01       	movw	r22, r6
    1570:	0e 94 47 0b 	call	0x168e	; 0x168e <fputc>
    1574:	fa 94       	dec	r15
    1576:	df 14       	cp	r13, r15
    1578:	c0 f3       	brcs	.-16     	; 0x156a <vfprintf+0x396>
    157a:	da 94       	dec	r13
    157c:	f2 01       	movw	r30, r4
    157e:	ed 0d       	add	r30, r13
    1580:	f1 1d       	adc	r31, r1
    1582:	80 81       	ld	r24, Z
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	b3 01       	movw	r22, r6
    1588:	0e 94 47 0b 	call	0x168e	; 0x168e <fputc>
    158c:	dd 20       	and	r13, r13
    158e:	a9 f7       	brne	.-22     	; 0x157a <vfprintf+0x3a6>
    1590:	06 c0       	rjmp	.+12     	; 0x159e <vfprintf+0x3ca>
    1592:	80 e2       	ldi	r24, 0x20	; 32
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	b3 01       	movw	r22, r6
    1598:	0e 94 47 0b 	call	0x168e	; 0x168e <fputc>
    159c:	ea 94       	dec	r14
    159e:	ee 20       	and	r14, r14
    15a0:	c1 f7       	brne	.-16     	; 0x1592 <vfprintf+0x3be>
    15a2:	40 ce       	rjmp	.-896    	; 0x1224 <vfprintf+0x50>
    15a4:	f3 01       	movw	r30, r6
    15a6:	86 81       	ldd	r24, Z+6	; 0x06
    15a8:	97 81       	ldd	r25, Z+7	; 0x07
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <vfprintf+0x3dc>
    15ac:	8f ef       	ldi	r24, 0xFF	; 255
    15ae:	9f ef       	ldi	r25, 0xFF	; 255
    15b0:	2d 96       	adiw	r28, 0x0d	; 13
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	cd bf       	out	0x3d, r28	; 61
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	1f 91       	pop	r17
    15c2:	0f 91       	pop	r16
    15c4:	ff 90       	pop	r15
    15c6:	ef 90       	pop	r14
    15c8:	df 90       	pop	r13
    15ca:	cf 90       	pop	r12
    15cc:	bf 90       	pop	r11
    15ce:	af 90       	pop	r10
    15d0:	9f 90       	pop	r9
    15d2:	8f 90       	pop	r8
    15d4:	7f 90       	pop	r7
    15d6:	6f 90       	pop	r6
    15d8:	5f 90       	pop	r5
    15da:	4f 90       	pop	r4
    15dc:	3f 90       	pop	r3
    15de:	2f 90       	pop	r2
    15e0:	08 95       	ret

000015e2 <strnlen_P>:
    15e2:	fc 01       	movw	r30, r24
    15e4:	05 90       	lpm	r0, Z+
    15e6:	61 50       	subi	r22, 0x01	; 1
    15e8:	70 40       	sbci	r23, 0x00	; 0
    15ea:	01 10       	cpse	r0, r1
    15ec:	d8 f7       	brcc	.-10     	; 0x15e4 <strnlen_P+0x2>
    15ee:	80 95       	com	r24
    15f0:	90 95       	com	r25
    15f2:	8e 0f       	add	r24, r30
    15f4:	9f 1f       	adc	r25, r31
    15f6:	08 95       	ret

000015f8 <strnlen>:
    15f8:	fc 01       	movw	r30, r24
    15fa:	61 50       	subi	r22, 0x01	; 1
    15fc:	70 40       	sbci	r23, 0x00	; 0
    15fe:	01 90       	ld	r0, Z+
    1600:	01 10       	cpse	r0, r1
    1602:	d8 f7       	brcc	.-10     	; 0x15fa <strnlen+0x2>
    1604:	80 95       	com	r24
    1606:	90 95       	com	r25
    1608:	8e 0f       	add	r24, r30
    160a:	9f 1f       	adc	r25, r31
    160c:	08 95       	ret

0000160e <fgetc>:
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	ec 01       	movw	r28, r24
    1614:	2b 81       	ldd	r18, Y+3	; 0x03
    1616:	20 ff       	sbrs	r18, 0
    1618:	35 c0       	rjmp	.+106    	; 0x1684 <fgetc+0x76>
    161a:	26 ff       	sbrs	r18, 6
    161c:	09 c0       	rjmp	.+18     	; 0x1630 <fgetc+0x22>
    161e:	2f 7b       	andi	r18, 0xBF	; 191
    1620:	2b 83       	std	Y+3, r18	; 0x03
    1622:	8e 81       	ldd	r24, Y+6	; 0x06
    1624:	9f 81       	ldd	r25, Y+7	; 0x07
    1626:	01 96       	adiw	r24, 0x01	; 1
    1628:	9f 83       	std	Y+7, r25	; 0x07
    162a:	8e 83       	std	Y+6, r24	; 0x06
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	28 c0       	rjmp	.+80     	; 0x1680 <fgetc+0x72>
    1630:	22 ff       	sbrs	r18, 2
    1632:	0f c0       	rjmp	.+30     	; 0x1652 <fgetc+0x44>
    1634:	e8 81       	ld	r30, Y
    1636:	f9 81       	ldd	r31, Y+1	; 0x01
    1638:	80 81       	ld	r24, Z
    163a:	99 27       	eor	r25, r25
    163c:	87 fd       	sbrc	r24, 7
    163e:	90 95       	com	r25
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	19 f4       	brne	.+6      	; 0x164a <fgetc+0x3c>
    1644:	20 62       	ori	r18, 0x20	; 32
    1646:	2b 83       	std	Y+3, r18	; 0x03
    1648:	1d c0       	rjmp	.+58     	; 0x1684 <fgetc+0x76>
    164a:	31 96       	adiw	r30, 0x01	; 1
    164c:	f9 83       	std	Y+1, r31	; 0x01
    164e:	e8 83       	st	Y, r30
    1650:	11 c0       	rjmp	.+34     	; 0x1674 <fgetc+0x66>
    1652:	ea 85       	ldd	r30, Y+10	; 0x0a
    1654:	fb 85       	ldd	r31, Y+11	; 0x0b
    1656:	ce 01       	movw	r24, r28
    1658:	19 95       	eicall
    165a:	97 ff       	sbrs	r25, 7
    165c:	0b c0       	rjmp	.+22     	; 0x1674 <fgetc+0x66>
    165e:	2b 81       	ldd	r18, Y+3	; 0x03
    1660:	3f ef       	ldi	r19, 0xFF	; 255
    1662:	8f 3f       	cpi	r24, 0xFF	; 255
    1664:	93 07       	cpc	r25, r19
    1666:	11 f4       	brne	.+4      	; 0x166c <fgetc+0x5e>
    1668:	80 e1       	ldi	r24, 0x10	; 16
    166a:	01 c0       	rjmp	.+2      	; 0x166e <fgetc+0x60>
    166c:	80 e2       	ldi	r24, 0x20	; 32
    166e:	82 2b       	or	r24, r18
    1670:	8b 83       	std	Y+3, r24	; 0x03
    1672:	08 c0       	rjmp	.+16     	; 0x1684 <fgetc+0x76>
    1674:	2e 81       	ldd	r18, Y+6	; 0x06
    1676:	3f 81       	ldd	r19, Y+7	; 0x07
    1678:	2f 5f       	subi	r18, 0xFF	; 255
    167a:	3f 4f       	sbci	r19, 0xFF	; 255
    167c:	3f 83       	std	Y+7, r19	; 0x07
    167e:	2e 83       	std	Y+6, r18	; 0x06
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <fgetc+0x7a>
    1684:	8f ef       	ldi	r24, 0xFF	; 255
    1686:	9f ef       	ldi	r25, 0xFF	; 255
    1688:	df 91       	pop	r29
    168a:	cf 91       	pop	r28
    168c:	08 95       	ret

0000168e <fputc>:
    168e:	0f 93       	push	r16
    1690:	1f 93       	push	r17
    1692:	cf 93       	push	r28
    1694:	df 93       	push	r29
    1696:	8c 01       	movw	r16, r24
    1698:	eb 01       	movw	r28, r22
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	81 ff       	sbrs	r24, 1
    169e:	1b c0       	rjmp	.+54     	; 0x16d6 <fputc+0x48>
    16a0:	82 ff       	sbrs	r24, 2
    16a2:	0d c0       	rjmp	.+26     	; 0x16be <fputc+0x30>
    16a4:	2e 81       	ldd	r18, Y+6	; 0x06
    16a6:	3f 81       	ldd	r19, Y+7	; 0x07
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	9d 81       	ldd	r25, Y+5	; 0x05
    16ac:	28 17       	cp	r18, r24
    16ae:	39 07       	cpc	r19, r25
    16b0:	64 f4       	brge	.+24     	; 0x16ca <fputc+0x3c>
    16b2:	e8 81       	ld	r30, Y
    16b4:	f9 81       	ldd	r31, Y+1	; 0x01
    16b6:	01 93       	st	Z+, r16
    16b8:	f9 83       	std	Y+1, r31	; 0x01
    16ba:	e8 83       	st	Y, r30
    16bc:	06 c0       	rjmp	.+12     	; 0x16ca <fputc+0x3c>
    16be:	e8 85       	ldd	r30, Y+8	; 0x08
    16c0:	f9 85       	ldd	r31, Y+9	; 0x09
    16c2:	80 2f       	mov	r24, r16
    16c4:	19 95       	eicall
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	31 f4       	brne	.+12     	; 0x16d6 <fputc+0x48>
    16ca:	8e 81       	ldd	r24, Y+6	; 0x06
    16cc:	9f 81       	ldd	r25, Y+7	; 0x07
    16ce:	01 96       	adiw	r24, 0x01	; 1
    16d0:	9f 83       	std	Y+7, r25	; 0x07
    16d2:	8e 83       	std	Y+6, r24	; 0x06
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <fputc+0x4c>
    16d6:	0f ef       	ldi	r16, 0xFF	; 255
    16d8:	1f ef       	ldi	r17, 0xFF	; 255
    16da:	c8 01       	movw	r24, r16
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	1f 91       	pop	r17
    16e2:	0f 91       	pop	r16
    16e4:	08 95       	ret

000016e6 <__ultoa_invert>:
    16e6:	fa 01       	movw	r30, r20
    16e8:	aa 27       	eor	r26, r26
    16ea:	28 30       	cpi	r18, 0x08	; 8
    16ec:	51 f1       	breq	.+84     	; 0x1742 <__ultoa_invert+0x5c>
    16ee:	20 31       	cpi	r18, 0x10	; 16
    16f0:	81 f1       	breq	.+96     	; 0x1752 <__ultoa_invert+0x6c>
    16f2:	e8 94       	clt
    16f4:	6f 93       	push	r22
    16f6:	6e 7f       	andi	r22, 0xFE	; 254
    16f8:	6e 5f       	subi	r22, 0xFE	; 254
    16fa:	7f 4f       	sbci	r23, 0xFF	; 255
    16fc:	8f 4f       	sbci	r24, 0xFF	; 255
    16fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1700:	af 4f       	sbci	r26, 0xFF	; 255
    1702:	b1 e0       	ldi	r27, 0x01	; 1
    1704:	3e d0       	rcall	.+124    	; 0x1782 <__ultoa_invert+0x9c>
    1706:	b4 e0       	ldi	r27, 0x04	; 4
    1708:	3c d0       	rcall	.+120    	; 0x1782 <__ultoa_invert+0x9c>
    170a:	67 0f       	add	r22, r23
    170c:	78 1f       	adc	r23, r24
    170e:	89 1f       	adc	r24, r25
    1710:	9a 1f       	adc	r25, r26
    1712:	a1 1d       	adc	r26, r1
    1714:	68 0f       	add	r22, r24
    1716:	79 1f       	adc	r23, r25
    1718:	8a 1f       	adc	r24, r26
    171a:	91 1d       	adc	r25, r1
    171c:	a1 1d       	adc	r26, r1
    171e:	6a 0f       	add	r22, r26
    1720:	71 1d       	adc	r23, r1
    1722:	81 1d       	adc	r24, r1
    1724:	91 1d       	adc	r25, r1
    1726:	a1 1d       	adc	r26, r1
    1728:	20 d0       	rcall	.+64     	; 0x176a <__ultoa_invert+0x84>
    172a:	09 f4       	brne	.+2      	; 0x172e <__ultoa_invert+0x48>
    172c:	68 94       	set
    172e:	3f 91       	pop	r19
    1730:	2a e0       	ldi	r18, 0x0A	; 10
    1732:	26 9f       	mul	r18, r22
    1734:	11 24       	eor	r1, r1
    1736:	30 19       	sub	r19, r0
    1738:	30 5d       	subi	r19, 0xD0	; 208
    173a:	31 93       	st	Z+, r19
    173c:	de f6       	brtc	.-74     	; 0x16f4 <__ultoa_invert+0xe>
    173e:	cf 01       	movw	r24, r30
    1740:	08 95       	ret
    1742:	46 2f       	mov	r20, r22
    1744:	47 70       	andi	r20, 0x07	; 7
    1746:	40 5d       	subi	r20, 0xD0	; 208
    1748:	41 93       	st	Z+, r20
    174a:	b3 e0       	ldi	r27, 0x03	; 3
    174c:	0f d0       	rcall	.+30     	; 0x176c <__ultoa_invert+0x86>
    174e:	c9 f7       	brne	.-14     	; 0x1742 <__ultoa_invert+0x5c>
    1750:	f6 cf       	rjmp	.-20     	; 0x173e <__ultoa_invert+0x58>
    1752:	46 2f       	mov	r20, r22
    1754:	4f 70       	andi	r20, 0x0F	; 15
    1756:	40 5d       	subi	r20, 0xD0	; 208
    1758:	4a 33       	cpi	r20, 0x3A	; 58
    175a:	18 f0       	brcs	.+6      	; 0x1762 <__ultoa_invert+0x7c>
    175c:	49 5d       	subi	r20, 0xD9	; 217
    175e:	31 fd       	sbrc	r19, 1
    1760:	40 52       	subi	r20, 0x20	; 32
    1762:	41 93       	st	Z+, r20
    1764:	02 d0       	rcall	.+4      	; 0x176a <__ultoa_invert+0x84>
    1766:	a9 f7       	brne	.-22     	; 0x1752 <__ultoa_invert+0x6c>
    1768:	ea cf       	rjmp	.-44     	; 0x173e <__ultoa_invert+0x58>
    176a:	b4 e0       	ldi	r27, 0x04	; 4
    176c:	a6 95       	lsr	r26
    176e:	97 95       	ror	r25
    1770:	87 95       	ror	r24
    1772:	77 95       	ror	r23
    1774:	67 95       	ror	r22
    1776:	ba 95       	dec	r27
    1778:	c9 f7       	brne	.-14     	; 0x176c <__ultoa_invert+0x86>
    177a:	00 97       	sbiw	r24, 0x00	; 0
    177c:	61 05       	cpc	r22, r1
    177e:	71 05       	cpc	r23, r1
    1780:	08 95       	ret
    1782:	9b 01       	movw	r18, r22
    1784:	ac 01       	movw	r20, r24
    1786:	0a 2e       	mov	r0, r26
    1788:	06 94       	lsr	r0
    178a:	57 95       	ror	r21
    178c:	47 95       	ror	r20
    178e:	37 95       	ror	r19
    1790:	27 95       	ror	r18
    1792:	ba 95       	dec	r27
    1794:	c9 f7       	brne	.-14     	; 0x1788 <__ultoa_invert+0xa2>
    1796:	62 0f       	add	r22, r18
    1798:	73 1f       	adc	r23, r19
    179a:	84 1f       	adc	r24, r20
    179c:	95 1f       	adc	r25, r21
    179e:	a0 1d       	adc	r26, r0
    17a0:	08 95       	ret

000017a2 <_exit>:
    17a2:	f8 94       	cli

000017a4 <__stop_program>:
    17a4:	ff cf       	rjmp	.-2      	; 0x17a4 <__stop_program>

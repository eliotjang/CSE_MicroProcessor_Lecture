
project12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000220  00800200  00002070  00002104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002070  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c0  00800420  00800420  00002324  2**0
                  ALLOC
  3 .stab         0000117c  00000000  00000000  00002324  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000039d  00000000  00000000  000034a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000408  00000000  00000000  00003840  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f39  00000000  00000000  00003c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000200f  00000000  00000000  00007b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f31  00000000  00000000  00009b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a3c  00000000  00000000  0000bac4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a98  00000000  00000000  0000c500  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025f4  00000000  00000000  0000cf98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000f58c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__vector_15>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_29>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	14 e0       	ldi	r17, 0x04	; 4
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 e7       	ldi	r30, 0x70	; 112
      fc:	f0 e2       	ldi	r31, 0x20	; 32
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 32       	cpi	r26, 0x20	; 32
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	16 e0       	ldi	r17, 0x06	; 6
     112:	a0 e2       	ldi	r26, 0x20	; 32
     114:	b4 e0       	ldi	r27, 0x04	; 4
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a0 3e       	cpi	r26, 0xE0	; 224
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <main>
     124:	0c 94 36 10 	jmp	0x206c	; 0x206c <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <adc_init>:
#include "list.h"
#include <util/delay.h>
#include "timer.h"
#include "led.h"
void  adc_init() {
	cbi(DDRF, PF0);   // make input PF0(=ADC0) GPIO
     12c:	80 98       	cbi	0x10, 0	; 16
	ADMUX = 0x80 | 0x00; // Ref. : 1.1v, Port : PF0
     12e:	80 e8       	ldi	r24, 0x80	; 128
     130:	80 93 7c 00 	sts	0x007C, r24
}
     134:	08 95       	ret

00000136 <adc_start>:
void adc_start(){
	sbi(ADCSRA, ADEN);    // ADC enable
     136:	ea e7       	ldi	r30, 0x7A	; 122
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	80 68       	ori	r24, 0x80	; 128
     13e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     140:	8d ed       	ldi	r24, 0xDD	; 221
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	01 97       	sbiw	r24, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <adc_start+0xe>
	_delay_us(120);
	sbi(ADCSRA, ADIE);     // Interrupt Enable
     148:	80 81       	ld	r24, Z
     14a:	88 60       	ori	r24, 0x08	; 8
     14c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADSC);    // Start conversion
     14e:	80 81       	ld	r24, Z
     150:	80 64       	ori	r24, 0x40	; 64
     152:	80 83       	st	Z, r24
}
     154:	08 95       	ret

00000156 <__vector_29>:
ISR(ADC_vect)  {
     156:	1f 92       	push	r1
     158:	0f 92       	push	r0
     15a:	0f b6       	in	r0, 0x3f	; 63
     15c:	0f 92       	push	r0
     15e:	0b b6       	in	r0, 0x3b	; 59
     160:	0f 92       	push	r0
     162:	11 24       	eor	r1, r1
     164:	2f 93       	push	r18
     166:	3f 93       	push	r19
     168:	4f 93       	push	r20
     16a:	5f 93       	push	r21
     16c:	6f 93       	push	r22
     16e:	7f 93       	push	r23
     170:	8f 93       	push	r24
     172:	9f 93       	push	r25
     174:	af 93       	push	r26
     176:	bf 93       	push	r27
     178:	ef 93       	push	r30
     17a:	ff 93       	push	r31
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	cd b7       	in	r28, 0x3d	; 61
     182:	de b7       	in	r29, 0x3e	; 62
     184:	2a 97       	sbiw	r28, 0x0a	; 10
     186:	de bf       	out	0x3e, r29	; 62
     188:	cd bf       	out	0x3d, r28	; 61
 	struct  task  task;
	uint16_t       data;
  data = ADCW & 0x03ff;
     18a:	80 91 78 00 	lds	r24, 0x0078
     18e:	90 91 79 00 	lds	r25, 0x0079
	cbi(ADCSRA, ADEN);
     192:	ea e7       	ldi	r30, 0x7A	; 122
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	20 81       	ld	r18, Z
     198:	2f 77       	andi	r18, 0x7F	; 127
     19a:	20 83       	st	Z, r18
	task.fun = task_tc1047a;
     19c:	2d ed       	ldi	r18, 0xDD	; 221
     19e:	33 e0       	ldi	r19, 0x03	; 3
     1a0:	3a 83       	std	Y+2, r19	; 0x02
     1a2:	29 83       	std	Y+1, r18	; 0x01
	sprintf(task.arg, "%d", data);
     1a4:	00 d0       	rcall	.+0      	; 0x1a6 <__vector_29+0x50>
     1a6:	00 d0       	rcall	.+0      	; 0x1a8 <__vector_29+0x52>
     1a8:	ed b7       	in	r30, 0x3d	; 61
     1aa:	fe b7       	in	r31, 0x3e	; 62
     1ac:	31 96       	adiw	r30, 0x01	; 1
     1ae:	9e 01       	movw	r18, r28
     1b0:	2d 5f       	subi	r18, 0xFD	; 253
     1b2:	3f 4f       	sbci	r19, 0xFF	; 255
     1b4:	ad b7       	in	r26, 0x3d	; 61
     1b6:	be b7       	in	r27, 0x3e	; 62
     1b8:	12 96       	adiw	r26, 0x02	; 2
     1ba:	3c 93       	st	X, r19
     1bc:	2e 93       	st	-X, r18
     1be:	11 97       	sbiw	r26, 0x01	; 1
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	32 e0       	ldi	r19, 0x02	; 2
     1c4:	33 83       	std	Z+3, r19	; 0x03
     1c6:	22 83       	std	Z+2, r18	; 0x02
	sbi(ADCSRA, ADSC);    // Start conversion
}
ISR(ADC_vect)  {
 	struct  task  task;
	uint16_t       data;
  data = ADCW & 0x03ff;
     1c8:	93 70       	andi	r25, 0x03	; 3
	cbi(ADCSRA, ADEN);
	task.fun = task_tc1047a;
	sprintf(task.arg, "%d", data);
     1ca:	95 83       	std	Z+5, r25	; 0x05
     1cc:	84 83       	std	Z+4, r24	; 0x04
     1ce:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <sprintf>
  task_insert(&task);
     1d2:	8d b7       	in	r24, 0x3d	; 61
     1d4:	9e b7       	in	r25, 0x3e	; 62
     1d6:	06 96       	adiw	r24, 0x06	; 6
     1d8:	0f b6       	in	r0, 0x3f	; 63
     1da:	f8 94       	cli
     1dc:	9e bf       	out	0x3e, r25	; 62
     1de:	0f be       	out	0x3f, r0	; 63
     1e0:	8d bf       	out	0x3d, r24	; 61
     1e2:	ce 01       	movw	r24, r28
     1e4:	01 96       	adiw	r24, 0x01	; 1
     1e6:	0e 94 68 03 	call	0x6d0	; 0x6d0 <task_insert>
}
     1ea:	2a 96       	adiw	r28, 0x0a	; 10
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	cd bf       	out	0x3d, r28	; 61
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	ff 91       	pop	r31
     1f6:	ef 91       	pop	r30
     1f8:	bf 91       	pop	r27
     1fa:	af 91       	pop	r26
     1fc:	9f 91       	pop	r25
     1fe:	8f 91       	pop	r24
     200:	7f 91       	pop	r23
     202:	6f 91       	pop	r22
     204:	5f 91       	pop	r21
     206:	4f 91       	pop	r20
     208:	3f 91       	pop	r19
     20a:	2f 91       	pop	r18
     20c:	0f 90       	pop	r0
     20e:	0b be       	out	0x3b, r0	; 59
     210:	0f 90       	pop	r0
     212:	0f be       	out	0x3f, r0	; 63
     214:	0f 90       	pop	r0
     216:	1f 90       	pop	r1
     218:	18 95       	reti

0000021a <is_prime>:
#include "task.h"
#include "timer.h"
extern volatile int exe_time;

int is_prime(int n)
{
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	fc 01       	movw	r30, r24
 int i;
 for (i = 2; i <= n/2; i++)
     220:	62 e0       	ldi	r22, 0x02	; 2
     222:	70 e0       	ldi	r23, 0x00	; 0
     224:	0e 94 90 0a 	call	0x1520	; 0x1520 <__divmodhi4>
     228:	eb 01       	movw	r28, r22
     22a:	22 e0       	ldi	r18, 0x02	; 2
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	08 c0       	rjmp	.+16     	; 0x240 <is_prime+0x26>
	 if ((n % i) == 0)
     230:	cf 01       	movw	r24, r30
     232:	b9 01       	movw	r22, r18
     234:	0e 94 90 0a 	call	0x1520	; 0x1520 <__divmodhi4>
     238:	00 97       	sbiw	r24, 0x00	; 0
     23a:	41 f0       	breq	.+16     	; 0x24c <is_prime+0x32>
extern volatile int exe_time;

int is_prime(int n)
{
 int i;
 for (i = 2; i <= n/2; i++)
     23c:	2f 5f       	subi	r18, 0xFF	; 255
     23e:	3f 4f       	sbci	r19, 0xFF	; 255
     240:	c2 17       	cp	r28, r18
     242:	d3 07       	cpc	r29, r19
     244:	ac f7       	brge	.-22     	; 0x230 <is_prime+0x16>
	 if ((n % i) == 0)
	 	return(0);
 return(1);
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	02 c0       	rjmp	.+4      	; 0x250 <is_prime+0x36>
int is_prime(int n)
{
 int i;
 for (i = 2; i <= n/2; i++)
	 if ((n % i) == 0)
	 	return(0);
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	90 e0       	ldi	r25, 0x00	; 0
 return(1);
}
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	08 95       	ret

00000256 <app_prime>:
void app_prime(char *ap)
{
     256:	cf 92       	push	r12
     258:	df 92       	push	r13
     25a:	ef 92       	push	r14
     25c:	ff 92       	push	r15
     25e:	0f 93       	push	r16
     260:	1f 93       	push	r17
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
 int n = 2000, count = 0, t;
 if (ap) t = atoi(ap);
     266:	00 97       	sbiw	r24, 0x00	; 0
     268:	19 f0       	breq	.+6      	; 0x270 <app_prime+0x1a>
     26a:	0e 94 1d 0c 	call	0x183a	; 0x183a <atoi>
     26e:	6c 01       	movw	r12, r24
	 	return(0);
 return(1);
}
void app_prime(char *ap)
{
 int n = 2000, count = 0, t;
     270:	00 e0       	ldi	r16, 0x00	; 0
     272:	10 e0       	ldi	r17, 0x00	; 0
 if (ap) t = atoi(ap);

 for (n = 2; n <= t; n++) {
     274:	c2 e0       	ldi	r28, 0x02	; 2
     276:	d0 e0       	ldi	r29, 0x00	; 0
 	if (is_prime(n)) {
	 	count++;
	 	printf("%d is a prime number !!!\n", n);
     278:	83 e0       	ldi	r24, 0x03	; 3
     27a:	e8 2e       	mov	r14, r24
     27c:	82 e0       	ldi	r24, 0x02	; 2
     27e:	f8 2e       	mov	r15, r24
void app_prime(char *ap)
{
 int n = 2000, count = 0, t;
 if (ap) t = atoi(ap);

 for (n = 2; n <= t; n++) {
     280:	16 c0       	rjmp	.+44     	; 0x2ae <app_prime+0x58>
 	if (is_prime(n)) {
     282:	ce 01       	movw	r24, r28
     284:	0e 94 0d 01 	call	0x21a	; 0x21a <is_prime>
     288:	00 97       	sbiw	r24, 0x00	; 0
     28a:	81 f0       	breq	.+32     	; 0x2ac <app_prime+0x56>
	 	count++;
     28c:	0f 5f       	subi	r16, 0xFF	; 255
     28e:	1f 4f       	sbci	r17, 0xFF	; 255
	 	printf("%d is a prime number !!!\n", n);
     290:	00 d0       	rcall	.+0      	; 0x292 <app_prime+0x3c>
     292:	0f 92       	push	r0
     294:	ed b7       	in	r30, 0x3d	; 61
     296:	fe b7       	in	r31, 0x3e	; 62
     298:	f2 82       	std	Z+2, r15	; 0x02
     29a:	e1 82       	std	Z+1, r14	; 0x01
     29c:	d4 83       	std	Z+4, r29	; 0x04
     29e:	c3 83       	std	Z+3, r28	; 0x03
     2a0:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <printf>
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
void app_prime(char *ap)
{
 int n = 2000, count = 0, t;
 if (ap) t = atoi(ap);

 for (n = 2; n <= t; n++) {
     2ac:	21 96       	adiw	r28, 0x01	; 1
     2ae:	cc 16       	cp	r12, r28
     2b0:	dd 06       	cpc	r13, r29
     2b2:	3c f7       	brge	.-50     	; 0x282 <app_prime+0x2c>
 	if (is_prime(n)) {
	 	count++;
	 	printf("%d is a prime number !!!\n", n);
	 }
 }
 printf("count=%d\n", count);
     2b4:	00 d0       	rcall	.+0      	; 0x2b6 <app_prime+0x60>
     2b6:	0f 92       	push	r0
     2b8:	8d e1       	ldi	r24, 0x1D	; 29
     2ba:	92 e0       	ldi	r25, 0x02	; 2
     2bc:	ed b7       	in	r30, 0x3d	; 61
     2be:	fe b7       	in	r31, 0x3e	; 62
     2c0:	92 83       	std	Z+2, r25	; 0x02
     2c2:	81 83       	std	Z+1, r24	; 0x01
     2c4:	14 83       	std	Z+4, r17	; 0x04
     2c6:	03 83       	std	Z+3, r16	; 0x03
     2c8:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <printf>
     2cc:	0f 90       	pop	r0
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
}
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	1f 91       	pop	r17
     2da:	0f 91       	pop	r16
     2dc:	ff 90       	pop	r15
     2de:	ef 90       	pop	r14
     2e0:	df 90       	pop	r13
     2e2:	cf 90       	pop	r12
     2e4:	08 95       	ret

000002e6 <app_list>:
void app_list(char *ap)
{

}
     2e6:	08 95       	ret

000002e8 <app_timer>:
 void  app_timer(char *ap)  {
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
     2f4:	62 97       	sbiw	r28, 0x12	; 18
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	cd bf       	out	0x3d, r28	; 61
 	char buf[8];
	int ms;
	struct task  tsk;
	while(1) {
		printf(">> ");
     300:	07 e2       	ldi	r16, 0x27	; 39
     302:	12 e0       	ldi	r17, 0x02	; 2
     304:	0f 92       	push	r0
     306:	0f 92       	push	r0
     308:	ed b7       	in	r30, 0x3d	; 61
     30a:	fe b7       	in	r31, 0x3e	; 62
     30c:	12 83       	std	Z+2, r17	; 0x02
     30e:	01 83       	std	Z+1, r16	; 0x01
     310:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <printf>
		if (fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	40 91 da 06 	lds	r20, 0x06DA
     31c:	50 91 db 06 	lds	r21, 0x06DB
     320:	ce 01       	movw	r24, r28
     322:	01 96       	adiw	r24, 0x01	; 1
     324:	68 e0       	ldi	r22, 0x08	; 8
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <fgets>
     32c:	00 97       	sbiw	r24, 0x00	; 0
     32e:	61 f0       	breq	.+24     	; 0x348 <app_timer+0x60>
     330:	ce 01       	movw	r24, r28
     332:	01 96       	adiw	r24, 0x01	; 1
     334:	0e 94 1d 0c 	call	0x183a	; 0x183a <atoi>
     338:	bc 01       	movw	r22, r24
     33a:	00 97       	sbiw	r24, 0x00	; 0
     33c:	29 f0       	breq	.+10     	; 0x348 <app_timer+0x60>
			break; 
        insert_timer(&tsk, ms);
     33e:	ce 01       	movw	r24, r28
     340:	09 96       	adiw	r24, 0x09	; 9
     342:	0e 94 3f 05 	call	0xa7e	; 0xa7e <insert_timer>
	}
     346:	de cf       	rjmp	.-68     	; 0x304 <app_timer+0x1c>
	tour_timer();
     348:	0e 94 e7 04 	call	0x9ce	; 0x9ce <tour_timer>
	free_timer();
     34c:	0e 94 29 05 	call	0xa52	; 0xa52 <free_timer>
} 
     350:	62 96       	adiw	r28, 0x12	; 18
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	de bf       	out	0x3e, r29	; 62
     358:	0f be       	out	0x3f, r0	; 63
     35a:	cd bf       	out	0x3d, r28	; 61
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	1f 91       	pop	r17
     362:	0f 91       	pop	r16
     364:	08 95       	ret

00000366 <app_time>:
void app_time(){
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
	printf("MIN : SEC\n");
     36a:	8b e2       	ldi	r24, 0x2B	; 43
     36c:	92 e0       	ldi	r25, 0x02	; 2
     36e:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <puts>
	printf("%.2d : %.2d\n", exe_time/60, exe_time%60);
     372:	80 91 29 04 	lds	r24, 0x0429
     376:	90 91 2a 04 	lds	r25, 0x042A
     37a:	e0 91 29 04 	lds	r30, 0x0429
     37e:	f0 91 2a 04 	lds	r31, 0x042A
     382:	00 d0       	rcall	.+0      	; 0x384 <app_time+0x1e>
     384:	00 d0       	rcall	.+0      	; 0x386 <app_time+0x20>
     386:	cd b7       	in	r28, 0x3d	; 61
     388:	de b7       	in	r29, 0x3e	; 62
     38a:	21 96       	adiw	r28, 0x01	; 1
     38c:	25 e3       	ldi	r18, 0x35	; 53
     38e:	32 e0       	ldi	r19, 0x02	; 2
     390:	ad b7       	in	r26, 0x3d	; 61
     392:	be b7       	in	r27, 0x3e	; 62
     394:	12 96       	adiw	r26, 0x02	; 2
     396:	3c 93       	st	X, r19
     398:	2e 93       	st	-X, r18
     39a:	11 97       	sbiw	r26, 0x01	; 1
     39c:	2c e3       	ldi	r18, 0x3C	; 60
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	b9 01       	movw	r22, r18
     3a2:	0e 94 90 0a 	call	0x1520	; 0x1520 <__divmodhi4>
     3a6:	7b 83       	std	Y+3, r23	; 0x03
     3a8:	6a 83       	std	Y+2, r22	; 0x02
     3aa:	cf 01       	movw	r24, r30
     3ac:	b9 01       	movw	r22, r18
     3ae:	0e 94 90 0a 	call	0x1520	; 0x1520 <__divmodhi4>
     3b2:	9d 83       	std	Y+5, r25	; 0x05
     3b4:	8c 83       	std	Y+4, r24	; 0x04
     3b6:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <printf>
     3ba:	8d b7       	in	r24, 0x3d	; 61
     3bc:	9e b7       	in	r25, 0x3e	; 62
     3be:	06 96       	adiw	r24, 0x06	; 6
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	f8 94       	cli
     3c4:	9e bf       	out	0x3e, r25	; 62
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	8d bf       	out	0x3d, r24	; 61
	
}
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	08 95       	ret

000003d0 <led_init>:
#include "timer.h"

static uint8_t Leds;

void led_init() {
	DDRL = PORTL = 0xff;
     3d0:	8f ef       	ldi	r24, 0xFF	; 255
     3d2:	80 93 0b 01 	sts	0x010B, r24
     3d6:	80 93 0a 01 	sts	0x010A, r24
}
     3da:	08 95       	ret

000003dc <led_on_all>:
void led_on_all(void) {
	Leds = PORTL = 0x00;
     3dc:	10 92 0b 01 	sts	0x010B, r1
     3e0:	10 92 20 04 	sts	0x0420, r1
}
     3e4:	08 95       	ret

000003e6 <led_off_all>:
void led_off_all(void) {
	 Leds = PORTL = 0xff;
     3e6:	8f ef       	ldi	r24, 0xFF	; 255
     3e8:	80 93 0b 01 	sts	0x010B, r24
     3ec:	80 93 20 04 	sts	0x0420, r24
}
     3f0:	08 95       	ret

000003f2 <task_led>:
	else{
		led_off_all();
		flag = 0;
	}
}*/
void task_led(char *ap){
     3f2:	0f 93       	push	r16
     3f4:	1f 93       	push	r17
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	2a 97       	sbiw	r28, 0x0a	; 10
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	f8 94       	cli
     404:	de bf       	out	0x3e, r29	; 62
     406:	0f be       	out	0x3f, r0	; 63
     408:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	static int tag;
	int ms = 1024*5;
	if(ap&&*ap)
     40a:	00 97       	sbiw	r24, 0x00	; 0
     40c:	41 f0       	breq	.+16     	; 0x41e <task_led+0x2c>
     40e:	dc 01       	movw	r26, r24
     410:	2c 91       	ld	r18, X
     412:	22 23       	and	r18, r18
     414:	21 f0       	breq	.+8      	; 0x41e <task_led+0x2c>
		ms = atoi(ap);
     416:	0e 94 1d 0c 	call	0x183a	; 0x183a <atoi>
     41a:	8c 01       	movw	r16, r24
     41c:	02 c0       	rjmp	.+4      	; 0x422 <task_led+0x30>
	}
}*/
void task_led(char *ap){
	struct task task;
	static int tag;
	int ms = 1024*5;
     41e:	00 e0       	ldi	r16, 0x00	; 0
     420:	14 e1       	ldi	r17, 0x14	; 20
	if(ap&&*ap)
		ms = atoi(ap);
	
	if(tag){
     422:	80 91 21 04 	lds	r24, 0x0421
     426:	90 91 22 04 	lds	r25, 0x0422
     42a:	00 97       	sbiw	r24, 0x00	; 0
     42c:	39 f0       	breq	.+14     	; 0x43c <task_led+0x4a>
		led_on_all();
     42e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <led_on_all>
		tag = 0;
     432:	10 92 22 04 	sts	0x0422, r1
     436:	10 92 21 04 	sts	0x0421, r1
     43a:	08 c0       	rjmp	.+16     	; 0x44c <task_led+0x5a>
	}
	else{
		led_off_all();
     43c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <led_off_all>
		tag = 1;
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	90 93 22 04 	sts	0x0422, r25
     448:	80 93 21 04 	sts	0x0421, r24
	}
	task.fun=task_led;
     44c:	89 ef       	ldi	r24, 0xF9	; 249
     44e:	91 e0       	ldi	r25, 0x01	; 1
     450:	9a 83       	std	Y+2, r25	; 0x02
     452:	89 83       	std	Y+1, r24	; 0x01
	sprintf(task.arg,"%d",ms);
     454:	00 d0       	rcall	.+0      	; 0x456 <task_led+0x64>
     456:	00 d0       	rcall	.+0      	; 0x458 <task_led+0x66>
     458:	ed b7       	in	r30, 0x3d	; 61
     45a:	fe b7       	in	r31, 0x3e	; 62
     45c:	31 96       	adiw	r30, 0x01	; 1
     45e:	ce 01       	movw	r24, r28
     460:	03 96       	adiw	r24, 0x03	; 3
     462:	ad b7       	in	r26, 0x3d	; 61
     464:	be b7       	in	r27, 0x3e	; 62
     466:	12 96       	adiw	r26, 0x02	; 2
     468:	9c 93       	st	X, r25
     46a:	8e 93       	st	-X, r24
     46c:	11 97       	sbiw	r26, 0x01	; 1
     46e:	82 e4       	ldi	r24, 0x42	; 66
     470:	92 e0       	ldi	r25, 0x02	; 2
     472:	93 83       	std	Z+3, r25	; 0x03
     474:	82 83       	std	Z+2, r24	; 0x02
     476:	15 83       	std	Z+5, r17	; 0x05
     478:	04 83       	std	Z+4, r16	; 0x04
     47a:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <sprintf>
	insert_timer(&task, ms/256);
     47e:	ed b7       	in	r30, 0x3d	; 61
     480:	fe b7       	in	r31, 0x3e	; 62
     482:	36 96       	adiw	r30, 0x06	; 6
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	fe bf       	out	0x3e, r31	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	ed bf       	out	0x3d, r30	; 61
     48e:	c8 01       	movw	r24, r16
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	71 e0       	ldi	r23, 0x01	; 1
     494:	0e 94 90 0a 	call	0x1520	; 0x1520 <__divmodhi4>
     498:	ce 01       	movw	r24, r28
     49a:	01 96       	adiw	r24, 0x01	; 1
     49c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <insert_timer>
}
     4a0:	2a 96       	adiw	r28, 0x0a	; 10
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	f8 94       	cli
     4a6:	de bf       	out	0x3e, r29	; 62
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	cd bf       	out	0x3d, r28	; 61
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	08 95       	ret

000004b6 <led_on>:
}
void led_off_all(void) {
	 Leds = PORTL = 0xff;
}
void led_on(uint8_t led_no) {
	Leds &= ~(1 << led_no);
     4b6:	21 e0       	ldi	r18, 0x01	; 1
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <led_on+0xa>
     4bc:	22 0f       	add	r18, r18
     4be:	33 1f       	adc	r19, r19
     4c0:	8a 95       	dec	r24
     4c2:	e2 f7       	brpl	.-8      	; 0x4bc <led_on+0x6>
     4c4:	20 95       	com	r18
     4c6:	80 91 20 04 	lds	r24, 0x0420
     4ca:	28 23       	and	r18, r24
     4cc:	20 93 20 04 	sts	0x0420, r18
	PORTL = Leds;
     4d0:	20 93 0b 01 	sts	0x010B, r18
}
     4d4:	08 95       	ret

000004d6 <led_off>:
void led_off(uint8_t led_no) {
	Leds |= (1 << led_no);
     4d6:	21 e0       	ldi	r18, 0x01	; 1
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <led_off+0xa>
     4dc:	22 0f       	add	r18, r18
     4de:	33 1f       	adc	r19, r19
     4e0:	8a 95       	dec	r24
     4e2:	e2 f7       	brpl	.-8      	; 0x4dc <led_off+0x6>
     4e4:	80 91 20 04 	lds	r24, 0x0420
     4e8:	82 2b       	or	r24, r18
     4ea:	80 93 20 04 	sts	0x0420, r24
	PORTL = Leds;
     4ee:	80 93 0b 01 	sts	0x010B, r24
}
     4f2:	08 95       	ret

000004f4 <led_set>:
void led_set(uint8_t led_mask) {
	Leds = ~led_mask;
     4f4:	80 95       	com	r24
     4f6:	80 93 20 04 	sts	0x0420, r24
	PORTL = Leds;
     4fa:	80 93 0b 01 	sts	0x010B, r24
} 
     4fe:	08 95       	ret

00000500 <q_init>:
char qo[QO_SIZE];
int fi, ri;
int fo, ro;
void q_init()
{
	fi = ri = fo = ro = 0;
     500:	10 92 32 05 	sts	0x0532, r1
     504:	10 92 31 05 	sts	0x0531, r1
     508:	10 92 30 05 	sts	0x0530, r1
     50c:	10 92 2f 05 	sts	0x052F, r1
     510:	10 92 34 05 	sts	0x0534, r1
     514:	10 92 33 05 	sts	0x0533, r1
     518:	10 92 2e 04 	sts	0x042E, r1
     51c:	10 92 2d 04 	sts	0x042D, r1
}
     520:	08 95       	ret

00000522 <qi_insert>:
int qi_insert(char ch)
{
     522:	48 2f       	mov	r20, r24
 	if ((ri + 1) % QI_SIZE == fi)
     524:	20 91 33 05 	lds	r18, 0x0533
     528:	30 91 34 05 	lds	r19, 0x0534
     52c:	2f 5f       	subi	r18, 0xFF	; 255
     52e:	3f 4f       	sbci	r19, 0xFF	; 255
     530:	c9 01       	movw	r24, r18
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	71 e0       	ldi	r23, 0x01	; 1
     536:	0e 94 90 0a 	call	0x1520	; 0x1520 <__divmodhi4>
     53a:	9c 01       	movw	r18, r24
     53c:	80 91 2d 04 	lds	r24, 0x042D
     540:	90 91 2e 04 	lds	r25, 0x042E
     544:	28 17       	cp	r18, r24
     546:	39 07       	cpc	r19, r25
     548:	59 f0       	breq	.+22     	; 0x560 <qi_insert+0x3e>
 		return(0); // full
	ri = (ri + 1) % QI_SIZE;
     54a:	30 93 34 05 	sts	0x0534, r19
     54e:	20 93 33 05 	sts	0x0533, r18
	qi[ri] = ch;
     552:	2b 5c       	subi	r18, 0xCB	; 203
     554:	3a 4f       	sbci	r19, 0xFA	; 250
     556:	f9 01       	movw	r30, r18
     558:	40 83       	st	Z, r20
	return(1);
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	08 95       	ret
	fi = ri = fo = ro = 0;
}
int qi_insert(char ch)
{
 	if ((ri + 1) % QI_SIZE == fi)
 		return(0); // full
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return(1);
}
     564:	08 95       	ret

00000566 <qi_delete>:
int qi_delete()
{
 if (ri == fi)
     566:	80 91 2d 04 	lds	r24, 0x042D
     56a:	90 91 2e 04 	lds	r25, 0x042E
     56e:	20 91 33 05 	lds	r18, 0x0533
     572:	30 91 34 05 	lds	r19, 0x0534
     576:	28 17       	cp	r18, r24
     578:	39 07       	cpc	r19, r25
     57a:	79 f0       	breq	.+30     	; 0x59a <qi_delete+0x34>
 	return(0); // empty
 fi = (fi + 1) % QI_SIZE;
     57c:	01 96       	adiw	r24, 0x01	; 1
     57e:	60 e0       	ldi	r22, 0x00	; 0
     580:	71 e0       	ldi	r23, 0x01	; 1
     582:	0e 94 90 0a 	call	0x1520	; 0x1520 <__divmodhi4>
     586:	90 93 2e 04 	sts	0x042E, r25
     58a:	80 93 2d 04 	sts	0x042D, r24
 	return(qi[fi]);
     58e:	8b 5c       	subi	r24, 0xCB	; 203
     590:	9a 4f       	sbci	r25, 0xFA	; 250
     592:	fc 01       	movw	r30, r24
     594:	80 81       	ld	r24, Z
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	08 95       	ret
	return(1);
}
int qi_delete()
{
 if (ri == fi)
 	return(0); // empty
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	90 e0       	ldi	r25, 0x00	; 0
 fi = (fi + 1) % QI_SIZE;
 	return(qi[fi]);
}
     59e:	08 95       	ret

000005a0 <qo_insert>:

int qo_insert(char ch)
{
     5a0:	48 2f       	mov	r20, r24
 	if ((ro + 1) % QO_SIZE == fo)
     5a2:	20 91 31 05 	lds	r18, 0x0531
     5a6:	30 91 32 05 	lds	r19, 0x0532
     5aa:	2f 5f       	subi	r18, 0xFF	; 255
     5ac:	3f 4f       	sbci	r19, 0xFF	; 255
     5ae:	c9 01       	movw	r24, r18
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	71 e0       	ldi	r23, 0x01	; 1
     5b4:	0e 94 90 0a 	call	0x1520	; 0x1520 <__divmodhi4>
     5b8:	9c 01       	movw	r18, r24
     5ba:	80 91 2f 05 	lds	r24, 0x052F
     5be:	90 91 30 05 	lds	r25, 0x0530
     5c2:	28 17       	cp	r18, r24
     5c4:	39 07       	cpc	r19, r25
     5c6:	59 f0       	breq	.+22     	; 0x5de <qo_insert+0x3e>
 		return(0); // full
	ro = (ro + 1) % QO_SIZE;
     5c8:	30 93 32 05 	sts	0x0532, r19
     5cc:	20 93 31 05 	sts	0x0531, r18
	qo[ro] = ch;
     5d0:	21 5d       	subi	r18, 0xD1	; 209
     5d2:	3b 4f       	sbci	r19, 0xFB	; 251
     5d4:	f9 01       	movw	r30, r18
     5d6:	40 83       	st	Z, r20
	return(1);
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	08 95       	ret
}

int qo_insert(char ch)
{
 	if ((ro + 1) % QO_SIZE == fo)
 		return(0); // full
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return(1);
}
     5e2:	08 95       	ret

000005e4 <qo_delete>:
int qo_delete()
{
 if (ro == fo)
     5e4:	80 91 2f 05 	lds	r24, 0x052F
     5e8:	90 91 30 05 	lds	r25, 0x0530
     5ec:	20 91 31 05 	lds	r18, 0x0531
     5f0:	30 91 32 05 	lds	r19, 0x0532
     5f4:	28 17       	cp	r18, r24
     5f6:	39 07       	cpc	r19, r25
     5f8:	79 f0       	breq	.+30     	; 0x618 <qo_delete+0x34>
 	return(0); // empty
 fo = (fo + 1) % QO_SIZE;
     5fa:	01 96       	adiw	r24, 0x01	; 1
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	71 e0       	ldi	r23, 0x01	; 1
     600:	0e 94 90 0a 	call	0x1520	; 0x1520 <__divmodhi4>
     604:	90 93 30 05 	sts	0x0530, r25
     608:	80 93 2f 05 	sts	0x052F, r24
 	return(qo[fo]);
     60c:	81 5d       	subi	r24, 0xD1	; 209
     60e:	9b 4f       	sbci	r25, 0xFB	; 251
     610:	fc 01       	movw	r30, r24
     612:	80 81       	ld	r24, Z
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	08 95       	ret
	return(1);
}
int qo_delete()
{
 if (ro == fo)
 	return(0); // empty
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	90 e0       	ldi	r25, 0x00	; 0
 fo = (fo + 1) % QO_SIZE;
 	return(qo[fo]);
}
     61c:	08 95       	ret

0000061e <task_prime>:

	}else{
		printf("!!!-444\n");
	}
}
void task_prime(char *ap){
     61e:	cf 92       	push	r12
     620:	df 92       	push	r13
     622:	ef 92       	push	r14
     624:	ff 92       	push	r15
     626:	0f 93       	push	r16
     628:	1f 93       	push	r17
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29

	int t=2000, count = 0, n;
	if(ap &&*ap) t = atoi(ap);
     62e:	00 97       	sbiw	r24, 0x00	; 0
     630:	41 f0       	breq	.+16     	; 0x642 <task_prime+0x24>
     632:	fc 01       	movw	r30, r24
     634:	20 81       	ld	r18, Z
     636:	22 23       	and	r18, r18
     638:	21 f0       	breq	.+8      	; 0x642 <task_prime+0x24>
     63a:	0e 94 1d 0c 	call	0x183a	; 0x183a <atoi>
     63e:	8c 01       	movw	r16, r24
     640:	02 c0       	rjmp	.+4      	; 0x646 <task_prime+0x28>
		printf("!!!-444\n");
	}
}
void task_prime(char *ap){

	int t=2000, count = 0, n;
     642:	00 ed       	ldi	r16, 0xD0	; 208
     644:	17 e0       	ldi	r17, 0x07	; 7
	if(ap &&*ap) t = atoi(ap);
	for(n = 2; n <= t; n++){
     646:	c2 e0       	ldi	r28, 0x02	; 2
     648:	d0 e0       	ldi	r29, 0x00	; 0
		printf("!!!-444\n");
	}
}
void task_prime(char *ap){

	int t=2000, count = 0, n;
     64a:	ee 24       	eor	r14, r14
     64c:	ff 24       	eor	r15, r15
	if(ap &&*ap) t = atoi(ap);
	for(n = 2; n <= t; n++){
		if(is_prime(n)){
			count++;
			printf("%d is a prime number!!!\n",n);
     64e:	88 e4       	ldi	r24, 0x48	; 72
     650:	c8 2e       	mov	r12, r24
     652:	82 e0       	ldi	r24, 0x02	; 2
     654:	d8 2e       	mov	r13, r24
}
void task_prime(char *ap){

	int t=2000, count = 0, n;
	if(ap &&*ap) t = atoi(ap);
	for(n = 2; n <= t; n++){
     656:	17 c0       	rjmp	.+46     	; 0x686 <task_prime+0x68>
		if(is_prime(n)){
     658:	ce 01       	movw	r24, r28
     65a:	0e 94 0d 01 	call	0x21a	; 0x21a <is_prime>
     65e:	00 97       	sbiw	r24, 0x00	; 0
     660:	89 f0       	breq	.+34     	; 0x684 <task_prime+0x66>
			count++;
     662:	08 94       	sec
     664:	e1 1c       	adc	r14, r1
     666:	f1 1c       	adc	r15, r1
			printf("%d is a prime number!!!\n",n);
     668:	00 d0       	rcall	.+0      	; 0x66a <task_prime+0x4c>
     66a:	0f 92       	push	r0
     66c:	ed b7       	in	r30, 0x3d	; 61
     66e:	fe b7       	in	r31, 0x3e	; 62
     670:	d2 82       	std	Z+2, r13	; 0x02
     672:	c1 82       	std	Z+1, r12	; 0x01
     674:	d4 83       	std	Z+4, r29	; 0x04
     676:	c3 83       	std	Z+3, r28	; 0x03
     678:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <printf>
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
}
void task_prime(char *ap){

	int t=2000, count = 0, n;
	if(ap &&*ap) t = atoi(ap);
	for(n = 2; n <= t; n++){
     684:	21 96       	adiw	r28, 0x01	; 1
     686:	0c 17       	cp	r16, r28
     688:	1d 07       	cpc	r17, r29
     68a:	34 f7       	brge	.-52     	; 0x658 <task_prime+0x3a>
		if(is_prime(n)){
			count++;
			printf("%d is a prime number!!!\n",n);
		}
 	}
	printf("count=%d\n",count);
     68c:	00 d0       	rcall	.+0      	; 0x68e <task_prime+0x70>
     68e:	0f 92       	push	r0
     690:	81 e6       	ldi	r24, 0x61	; 97
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	ed b7       	in	r30, 0x3d	; 61
     696:	fe b7       	in	r31, 0x3e	; 62
     698:	92 83       	std	Z+2, r25	; 0x02
     69a:	81 83       	std	Z+1, r24	; 0x01
     69c:	f4 82       	std	Z+4, r15	; 0x04
     69e:	e3 82       	std	Z+3, r14	; 0x03
     6a0:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <printf>
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
}
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	1f 91       	pop	r17
     6b2:	0f 91       	pop	r16
     6b4:	ff 90       	pop	r15
     6b6:	ef 90       	pop	r14
     6b8:	df 90       	pop	r13
     6ba:	cf 90       	pop	r12
     6bc:	08 95       	ret

000006be <task_init>:
#define MAX_TASK 16
struct task Task_q[MAX_TASK];
volatile int Task_f, Task_r;

void task_init(){
	Task_f = Task_r = 0;
     6be:	10 92 28 04 	sts	0x0428, r1
     6c2:	10 92 27 04 	sts	0x0427, r1
     6c6:	10 92 2c 04 	sts	0x042C, r1
     6ca:	10 92 2b 04 	sts	0x042B, r1
}
     6ce:	08 95       	ret

000006d0 <task_insert>:

int task_insert(struct task *tskp){
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
     6d4:	48 2f       	mov	r20, r24
     6d6:	e9 2f       	mov	r30, r25
	if((Task_r + 1) % MAX_TASK == Task_f)
     6d8:	80 91 27 04 	lds	r24, 0x0427
     6dc:	90 91 28 04 	lds	r25, 0x0428
     6e0:	c0 91 2b 04 	lds	r28, 0x042B
     6e4:	d0 91 2c 04 	lds	r29, 0x042C
     6e8:	01 96       	adiw	r24, 0x01	; 1
     6ea:	20 e1       	ldi	r18, 0x10	; 16
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	b9 01       	movw	r22, r18
     6f0:	0e 94 90 0a 	call	0x1520	; 0x1520 <__divmodhi4>
     6f4:	8c 17       	cp	r24, r28
     6f6:	9d 07       	cpc	r25, r29
     6f8:	31 f1       	breq	.+76     	; 0x746 <task_insert+0x76>
		return(0);
	Task_r = (Task_r + 1) % MAX_TASK;
     6fa:	80 91 27 04 	lds	r24, 0x0427
     6fe:	90 91 28 04 	lds	r25, 0x0428
     702:	01 96       	adiw	r24, 0x01	; 1
     704:	b9 01       	movw	r22, r18
     706:	0e 94 90 0a 	call	0x1520	; 0x1520 <__divmodhi4>
     70a:	90 93 28 04 	sts	0x0428, r25
     70e:	80 93 27 04 	sts	0x0427, r24
	Task_q[Task_r] = *tskp;
     712:	80 91 27 04 	lds	r24, 0x0427
     716:	90 91 28 04 	lds	r25, 0x0428
     71a:	dc 01       	movw	r26, r24
     71c:	aa 0f       	add	r26, r26
     71e:	bb 1f       	adc	r27, r27
     720:	63 e0       	ldi	r22, 0x03	; 3
     722:	88 0f       	add	r24, r24
     724:	99 1f       	adc	r25, r25
     726:	6a 95       	dec	r22
     728:	e1 f7       	brne	.-8      	; 0x722 <task_insert+0x52>
     72a:	a8 0f       	add	r26, r24
     72c:	b9 1f       	adc	r27, r25
     72e:	ab 5c       	subi	r26, 0xCB	; 203
     730:	b9 4f       	sbci	r27, 0xF9	; 249
     732:	c4 2f       	mov	r28, r20
     734:	de 2f       	mov	r29, r30
     736:	8a e0       	ldi	r24, 0x0A	; 10
     738:	09 90       	ld	r0, Y+
     73a:	0d 92       	st	X+, r0
     73c:	81 50       	subi	r24, 0x01	; 1
     73e:	e1 f7       	brne	.-8      	; 0x738 <task_insert+0x68>
	return(1);
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	02 c0       	rjmp	.+4      	; 0x74a <task_insert+0x7a>
	Task_f = Task_r = 0;
}

int task_insert(struct task *tskp){
	if((Task_r + 1) % MAX_TASK == Task_f)
		return(0);
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	90 e0       	ldi	r25, 0x00	; 0
	Task_r = (Task_r + 1) % MAX_TASK;
	Task_q[Task_r] = *tskp;
	return(1);
}
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	08 95       	ret

00000750 <task_delete>:
int task_delete(struct task *tskp)
{
     750:	9c 01       	movw	r18, r24
	if(Task_r == Task_f)
     752:	40 91 27 04 	lds	r20, 0x0427
     756:	50 91 28 04 	lds	r21, 0x0428
     75a:	80 91 2b 04 	lds	r24, 0x042B
     75e:	90 91 2c 04 	lds	r25, 0x042C
     762:	48 17       	cp	r20, r24
     764:	59 07       	cpc	r21, r25
     766:	31 f1       	breq	.+76     	; 0x7b4 <task_delete+0x64>
		return(0);
	Task_f = (Task_f + 1) % MAX_TASK;
     768:	80 91 2b 04 	lds	r24, 0x042B
     76c:	90 91 2c 04 	lds	r25, 0x042C
     770:	01 96       	adiw	r24, 0x01	; 1
     772:	60 e1       	ldi	r22, 0x10	; 16
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	0e 94 90 0a 	call	0x1520	; 0x1520 <__divmodhi4>
     77a:	90 93 2c 04 	sts	0x042C, r25
     77e:	80 93 2b 04 	sts	0x042B, r24
	*tskp = Task_q[Task_f];
     782:	80 91 2b 04 	lds	r24, 0x042B
     786:	90 91 2c 04 	lds	r25, 0x042C
     78a:	fc 01       	movw	r30, r24
     78c:	ee 0f       	add	r30, r30
     78e:	ff 1f       	adc	r31, r31
     790:	a3 e0       	ldi	r26, 0x03	; 3
     792:	88 0f       	add	r24, r24
     794:	99 1f       	adc	r25, r25
     796:	aa 95       	dec	r26
     798:	e1 f7       	brne	.-8      	; 0x792 <task_delete+0x42>
     79a:	e8 0f       	add	r30, r24
     79c:	f9 1f       	adc	r31, r25
     79e:	d9 01       	movw	r26, r18
     7a0:	eb 5c       	subi	r30, 0xCB	; 203
     7a2:	f9 4f       	sbci	r31, 0xF9	; 249
     7a4:	8a e0       	ldi	r24, 0x0A	; 10
     7a6:	01 90       	ld	r0, Z+
     7a8:	0d 92       	st	X+, r0
     7aa:	81 50       	subi	r24, 0x01	; 1
     7ac:	e1 f7       	brne	.-8      	; 0x7a6 <task_delete+0x56>
	return(1);
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	08 95       	ret
	return(1);
}
int task_delete(struct task *tskp)
{
	if(Task_r == Task_f)
		return(0);
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	90 e0       	ldi	r25, 0x00	; 0
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return(1);
}
     7b8:	08 95       	ret

000007ba <task_tc1047a>:
			printf("%d is a prime number!!!\n",n);
		}
 	}
	printf("count=%d\n",count);
}
void  task_tc1047a(void *arg) {
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	ec 01       	movw	r28, r24
 	int   value;
  if (!strcmp(arg, ""))   // called from task_cmd or timer task
     7c0:	88 81       	ld	r24, Y
     7c2:	88 23       	and	r24, r24
     7c4:	19 f4       	brne	.+6      	; 0x7cc <task_tc1047a+0x12>
		adc_start();
     7c6:	0e 94 9b 00 	call	0x136	; 0x136 <adc_start>
     7ca:	44 c0       	rjmp	.+136    	; 0x854 <task_tc1047a+0x9a>
	else  {                                // called from ISR()
		printf("value : %d",atoi(arg));
     7cc:	ce 01       	movw	r24, r28
     7ce:	0e 94 1d 0c 	call	0x183a	; 0x183a <atoi>
     7d2:	00 d0       	rcall	.+0      	; 0x7d4 <task_tc1047a+0x1a>
     7d4:	0f 92       	push	r0
     7d6:	2b e6       	ldi	r18, 0x6B	; 107
     7d8:	32 e0       	ldi	r19, 0x02	; 2
     7da:	ed b7       	in	r30, 0x3d	; 61
     7dc:	fe b7       	in	r31, 0x3e	; 62
     7de:	32 83       	std	Z+2, r19	; 0x02
     7e0:	21 83       	std	Z+1, r18	; 0x01
     7e2:	94 83       	std	Z+4, r25	; 0x04
     7e4:	83 83       	std	Z+3, r24	; 0x03
     7e6:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <printf>
	  value = atoi(arg) * (1.1/1024) * 1000;
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	ce 01       	movw	r24, r28
     7f4:	0e 94 1d 0c 	call	0x183a	; 0x183a <atoi>
     7f8:	9c 01       	movw	r18, r24
     7fa:	b9 01       	movw	r22, r18
     7fc:	88 27       	eor	r24, r24
     7fe:	77 fd       	sbrc	r23, 7
     800:	80 95       	com	r24
     802:	98 2f       	mov	r25, r24
     804:	0e 94 09 08 	call	0x1012	; 0x1012 <__floatsisf>
     808:	2d ec       	ldi	r18, 0xCD	; 205
     80a:	3c ec       	ldi	r19, 0xCC	; 204
     80c:	4c e8       	ldi	r20, 0x8C	; 140
     80e:	5a e3       	ldi	r21, 0x3A	; 58
     810:	0e 94 08 07 	call	0xe10	; 0xe10 <__mulsf3>
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	4a e7       	ldi	r20, 0x7A	; 122
     81a:	54 e4       	ldi	r21, 0x44	; 68
     81c:	0e 94 08 07 	call	0xe10	; 0xe10 <__mulsf3>
     820:	0e 94 80 08 	call	0x1100	; 0x1100 <__fixsfsi>
     824:	dc 01       	movw	r26, r24
     826:	cb 01       	movw	r24, r22
		value = (value - 500) / 10;
     828:	84 5f       	subi	r24, 0xF4	; 244
     82a:	91 40       	sbci	r25, 0x01	; 1
		printf("task_tc1047a() : current temperature ? %d degree.\n", value);
     82c:	00 d0       	rcall	.+0      	; 0x82e <task_tc1047a+0x74>
     82e:	0f 92       	push	r0
     830:	26 e7       	ldi	r18, 0x76	; 118
     832:	32 e0       	ldi	r19, 0x02	; 2
     834:	ed b7       	in	r30, 0x3d	; 61
     836:	fe b7       	in	r31, 0x3e	; 62
     838:	32 83       	std	Z+2, r19	; 0x02
     83a:	21 83       	std	Z+1, r18	; 0x01
  if (!strcmp(arg, ""))   // called from task_cmd or timer task
		adc_start();
	else  {                                // called from ISR()
		printf("value : %d",atoi(arg));
	  value = atoi(arg) * (1.1/1024) * 1000;
		value = (value - 500) / 10;
     83c:	6a e0       	ldi	r22, 0x0A	; 10
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	0e 94 90 0a 	call	0x1520	; 0x1520 <__divmodhi4>
		printf("task_tc1047a() : current temperature ? %d degree.\n", value);
     844:	74 83       	std	Z+4, r23	; 0x04
     846:	63 83       	std	Z+3, r22	; 0x03
     848:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <printf>
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
	}
}
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	08 95       	ret

0000085a <task_cmd>:
		return(0);
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return(1);
}
void task_cmd(void *arg){
     85a:	af 92       	push	r10
     85c:	bf 92       	push	r11
     85e:	cf 92       	push	r12
     860:	df 92       	push	r13
     862:	ef 92       	push	r14
     864:	ff 92       	push	r15
     866:	0f 93       	push	r16
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	cd b7       	in	r28, 0x3d	; 61
     870:	de b7       	in	r29, 0x3e	; 62
     872:	ca 54       	subi	r28, 0x4A	; 74
     874:	d0 40       	sbci	r29, 0x00	; 0
     876:	0f b6       	in	r0, 0x3f	; 63
     878:	f8 94       	cli
     87a:	de bf       	out	0x3e, r29	; 62
     87c:	0f be       	out	0x3f, r0	; 63
     87e:	cd bf       	out	0x3d, r28	; 61
	char buf[64], *cp0, *cp1, *cp2, *cp3;
	struct task task;
	int ms;
	if(gets(buf) == NULL){
     880:	ce 01       	movw	r24, r28
     882:	0b 96       	adiw	r24, 0x0b	; 11
     884:	0e 94 b3 0c 	call	0x1966	; 0x1966 <gets>
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	29 f1       	breq	.+74     	; 0x8d6 <task_cmd+0x7c>
		printf("$ "); return;
	}
	cp0 = strtok(buf, " \t\n\r");
     88c:	ce 01       	movw	r24, r28
     88e:	0b 96       	adiw	r24, 0x0b	; 11
     890:	6c ea       	ldi	r22, 0xAC	; 172
     892:	72 e0       	ldi	r23, 0x02	; 2
     894:	0e 94 3b 0c 	call	0x1876	; 0x1876 <strtok>
     898:	8c 01       	movw	r16, r24
	cp1 = strtok(NULL, " \t\n\r");
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	6c ea       	ldi	r22, 0xAC	; 172
     8a0:	72 e0       	ldi	r23, 0x02	; 2
     8a2:	0e 94 3b 0c 	call	0x1876	; 0x1876 <strtok>
     8a6:	7c 01       	movw	r14, r24
	cp2 = strtok(NULL, " \t\n\r");
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	6c ea       	ldi	r22, 0xAC	; 172
     8ae:	72 e0       	ldi	r23, 0x02	; 2
     8b0:	0e 94 3b 0c 	call	0x1876	; 0x1876 <strtok>
     8b4:	5c 01       	movw	r10, r24
	cp3 = strtok(NULL, " \t\n\r");
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	6c ea       	ldi	r22, 0xAC	; 172
     8bc:	72 e0       	ldi	r23, 0x02	; 2
     8be:	0e 94 3b 0c 	call	0x1876	; 0x1876 <strtok>
     8c2:	6c 01       	movw	r12, r24

	if (cp0 == NULL){
     8c4:	01 15       	cp	r16, r1
     8c6:	11 05       	cpc	r17, r1
     8c8:	99 f4       	brne	.+38     	; 0x8f0 <task_cmd+0x96>
		printf("!!!-111\n");
     8ca:	81 eb       	ldi	r24, 0xB1	; 177
     8cc:	92 e0       	ldi	r25, 0x02	; 2
     8ce:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <puts>
		tour_timer();
     8d2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <tour_timer>
		printf("$ ");
     8d6:	0f 92       	push	r0
     8d8:	0f 92       	push	r0
     8da:	89 ea       	ldi	r24, 0xA9	; 169
     8dc:	92 e0       	ldi	r25, 0x02	; 2
     8de:	ed b7       	in	r30, 0x3d	; 61
     8e0:	fe b7       	in	r31, 0x3e	; 62
     8e2:	92 83       	std	Z+2, r25	; 0x02
     8e4:	81 83       	std	Z+1, r24	; 0x01
     8e6:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <printf>
		return;
     8ea:	0f 90       	pop	r0
     8ec:	0f 90       	pop	r0
     8ee:	5d c0       	rjmp	.+186    	; 0x9aa <task_cmd+0x150>
	}
	if(!strcmp(cp0, "prime")){
     8f0:	c8 01       	movw	r24, r16
     8f2:	69 eb       	ldi	r22, 0xB9	; 185
     8f4:	72 e0       	ldi	r23, 0x02	; 2
     8f6:	0e 94 40 0c 	call	0x1880	; 0x1880 <strcmp>
     8fa:	00 97       	sbiw	r24, 0x00	; 0
     8fc:	21 f4       	brne	.+8      	; 0x906 <task_cmd+0xac>
		task_prime(cp1);
     8fe:	c7 01       	movw	r24, r14
     900:	0e 94 0f 03 	call	0x61e	; 0x61e <task_prime>
     904:	52 c0       	rjmp	.+164    	; 0x9aa <task_cmd+0x150>
	}
	else if (!strcmp(cp0, "tc1047a"))
     906:	c8 01       	movw	r24, r16
     908:	6f eb       	ldi	r22, 0xBF	; 191
     90a:	72 e0       	ldi	r23, 0x02	; 2
     90c:	0e 94 40 0c 	call	0x1880	; 0x1880 <strcmp>
     910:	00 97       	sbiw	r24, 0x00	; 0
     912:	29 f4       	brne	.+10     	; 0x91e <task_cmd+0xc4>
		task_tc1047a("");
     914:	87 ec       	ldi	r24, 0xC7	; 199
     916:	92 e0       	ldi	r25, 0x02	; 2
     918:	0e 94 dd 03 	call	0x7ba	; 0x7ba <task_tc1047a>
     91c:	46 c0       	rjmp	.+140    	; 0x9aa <task_cmd+0x150>
	else if(!strcmp(cp0, "timer")){
     91e:	c8 01       	movw	r24, r16
     920:	68 ec       	ldi	r22, 0xC8	; 200
     922:	72 e0       	ldi	r23, 0x02	; 2
     924:	0e 94 40 0c 	call	0x1880	; 0x1880 <strcmp>
     928:	00 97       	sbiw	r24, 0x00	; 0
     92a:	d9 f5       	brne	.+118    	; 0x9a2 <task_cmd+0x148>
		if(cp1 == NULL){
     92c:	e1 14       	cp	r14, r1
     92e:	f1 04       	cpc	r15, r1
     930:	29 f4       	brne	.+10     	; 0x93c <task_cmd+0xe2>
			printf("!!!-222\n");
     932:	8e ec       	ldi	r24, 0xCE	; 206
     934:	92 e0       	ldi	r25, 0x02	; 2
     936:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <puts>
     93a:	cd cf       	rjmp	.-102    	; 0x8d6 <task_cmd+0x7c>
			printf("$ ");
			return;
		}
		ms = atoi(cp1)/256;
     93c:	c7 01       	movw	r24, r14
     93e:	0e 94 1d 0c 	call	0x183a	; 0x183a <atoi>
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	71 e0       	ldi	r23, 0x01	; 1
     946:	0e 94 90 0a 	call	0x1520	; 0x1520 <__divmodhi4>
     94a:	8b 01       	movw	r16, r22
		if(!strcmp(cp2, "prime")){
     94c:	c5 01       	movw	r24, r10
     94e:	69 eb       	ldi	r22, 0xB9	; 185
     950:	72 e0       	ldi	r23, 0x02	; 2
     952:	0e 94 40 0c 	call	0x1880	; 0x1880 <strcmp>
     956:	00 97       	sbiw	r24, 0x00	; 0
     958:	19 f4       	brne	.+6      	; 0x960 <task_cmd+0x106>
			task.fun = task_prime;
     95a:	8f e0       	ldi	r24, 0x0F	; 15
     95c:	93 e0       	ldi	r25, 0x03	; 3
     95e:	09 c0       	rjmp	.+18     	; 0x972 <task_cmd+0x118>
			cli();
			insert_timer(&task, ms);
			sei();

		}
		else if(!strcmp(cp2, "led")){
     960:	c5 01       	movw	r24, r10
     962:	66 ed       	ldi	r22, 0xD6	; 214
     964:	72 e0       	ldi	r23, 0x02	; 2
     966:	0e 94 40 0c 	call	0x1880	; 0x1880 <strcmp>
     96a:	00 97       	sbiw	r24, 0x00	; 0
     96c:	b9 f4       	brne	.+46     	; 0x99c <task_cmd+0x142>
			task.fun = task_led;
     96e:	89 ef       	ldi	r24, 0xF9	; 249
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	9a 83       	std	Y+2, r25	; 0x02
     974:	89 83       	std	Y+1, r24	; 0x01
			if(cp3){
				strcpy(task.arg, cp3);
     976:	ce 01       	movw	r24, r28
     978:	03 96       	adiw	r24, 0x03	; 3
			sei();

		}
		else if(!strcmp(cp2, "led")){
			task.fun = task_led;
			if(cp3){
     97a:	c1 14       	cp	r12, r1
     97c:	d1 04       	cpc	r13, r1
     97e:	11 f0       	breq	.+4      	; 0x984 <task_cmd+0x12a>
				strcpy(task.arg, cp3);
     980:	b6 01       	movw	r22, r12
     982:	02 c0       	rjmp	.+4      	; 0x988 <task_cmd+0x12e>
			}
			else{
				strcpy(task.arg,"");
     984:	67 ec       	ldi	r22, 0xC7	; 199
     986:	72 e0       	ldi	r23, 0x02	; 2
     988:	0e 94 49 0c 	call	0x1892	; 0x1892 <strcpy>
			}
			cli();
     98c:	f8 94       	cli
			insert_timer(&task, ms);
     98e:	ce 01       	movw	r24, r28
     990:	01 96       	adiw	r24, 0x01	; 1
     992:	b8 01       	movw	r22, r16
     994:	0e 94 3f 05 	call	0xa7e	; 0xa7e <insert_timer>
			sei();
     998:	78 94       	sei
     99a:	07 c0       	rjmp	.+14     	; 0x9aa <task_cmd+0x150>
		}
		else{
			printf("!!!-333\n");
     99c:	8a ed       	ldi	r24, 0xDA	; 218
     99e:	92 e0       	ldi	r25, 0x02	; 2
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <task_cmd+0x14c>
		}

	}else{
		printf("!!!-444\n");
     9a2:	82 ee       	ldi	r24, 0xE2	; 226
     9a4:	92 e0       	ldi	r25, 0x02	; 2
     9a6:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <puts>
	}
}
     9aa:	c6 5b       	subi	r28, 0xB6	; 182
     9ac:	df 4f       	sbci	r29, 0xFF	; 255
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	f8 94       	cli
     9b2:	de bf       	out	0x3e, r29	; 62
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	cd bf       	out	0x3d, r28	; 61
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	ff 90       	pop	r15
     9c2:	ef 90       	pop	r14
     9c4:	df 90       	pop	r13
     9c6:	cf 90       	pop	r12
     9c8:	bf 90       	pop	r11
     9ca:	af 90       	pop	r10
     9cc:	08 95       	ret

000009ce <tour_timer>:
		cp->time -= tp->time;
		pp->link = tp;
		tp->link = cp;
	}
} 
 void tour_timer(){
     9ce:	ef 92       	push	r14
     9d0:	ff 92       	push	r15
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
 	struct timer *cp;
	int    total = 0; 
 
    printf("\n");
     9da:	8a e0       	ldi	r24, 0x0A	; 10
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <putchar>
	for (cp = Thead; cp != NULL; cp = cp->link) {
     9e2:	c0 91 23 04 	lds	r28, 0x0423
     9e6:	d0 91 24 04 	lds	r29, 0x0424
		tp->link = cp;
	}
} 
 void tour_timer(){
 	struct timer *cp;
	int    total = 0; 
     9ea:	00 e0       	ldi	r16, 0x00	; 0
     9ec:	10 e0       	ldi	r17, 0x00	; 0
 
    printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     9ee:	8a ee       	ldi	r24, 0xEA	; 234
     9f0:	e8 2e       	mov	r14, r24
     9f2:	82 e0       	ldi	r24, 0x02	; 2
     9f4:	f8 2e       	mov	r15, r24
 void tour_timer(){
 	struct timer *cp;
	int    total = 0; 
 
    printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
     9f6:	20 c0       	rjmp	.+64     	; 0xa38 <tour_timer+0x6a>
		total += cp->time;
     9f8:	88 81       	ld	r24, Y
     9fa:	99 81       	ldd	r25, Y+1	; 0x01
     9fc:	08 0f       	add	r16, r24
     9fe:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     a00:	00 d0       	rcall	.+0      	; 0xa02 <tour_timer+0x34>
     a02:	00 d0       	rcall	.+0      	; 0xa04 <tour_timer+0x36>
     a04:	ed b7       	in	r30, 0x3d	; 61
     a06:	fe b7       	in	r31, 0x3e	; 62
     a08:	31 96       	adiw	r30, 0x01	; 1
     a0a:	ad b7       	in	r26, 0x3d	; 61
     a0c:	be b7       	in	r27, 0x3e	; 62
     a0e:	12 96       	adiw	r26, 0x02	; 2
     a10:	fc 92       	st	X, r15
     a12:	ee 92       	st	-X, r14
     a14:	11 97       	sbiw	r26, 0x01	; 1
     a16:	93 83       	std	Z+3, r25	; 0x03
     a18:	82 83       	std	Z+2, r24	; 0x02
     a1a:	15 83       	std	Z+5, r17	; 0x05
     a1c:	04 83       	std	Z+4, r16	; 0x04
     a1e:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <printf>
 void tour_timer(){
 	struct timer *cp;
	int    total = 0; 
 
    printf("\n");
	for (cp = Thead; cp != NULL; cp = cp->link) {
     a22:	0c 84       	ldd	r0, Y+12	; 0x0c
     a24:	dd 85       	ldd	r29, Y+13	; 0x0d
     a26:	c0 2d       	mov	r28, r0
     a28:	8d b7       	in	r24, 0x3d	; 61
     a2a:	9e b7       	in	r25, 0x3e	; 62
     a2c:	06 96       	adiw	r24, 0x06	; 6
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	9e bf       	out	0x3e, r25	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	8d bf       	out	0x3d, r24	; 61
     a38:	20 97       	sbiw	r28, 0x00	; 0
     a3a:	f1 f6       	brne	.-68     	; 0x9f8 <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     a3c:	8a e0       	ldi	r24, 0x0A	; 10
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <putchar>
} 
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	ff 90       	pop	r15
     a4e:	ef 90       	pop	r14
     a50:	08 95       	ret

00000a52 <free_timer>:
 
 void free_timer(){
 	struct timer *cp; 
 	for (  ; Thead != NULL; ){
     a52:	09 c0       	rjmp	.+18     	; 0xa66 <free_timer+0x14>
		cp = Thead;
		Thead = cp->link;
     a54:	fc 01       	movw	r30, r24
     a56:	24 85       	ldd	r18, Z+12	; 0x0c
     a58:	35 85       	ldd	r19, Z+13	; 0x0d
     a5a:	30 93 24 04 	sts	0x0424, r19
     a5e:	20 93 23 04 	sts	0x0423, r18
		free(cp);
     a62:	0e 94 84 0b 	call	0x1708	; 0x1708 <free>
	printf("\n");
} 
 
 void free_timer(){
 	struct timer *cp; 
 	for (  ; Thead != NULL; ){
     a66:	80 91 23 04 	lds	r24, 0x0423
     a6a:	90 91 24 04 	lds	r25, 0x0424
     a6e:	00 97       	sbiw	r24, 0x00	; 0
     a70:	89 f7       	brne	.-30     	; 0xa54 <free_timer+0x2>
		cp = Thead;
		Thead = cp->link;
		free(cp);
	}
} 
     a72:	08 95       	ret

00000a74 <get_timer>:

struct timer *get_timer()
{
	struct timer *tp; 
    tp = (struct timer *)malloc(sizeof(*tp));
     a74:	8e e0       	ldi	r24, 0x0E	; 14
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <malloc>
	return(tp);
}
     a7c:	08 95       	ret

00000a7e <insert_timer>:

#include "task.h"
#include "timer.h"
struct timer *Thead = NULL;

void insert_timer(struct task *tskp, int ms){
     a7e:	ef 92       	push	r14
     a80:	ff 92       	push	r15
     a82:	0f 93       	push	r16
     a84:	1f 93       	push	r17
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	f8 2e       	mov	r15, r24
     a8c:	e9 2e       	mov	r14, r25
     a8e:	8b 01       	movw	r16, r22
	int total;
	struct timer *tp, *cp, *pp;
	tp = get_timer();
     a90:	0e 94 3a 05 	call	0xa74	; 0xa74 <get_timer>
     a94:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     a96:	dc 01       	movw	r26, r24
     a98:	12 96       	adiw	r26, 0x02	; 2
     a9a:	ef 2d       	mov	r30, r15
     a9c:	fe 2d       	mov	r31, r14
     a9e:	8a e0       	ldi	r24, 0x0A	; 10
     aa0:	01 90       	ld	r0, Z+
     aa2:	0d 92       	st	X+, r0
     aa4:	81 50       	subi	r24, 0x01	; 1
     aa6:	e1 f7       	brne	.-8      	; 0xaa0 <insert_timer+0x22>
	tp->time = ms; 
     aa8:	19 83       	std	Y+1, r17	; 0x01
     aaa:	08 83       	st	Y, r16
 
    if (Thead == NULL) {
     aac:	e0 91 23 04 	lds	r30, 0x0423
     ab0:	f0 91 24 04 	lds	r31, 0x0424
     ab4:	30 97       	sbiw	r30, 0x00	; 0
     ab6:	29 f4       	brne	.+10     	; 0xac2 <insert_timer+0x44>
		Thead = tp, tp->link = NULL;
     ab8:	d0 93 24 04 	sts	0x0424, r29
     abc:	c0 93 23 04 	sts	0x0423, r28
     ac0:	2f c0       	rjmp	.+94     	; 0xb20 <insert_timer+0xa2>
	struct timer *tp, *cp, *pp;
	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms; 
 
    if (Thead == NULL) {
     ac2:	40 e0       	ldi	r20, 0x00	; 0
     ac4:	50 e0       	ldi	r21, 0x00	; 0
     ac6:	20 e0       	ldi	r18, 0x00	; 0
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	01 c0       	rjmp	.+2      	; 0xace <insert_timer+0x50>
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     acc:	fd 01       	movw	r30, r26
		total += cp->time;
     ace:	80 81       	ld	r24, Z
     ad0:	91 81       	ldd	r25, Z+1	; 0x01
     ad2:	28 0f       	add	r18, r24
     ad4:	39 1f       	adc	r19, r25
		if (total >= ms)
     ad6:	20 17       	cp	r18, r16
     ad8:	31 07       	cpc	r19, r17
     ada:	34 f4       	brge	.+12     	; 0xae8 <insert_timer+0x6a>
    if (Thead == NULL) {
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     adc:	a4 85       	ldd	r26, Z+12	; 0x0c
     ade:	b5 85       	ldd	r27, Z+13	; 0x0d
     ae0:	af 01       	movw	r20, r30
     ae2:	10 97       	sbiw	r26, 0x00	; 0
     ae4:	99 f7       	brne	.-26     	; 0xacc <insert_timer+0x4e>
     ae6:	01 c0       	rjmp	.+2      	; 0xaea <insert_timer+0x6c>
		total += cp->time;
		if (total >= ms)
     ae8:	df 01       	movw	r26, r30
			break;
        pp = cp;
    }      
    if (pp == NULL) {
     aea:	41 15       	cp	r20, r1
     aec:	51 05       	cpc	r21, r1
     aee:	79 f4       	brne	.+30     	; 0xb0e <insert_timer+0x90>
		cp->time -= tp->time;
     af0:	8d 91       	ld	r24, X+
     af2:	9c 91       	ld	r25, X
     af4:	11 97       	sbiw	r26, 0x01	; 1
     af6:	80 1b       	sub	r24, r16
     af8:	91 0b       	sbc	r25, r17
     afa:	11 96       	adiw	r26, 0x01	; 1
     afc:	9c 93       	st	X, r25
     afe:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     b00:	bd 87       	std	Y+13, r27	; 0x0d
     b02:	ac 87       	std	Y+12, r26	; 0x0c
     b04:	d0 93 24 04 	sts	0x0424, r29
     b08:	c0 93 23 04 	sts	0x0423, r28
     b0c:	24 c0       	rjmp	.+72     	; 0xb56 <insert_timer+0xd8>
	}
	else if (cp == NULL) {
     b0e:	10 97       	sbiw	r26, 0x00	; 0
     b10:	51 f4       	brne	.+20     	; 0xb26 <insert_timer+0xa8>
		tp->time -= total; // pp->time
     b12:	02 1b       	sub	r16, r18
     b14:	13 0b       	sbc	r17, r19
     b16:	19 83       	std	Y+1, r17	; 0x01
     b18:	08 83       	st	Y, r16
		pp->link = tp;
     b1a:	fa 01       	movw	r30, r20
     b1c:	d5 87       	std	Z+13, r29	; 0x0d
     b1e:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     b20:	1d 86       	std	Y+13, r1	; 0x0d
     b22:	1c 86       	std	Y+12, r1	; 0x0c
     b24:	18 c0       	rjmp	.+48     	; 0xb56 <insert_timer+0xd8>
	}
	else {
		total -= cp->time; // just before
     b26:	8d 91       	ld	r24, X+
     b28:	9c 91       	ld	r25, X
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	b9 01       	movw	r22, r18
     b2e:	68 1b       	sub	r22, r24
     b30:	79 0b       	sbc	r23, r25
		tp->time -= total;
     b32:	98 01       	movw	r18, r16
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	39 83       	std	Y+1, r19	; 0x01
     b3a:	28 83       	st	Y, r18
		cp->time -= tp->time;
     b3c:	8d 91       	ld	r24, X+
     b3e:	9c 91       	ld	r25, X
     b40:	11 97       	sbiw	r26, 0x01	; 1
     b42:	82 1b       	sub	r24, r18
     b44:	93 0b       	sbc	r25, r19
     b46:	11 96       	adiw	r26, 0x01	; 1
     b48:	9c 93       	st	X, r25
     b4a:	8e 93       	st	-X, r24
		pp->link = tp;
     b4c:	fa 01       	movw	r30, r20
     b4e:	d5 87       	std	Z+13, r29	; 0x0d
     b50:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     b52:	bd 87       	std	Y+13, r27	; 0x0d
     b54:	ac 87       	std	Y+12, r26	; 0x0c
	}
} 
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	1f 91       	pop	r17
     b5c:	0f 91       	pop	r16
     b5e:	ff 90       	pop	r15
     b60:	ef 90       	pop	r14
     b62:	08 95       	ret

00000b64 <timer_init>:
	struct timer   *link;
};*/ 
 
 
void timer_init() {
	TCNT2 = 0; // Initialize   Timer/Counter2
     b64:	10 92 b2 00 	sts	0x00B2, r1
	sbi(ASSR, AS2);// Asynchronous Timer/Counter2
     b68:	e6 eb       	ldi	r30, 0xB6	; 182
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	80 62       	ori	r24, 0x20	; 32
     b70:	80 83       	st	Z, r24
	sbi(TIMSK2, TOIE2);  // Timer2 Overflow Int. Enable 
     b72:	e0 e7       	ldi	r30, 0x70	; 112
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	81 60       	ori	r24, 0x01	; 1
     b7a:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20); sbi(TCCR2B, CS21); // 32KHz/32 prescaling, Start
     b7c:	e1 eb       	ldi	r30, 0xB1	; 177
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	81 60       	ori	r24, 0x01	; 1
     b84:	80 83       	st	Z, r24
     b86:	80 81       	ld	r24, Z
     b88:	82 60       	ori	r24, 0x02	; 2
     b8a:	80 83       	st	Z, r24
}
     b8c:	08 95       	ret

00000b8e <timer_expire>:
void timer_expire(void){
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
	struct timer *tp;

	for(; Thead != NULL && Thead->time==0;){
     b92:	0d c0       	rjmp	.+26     	; 0xbae <timer_expire+0x20>

		tp = Thead, Thead = tp->link;
     b94:	8c 85       	ldd	r24, Y+12	; 0x0c
     b96:	9d 85       	ldd	r25, Y+13	; 0x0d
     b98:	90 93 24 04 	sts	0x0424, r25
     b9c:	80 93 23 04 	sts	0x0423, r24
		
		task_insert(&tp->task);
     ba0:	ce 01       	movw	r24, r28
     ba2:	02 96       	adiw	r24, 0x02	; 2
     ba4:	0e 94 68 03 	call	0x6d0	; 0x6d0 <task_insert>

		free(tp);
     ba8:	ce 01       	movw	r24, r28
     baa:	0e 94 84 0b 	call	0x1708	; 0x1708 <free>
	sbi(TCCR2B, CS20); sbi(TCCR2B, CS21); // 32KHz/32 prescaling, Start
}
void timer_expire(void){
	struct timer *tp;

	for(; Thead != NULL && Thead->time==0;){
     bae:	c0 91 23 04 	lds	r28, 0x0423
     bb2:	d0 91 24 04 	lds	r29, 0x0424
     bb6:	20 97       	sbiw	r28, 0x00	; 0
     bb8:	21 f0       	breq	.+8      	; 0xbc2 <timer_expire+0x34>
     bba:	88 81       	ld	r24, Y
     bbc:	99 81       	ldd	r25, Y+1	; 0x01
     bbe:	00 97       	sbiw	r24, 0x00	; 0
     bc0:	49 f3       	breq	.-46     	; 0xb94 <timer_expire+0x6>
		
		task_insert(&tp->task);

		free(tp);
	}
}
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret

00000bc8 <__vector_15>:
ISR(TIMER2_OVF_vect){
     bc8:	1f 92       	push	r1
     bca:	0f 92       	push	r0
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	0f 92       	push	r0
     bd0:	0b b6       	in	r0, 0x3b	; 59
     bd2:	0f 92       	push	r0
     bd4:	11 24       	eor	r1, r1
     bd6:	2f 93       	push	r18
     bd8:	3f 93       	push	r19
     bda:	4f 93       	push	r20
     bdc:	5f 93       	push	r21
     bde:	6f 93       	push	r22
     be0:	7f 93       	push	r23
     be2:	8f 93       	push	r24
     be4:	9f 93       	push	r25
     be6:	af 93       	push	r26
     be8:	bf 93       	push	r27
     bea:	ef 93       	push	r30
     bec:	ff 93       	push	r31
			led_off_all();
			led = 0;
			onesec = 0;
		}
	}*/
	if(!Thead)
     bee:	e0 91 23 04 	lds	r30, 0x0423
     bf2:	f0 91 24 04 	lds	r31, 0x0424
     bf6:	30 97       	sbiw	r30, 0x00	; 0
     bf8:	49 f0       	breq	.+18     	; 0xc0c <__vector_15+0x44>
		return;
	if(--Thead->time == 0)
     bfa:	80 81       	ld	r24, Z
     bfc:	91 81       	ldd	r25, Z+1	; 0x01
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	91 83       	std	Z+1, r25	; 0x01
     c02:	80 83       	st	Z, r24
     c04:	00 97       	sbiw	r24, 0x00	; 0
     c06:	11 f4       	brne	.+4      	; 0xc0c <__vector_15+0x44>
		timer_expire();
     c08:	0e 94 c7 05 	call	0xb8e	; 0xb8e <timer_expire>
}
     c0c:	ff 91       	pop	r31
     c0e:	ef 91       	pop	r30
     c10:	bf 91       	pop	r27
     c12:	af 91       	pop	r26
     c14:	9f 91       	pop	r25
     c16:	8f 91       	pop	r24
     c18:	7f 91       	pop	r23
     c1a:	6f 91       	pop	r22
     c1c:	5f 91       	pop	r21
     c1e:	4f 91       	pop	r20
     c20:	3f 91       	pop	r19
     c22:	2f 91       	pop	r18
     c24:	0f 90       	pop	r0
     c26:	0b be       	out	0x3b, r0	; 59
     c28:	0f 90       	pop	r0
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	0f 90       	pop	r0
     c2e:	1f 90       	pop	r1
     c30:	18 95       	reti

00000c32 <uart_getchar>:
}
int uart_getchar(FILE *stream)
{
	char ch;
 	do {
 		cli();
     c32:	f8 94       	cli
 		ch = qi_delete();
     c34:	0e 94 b3 02 	call	0x566	; 0x566 <qi_delete>
 		sei();
     c38:	78 94       	sei
 	} while (ch == 0);
     c3a:	88 23       	and	r24, r24
     c3c:	d1 f3       	breq	.-12     	; 0xc32 <uart_getchar>
 	if (ch == ETX) return(-1);
     c3e:	84 30       	cpi	r24, 0x04	; 4
     c40:	11 f0       	breq	.+4      	; 0xc46 <uart_getchar+0x14>
 	else return(ch);
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	08 95       	ret
 	do {
 		cli();
 		ch = qi_delete();
 		sei();
 	} while (ch == 0);
 	if (ch == ETX) return(-1);
     c46:	8f ef       	ldi	r24, 0xFF	; 255
     c48:	9f ef       	ldi	r25, 0xFF	; 255
 	else return(ch);
 }
     c4a:	08 95       	ret

00000c4c <uart_putchar>:
	 sbi(UCSR0B, RXEN0); // RX enable
 	 sbi(UCSR0B, RXCIE0); // RX complete interrupt enable 
 }

int uart_putchar(char ch, FILE *stream)
{
     c4c:	cf 93       	push	r28
     c4e:	c8 2f       	mov	r28, r24

	 if (ch == '\n')
     c50:	8a 30       	cpi	r24, 0x0A	; 10
     c52:	19 f4       	brne	.+6      	; 0xc5a <uart_putchar+0xe>
	 	uart_putchar('\r', stream);
     c54:	8d e0       	ldi	r24, 0x0D	; 13
     c56:	0e 94 26 06 	call	0xc4c	; 0xc4c <uart_putchar>
	 cli(); /* clear interrupt flag */
     c5a:	f8 94       	cli
	 if (!uart_busy) {
     c5c:	80 91 d5 06 	lds	r24, 0x06D5
     c60:	88 23       	and	r24, r24
     c62:	59 f4       	brne	.+22     	; 0xc7a <uart_putchar+0x2e>
	 	UDR0 = ch;
     c64:	c0 93 c6 00 	sts	0x00C6, r28
	 	uart_busy = 1;
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	80 93 d5 06 	sts	0x06D5, r24
     c6e:	0a c0       	rjmp	.+20     	; 0xc84 <uart_putchar+0x38>
	 }
	 else {
	 	while(qo_insert(ch) == 0) {
	 		sei();
     c70:	78 94       	sei
     c72:	86 ef       	ldi	r24, 0xF6	; 246
     c74:	8a 95       	dec	r24
     c76:	f1 f7       	brne	.-4      	; 0xc74 <uart_putchar+0x28>
	 		_delay_us(100);
	 		cli();
     c78:	f8 94       	cli
	 if (!uart_busy) {
	 	UDR0 = ch;
	 	uart_busy = 1;
	 }
	 else {
	 	while(qo_insert(ch) == 0) {
     c7a:	8c 2f       	mov	r24, r28
     c7c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <qo_insert>
     c80:	00 97       	sbiw	r24, 0x00	; 0
     c82:	b1 f3       	breq	.-20     	; 0xc70 <uart_putchar+0x24>
	 		sei();
	 		_delay_us(100);
	 		cli();
	 	}
	 }
	 sei(); /* set interrupt flag */
     c84:	78 94       	sei
	 return(1);
}
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	cf 91       	pop	r28
     c8c:	08 95       	ret

00000c8e <uart_init>:
 FILE Mystdin = FDEV_SETUP_STREAM (NULL, uart_getchar,_FDEV_SETUP_READ);
 unsigned char uart_busy;

 void uart_init()
 {
 	 stdin = &Mystdin;
     c8e:	86 ef       	ldi	r24, 0xF6	; 246
     c90:	92 e0       	ldi	r25, 0x02	; 2
     c92:	90 93 db 06 	sts	0x06DB, r25
     c96:	80 93 da 06 	sts	0x06DA, r24
	 stdout = &Mystdout;
     c9a:	84 e0       	ldi	r24, 0x04	; 4
     c9c:	93 e0       	ldi	r25, 0x03	; 3
     c9e:	90 93 dd 06 	sts	0x06DD, r25
     ca2:	80 93 dc 06 	sts	0x06DC, r24
	 q_init();
     ca6:	0e 94 80 02 	call	0x500	; 0x500 <q_init>
	 uart_busy = 0; // false
     caa:	10 92 d5 06 	sts	0x06D5, r1
	 UBRR0H = 0x00; UBRR0L = 0x07;
     cae:	10 92 c5 00 	sts	0x00C5, r1
     cb2:	87 e0       	ldi	r24, 0x07	; 7
     cb4:	80 93 c4 00 	sts	0x00C4, r24
	 sbi(UCSR0A, U2X0); // UCSR)A |= (1 << U2X0);
     cb8:	e0 ec       	ldi	r30, 0xC0	; 192
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	82 60       	ori	r24, 0x02	; 2
     cc0:	80 83       	st	Z, r24
	 sbi(UCSR0B, TXEN0);
     cc2:	e1 ec       	ldi	r30, 0xC1	; 193
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	88 60       	ori	r24, 0x08	; 8
     cca:	80 83       	st	Z, r24
	 sbi(UCSR0B, TXCIE0);
     ccc:	80 81       	ld	r24, Z
     cce:	80 64       	ori	r24, 0x40	; 64
     cd0:	80 83       	st	Z, r24
	 sbi(UCSR0B, RXEN0); // RX enable
     cd2:	80 81       	ld	r24, Z
     cd4:	80 61       	ori	r24, 0x10	; 16
     cd6:	80 83       	st	Z, r24
 	 sbi(UCSR0B, RXCIE0); // RX complete interrupt enable 
     cd8:	80 81       	ld	r24, Z
     cda:	80 68       	ori	r24, 0x80	; 128
     cdc:	80 83       	st	Z, r24
 }
     cde:	08 95       	ret

00000ce0 <uart_echo>:
 	} while (ch == 0);
 	if (ch == ETX) return(-1);
 	else return(ch);
 }
 void uart_echo(char ch)
 {
     ce0:	cf 93       	push	r28
     ce2:	c8 2f       	mov	r28, r24
 	if (ch == '\n') uart_echo('\r');
     ce4:	8a 30       	cpi	r24, 0x0A	; 10
     ce6:	19 f4       	brne	.+6      	; 0xcee <uart_echo+0xe>
     ce8:	8d e0       	ldi	r24, 0x0D	; 13
     cea:	0e 94 70 06 	call	0xce0	; 0xce0 <uart_echo>
 	if (!uart_busy) {
     cee:	80 91 d5 06 	lds	r24, 0x06D5
     cf2:	88 23       	and	r24, r24
     cf4:	31 f4       	brne	.+12     	; 0xd02 <uart_echo+0x22>
 		UDR0 = ch;
     cf6:	c0 93 c6 00 	sts	0x00C6, r28
 		uart_busy = 1;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	80 93 d5 06 	sts	0x06D5, r24
     d00:	03 c0       	rjmp	.+6      	; 0xd08 <uart_echo+0x28>
 	}
 	else
 	qo_insert(ch);
     d02:	8c 2f       	mov	r24, r28
     d04:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <qo_insert>
 }
     d08:	cf 91       	pop	r28
     d0a:	08 95       	ret

00000d0c <__vector_27>:

ISR(USART0_TX_vect)
{
     d0c:	1f 92       	push	r1
     d0e:	0f 92       	push	r0
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	0f 92       	push	r0
     d14:	0b b6       	in	r0, 0x3b	; 59
     d16:	0f 92       	push	r0
     d18:	11 24       	eor	r1, r1
     d1a:	2f 93       	push	r18
     d1c:	3f 93       	push	r19
     d1e:	4f 93       	push	r20
     d20:	5f 93       	push	r21
     d22:	6f 93       	push	r22
     d24:	7f 93       	push	r23
     d26:	8f 93       	push	r24
     d28:	9f 93       	push	r25
     d2a:	af 93       	push	r26
     d2c:	bf 93       	push	r27
     d2e:	ef 93       	push	r30
     d30:	ff 93       	push	r31
	 char ch;
	 if ((ch = qo_delete()) == 0)
     d32:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <qo_delete>
     d36:	88 23       	and	r24, r24
     d38:	19 f4       	brne	.+6      	; 0xd40 <__vector_27+0x34>
	 	uart_busy = 0;
     d3a:	10 92 d5 06 	sts	0x06D5, r1
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <__vector_27+0x38>
	 else
		UDR0 = ch;
     d40:	80 93 c6 00 	sts	0x00C6, r24
} 
     d44:	ff 91       	pop	r31
     d46:	ef 91       	pop	r30
     d48:	bf 91       	pop	r27
     d4a:	af 91       	pop	r26
     d4c:	9f 91       	pop	r25
     d4e:	8f 91       	pop	r24
     d50:	7f 91       	pop	r23
     d52:	6f 91       	pop	r22
     d54:	5f 91       	pop	r21
     d56:	4f 91       	pop	r20
     d58:	3f 91       	pop	r19
     d5a:	2f 91       	pop	r18
     d5c:	0f 90       	pop	r0
     d5e:	0b be       	out	0x3b, r0	; 59
     d60:	0f 90       	pop	r0
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	0f 90       	pop	r0
     d66:	1f 90       	pop	r1
     d68:	18 95       	reti

00000d6a <__vector_25>:
ISR(USART0_RX_vect)
{
     d6a:	1f 92       	push	r1
     d6c:	0f 92       	push	r0
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	0f 92       	push	r0
     d72:	0b b6       	in	r0, 0x3b	; 59
     d74:	0f 92       	push	r0
     d76:	11 24       	eor	r1, r1
     d78:	1f 93       	push	r17
     d7a:	2f 93       	push	r18
     d7c:	3f 93       	push	r19
     d7e:	4f 93       	push	r20
     d80:	5f 93       	push	r21
     d82:	6f 93       	push	r22
     d84:	7f 93       	push	r23
     d86:	8f 93       	push	r24
     d88:	9f 93       	push	r25
     d8a:	af 93       	push	r26
     d8c:	bf 93       	push	r27
     d8e:	ef 93       	push	r30
     d90:	ff 93       	push	r31
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
     d9a:	2a 97       	sbiw	r28, 0x0a	; 10
     d9c:	de bf       	out	0x3e, r29	; 62
     d9e:	cd bf       	out	0x3d, r28	; 61
	struct task task;
 	char ch;
 	ch = UDR0;
     da0:	10 91 c6 00 	lds	r17, 0x00C6
	if (ch != ETX) {
     da4:	14 30       	cpi	r17, 0x04	; 4
     da6:	31 f0       	breq	.+12     	; 0xdb4 <__vector_25+0x4a>
 		if (ch == '\r')
     da8:	1d 30       	cpi	r17, 0x0D	; 13
     daa:	09 f4       	brne	.+2      	; 0xdae <__vector_25+0x44>
 		ch = '\n';
     dac:	1a e0       	ldi	r17, 0x0A	; 10
 		uart_echo(ch);
     dae:	81 2f       	mov	r24, r17
     db0:	0e 94 70 06 	call	0xce0	; 0xce0 <uart_echo>
 	}

 	qi_insert(ch);
     db4:	81 2f       	mov	r24, r17
     db6:	0e 94 91 02 	call	0x522	; 0x522 <qi_insert>
	if(ch == ETX || ch == '\n'){
     dba:	14 30       	cpi	r17, 0x04	; 4
     dbc:	11 f0       	breq	.+4      	; 0xdc2 <__vector_25+0x58>
     dbe:	1a 30       	cpi	r17, 0x0A	; 10
     dc0:	71 f4       	brne	.+28     	; 0xdde <__vector_25+0x74>
		task.fun = task_cmd;
     dc2:	8d e2       	ldi	r24, 0x2D	; 45
     dc4:	94 e0       	ldi	r25, 0x04	; 4
     dc6:	9a 83       	std	Y+2, r25	; 0x02
     dc8:	89 83       	std	Y+1, r24	; 0x01
		strcpy(task.arg, "");
     dca:	ce 01       	movw	r24, r28
     dcc:	03 96       	adiw	r24, 0x03	; 3
     dce:	65 ef       	ldi	r22, 0xF5	; 245
     dd0:	72 e0       	ldi	r23, 0x02	; 2
     dd2:	0e 94 49 0c 	call	0x1892	; 0x1892 <strcpy>
		task_insert(&task);
     dd6:	ce 01       	movw	r24, r28
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	0e 94 68 03 	call	0x6d0	; 0x6d0 <task_insert>
	}
}
     dde:	2a 96       	adiw	r28, 0x0a	; 10
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	cd bf       	out	0x3d, r28	; 61
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	ff 91       	pop	r31
     dea:	ef 91       	pop	r30
     dec:	bf 91       	pop	r27
     dee:	af 91       	pop	r26
     df0:	9f 91       	pop	r25
     df2:	8f 91       	pop	r24
     df4:	7f 91       	pop	r23
     df6:	6f 91       	pop	r22
     df8:	5f 91       	pop	r21
     dfa:	4f 91       	pop	r20
     dfc:	3f 91       	pop	r19
     dfe:	2f 91       	pop	r18
     e00:	1f 91       	pop	r17
     e02:	0f 90       	pop	r0
     e04:	0b be       	out	0x3b, r0	; 59
     e06:	0f 90       	pop	r0
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	0f 90       	pop	r0
     e0c:	1f 90       	pop	r1
     e0e:	18 95       	reti

00000e10 <__mulsf3>:
     e10:	a0 e2       	ldi	r26, 0x20	; 32
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	ee e0       	ldi	r30, 0x0E	; 14
     e16:	f7 e0       	ldi	r31, 0x07	; 7
     e18:	0c 94 b9 0a 	jmp	0x1572	; 0x1572 <__prologue_saves__+0x4>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	8d 83       	std	Y+5, r24	; 0x05
     e22:	9e 83       	std	Y+6, r25	; 0x06
     e24:	af 83       	std	Y+7, r26	; 0x07
     e26:	b8 87       	std	Y+8, r27	; 0x08
     e28:	29 83       	std	Y+1, r18	; 0x01
     e2a:	3a 83       	std	Y+2, r19	; 0x02
     e2c:	4b 83       	std	Y+3, r20	; 0x03
     e2e:	5c 83       	std	Y+4, r21	; 0x04
     e30:	ce 01       	movw	r24, r28
     e32:	05 96       	adiw	r24, 0x05	; 5
     e34:	be 01       	movw	r22, r28
     e36:	67 5e       	subi	r22, 0xE7	; 231
     e38:	7f 4f       	sbci	r23, 0xFF	; 255
     e3a:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__unpack_f>
     e3e:	ce 01       	movw	r24, r28
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	be 01       	movw	r22, r28
     e44:	6f 5e       	subi	r22, 0xEF	; 239
     e46:	7f 4f       	sbci	r23, 0xFF	; 255
     e48:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__unpack_f>
     e4c:	99 8d       	ldd	r25, Y+25	; 0x19
     e4e:	92 30       	cpi	r25, 0x02	; 2
     e50:	78 f0       	brcs	.+30     	; 0xe70 <__mulsf3+0x60>
     e52:	89 89       	ldd	r24, Y+17	; 0x11
     e54:	82 30       	cpi	r24, 0x02	; 2
     e56:	c0 f0       	brcs	.+48     	; 0xe88 <__mulsf3+0x78>
     e58:	94 30       	cpi	r25, 0x04	; 4
     e5a:	19 f4       	brne	.+6      	; 0xe62 <__mulsf3+0x52>
     e5c:	82 30       	cpi	r24, 0x02	; 2
     e5e:	41 f4       	brne	.+16     	; 0xe70 <__mulsf3+0x60>
     e60:	ca c0       	rjmp	.+404    	; 0xff6 <__mulsf3+0x1e6>
     e62:	84 30       	cpi	r24, 0x04	; 4
     e64:	19 f4       	brne	.+6      	; 0xe6c <__mulsf3+0x5c>
     e66:	92 30       	cpi	r25, 0x02	; 2
     e68:	79 f4       	brne	.+30     	; 0xe88 <__mulsf3+0x78>
     e6a:	c5 c0       	rjmp	.+394    	; 0xff6 <__mulsf3+0x1e6>
     e6c:	92 30       	cpi	r25, 0x02	; 2
     e6e:	51 f4       	brne	.+20     	; 0xe84 <__mulsf3+0x74>
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	2a 8d       	ldd	r18, Y+26	; 0x1a
     e74:	9a 89       	ldd	r25, Y+18	; 0x12
     e76:	29 17       	cp	r18, r25
     e78:	09 f4       	brne	.+2      	; 0xe7c <__mulsf3+0x6c>
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	8a 8f       	std	Y+26, r24	; 0x1a
     e7e:	ce 01       	movw	r24, r28
     e80:	49 96       	adiw	r24, 0x19	; 25
     e82:	bb c0       	rjmp	.+374    	; 0xffa <__mulsf3+0x1ea>
     e84:	82 30       	cpi	r24, 0x02	; 2
     e86:	51 f4       	brne	.+20     	; 0xe9c <__mulsf3+0x8c>
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	2a 8d       	ldd	r18, Y+26	; 0x1a
     e8c:	9a 89       	ldd	r25, Y+18	; 0x12
     e8e:	29 17       	cp	r18, r25
     e90:	09 f4       	brne	.+2      	; 0xe94 <__mulsf3+0x84>
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	8a 8b       	std	Y+18, r24	; 0x12
     e96:	ce 01       	movw	r24, r28
     e98:	41 96       	adiw	r24, 0x11	; 17
     e9a:	af c0       	rjmp	.+350    	; 0xffa <__mulsf3+0x1ea>
     e9c:	4d 8c       	ldd	r4, Y+29	; 0x1d
     e9e:	5e 8c       	ldd	r5, Y+30	; 0x1e
     ea0:	6f 8c       	ldd	r6, Y+31	; 0x1f
     ea2:	78 a0       	lds	r23, 0x88
     ea4:	0d 89       	ldd	r16, Y+21	; 0x15
     ea6:	1e 89       	ldd	r17, Y+22	; 0x16
     ea8:	2f 89       	ldd	r18, Y+23	; 0x17
     eaa:	38 8d       	ldd	r19, Y+24	; 0x18
     eac:	e0 e2       	ldi	r30, 0x20	; 32
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	40 e0       	ldi	r20, 0x00	; 0
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	ba 01       	movw	r22, r20
     eb6:	88 24       	eor	r8, r8
     eb8:	99 24       	eor	r9, r9
     eba:	54 01       	movw	r10, r8
     ebc:	cc 24       	eor	r12, r12
     ebe:	dd 24       	eor	r13, r13
     ec0:	76 01       	movw	r14, r12
     ec2:	c2 01       	movw	r24, r4
     ec4:	81 70       	andi	r24, 0x01	; 1
     ec6:	90 70       	andi	r25, 0x00	; 0
     ec8:	00 97       	sbiw	r24, 0x00	; 0
     eca:	d1 f0       	breq	.+52     	; 0xf00 <__mulsf3+0xf0>
     ecc:	c0 0e       	add	r12, r16
     ece:	d1 1e       	adc	r13, r17
     ed0:	e2 1e       	adc	r14, r18
     ed2:	f3 1e       	adc	r15, r19
     ed4:	db 01       	movw	r26, r22
     ed6:	ca 01       	movw	r24, r20
     ed8:	88 0d       	add	r24, r8
     eda:	99 1d       	adc	r25, r9
     edc:	aa 1d       	adc	r26, r10
     ede:	bb 1d       	adc	r27, r11
     ee0:	41 e0       	ldi	r20, 0x01	; 1
     ee2:	50 e0       	ldi	r21, 0x00	; 0
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	c0 16       	cp	r12, r16
     eea:	d1 06       	cpc	r13, r17
     eec:	e2 06       	cpc	r14, r18
     eee:	f3 06       	cpc	r15, r19
     ef0:	18 f0       	brcs	.+6      	; 0xef8 <__mulsf3+0xe8>
     ef2:	40 e0       	ldi	r20, 0x00	; 0
     ef4:	50 e0       	ldi	r21, 0x00	; 0
     ef6:	ba 01       	movw	r22, r20
     ef8:	48 0f       	add	r20, r24
     efa:	59 1f       	adc	r21, r25
     efc:	6a 1f       	adc	r22, r26
     efe:	7b 1f       	adc	r23, r27
     f00:	88 0c       	add	r8, r8
     f02:	99 1c       	adc	r9, r9
     f04:	aa 1c       	adc	r10, r10
     f06:	bb 1c       	adc	r11, r11
     f08:	37 ff       	sbrs	r19, 7
     f0a:	08 c0       	rjmp	.+16     	; 0xf1c <__mulsf3+0x10c>
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	a0 e0       	ldi	r26, 0x00	; 0
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	88 2a       	or	r8, r24
     f16:	99 2a       	or	r9, r25
     f18:	aa 2a       	or	r10, r26
     f1a:	bb 2a       	or	r11, r27
     f1c:	00 0f       	add	r16, r16
     f1e:	11 1f       	adc	r17, r17
     f20:	22 1f       	adc	r18, r18
     f22:	33 1f       	adc	r19, r19
     f24:	76 94       	lsr	r7
     f26:	67 94       	ror	r6
     f28:	57 94       	ror	r5
     f2a:	47 94       	ror	r4
     f2c:	31 97       	sbiw	r30, 0x01	; 1
     f2e:	49 f6       	brne	.-110    	; 0xec2 <__mulsf3+0xb2>
     f30:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f32:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f34:	2b 89       	ldd	r18, Y+19	; 0x13
     f36:	3c 89       	ldd	r19, Y+20	; 0x14
     f38:	82 0f       	add	r24, r18
     f3a:	93 1f       	adc	r25, r19
     f3c:	02 96       	adiw	r24, 0x02	; 2
     f3e:	9c 87       	std	Y+12, r25	; 0x0c
     f40:	8b 87       	std	Y+11, r24	; 0x0b
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	2a 8d       	ldd	r18, Y+26	; 0x1a
     f46:	9a 89       	ldd	r25, Y+18	; 0x12
     f48:	29 17       	cp	r18, r25
     f4a:	09 f4       	brne	.+2      	; 0xf4e <__mulsf3+0x13e>
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	8a 87       	std	Y+10, r24	; 0x0a
     f50:	2b 85       	ldd	r18, Y+11	; 0x0b
     f52:	3c 85       	ldd	r19, Y+12	; 0x0c
     f54:	17 c0       	rjmp	.+46     	; 0xf84 <__mulsf3+0x174>
     f56:	ca 01       	movw	r24, r20
     f58:	81 70       	andi	r24, 0x01	; 1
     f5a:	90 70       	andi	r25, 0x00	; 0
     f5c:	00 97       	sbiw	r24, 0x00	; 0
     f5e:	61 f0       	breq	.+24     	; 0xf78 <__mulsf3+0x168>
     f60:	f6 94       	lsr	r15
     f62:	e7 94       	ror	r14
     f64:	d7 94       	ror	r13
     f66:	c7 94       	ror	r12
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	a0 e0       	ldi	r26, 0x00	; 0
     f6e:	b0 e8       	ldi	r27, 0x80	; 128
     f70:	c8 2a       	or	r12, r24
     f72:	d9 2a       	or	r13, r25
     f74:	ea 2a       	or	r14, r26
     f76:	fb 2a       	or	r15, r27
     f78:	76 95       	lsr	r23
     f7a:	67 95       	ror	r22
     f7c:	57 95       	ror	r21
     f7e:	47 95       	ror	r20
     f80:	2f 5f       	subi	r18, 0xFF	; 255
     f82:	3f 4f       	sbci	r19, 0xFF	; 255
     f84:	77 fd       	sbrc	r23, 7
     f86:	e7 cf       	rjmp	.-50     	; 0xf56 <__mulsf3+0x146>
     f88:	c9 01       	movw	r24, r18
     f8a:	0b c0       	rjmp	.+22     	; 0xfa2 <__mulsf3+0x192>
     f8c:	44 0f       	add	r20, r20
     f8e:	55 1f       	adc	r21, r21
     f90:	66 1f       	adc	r22, r22
     f92:	77 1f       	adc	r23, r23
     f94:	f7 fc       	sbrc	r15, 7
     f96:	41 60       	ori	r20, 0x01	; 1
     f98:	cc 0c       	add	r12, r12
     f9a:	dd 1c       	adc	r13, r13
     f9c:	ee 1c       	adc	r14, r14
     f9e:	ff 1c       	adc	r15, r15
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	40 30       	cpi	r20, 0x00	; 0
     fa4:	a0 e0       	ldi	r26, 0x00	; 0
     fa6:	5a 07       	cpc	r21, r26
     fa8:	a0 e0       	ldi	r26, 0x00	; 0
     faa:	6a 07       	cpc	r22, r26
     fac:	a0 e4       	ldi	r26, 0x40	; 64
     fae:	7a 07       	cpc	r23, r26
     fb0:	68 f3       	brcs	.-38     	; 0xf8c <__mulsf3+0x17c>
     fb2:	8b 87       	std	Y+11, r24	; 0x0b
     fb4:	9c 87       	std	Y+12, r25	; 0x0c
     fb6:	db 01       	movw	r26, r22
     fb8:	ca 01       	movw	r24, r20
     fba:	8f 77       	andi	r24, 0x7F	; 127
     fbc:	90 70       	andi	r25, 0x00	; 0
     fbe:	a0 70       	andi	r26, 0x00	; 0
     fc0:	b0 70       	andi	r27, 0x00	; 0
     fc2:	80 34       	cpi	r24, 0x40	; 64
     fc4:	91 05       	cpc	r25, r1
     fc6:	a1 05       	cpc	r26, r1
     fc8:	b1 05       	cpc	r27, r1
     fca:	61 f4       	brne	.+24     	; 0xfe4 <__mulsf3+0x1d4>
     fcc:	47 fd       	sbrc	r20, 7
     fce:	0a c0       	rjmp	.+20     	; 0xfe4 <__mulsf3+0x1d4>
     fd0:	c1 14       	cp	r12, r1
     fd2:	d1 04       	cpc	r13, r1
     fd4:	e1 04       	cpc	r14, r1
     fd6:	f1 04       	cpc	r15, r1
     fd8:	29 f0       	breq	.+10     	; 0xfe4 <__mulsf3+0x1d4>
     fda:	40 5c       	subi	r20, 0xC0	; 192
     fdc:	5f 4f       	sbci	r21, 0xFF	; 255
     fde:	6f 4f       	sbci	r22, 0xFF	; 255
     fe0:	7f 4f       	sbci	r23, 0xFF	; 255
     fe2:	40 78       	andi	r20, 0x80	; 128
     fe4:	4d 87       	std	Y+13, r20	; 0x0d
     fe6:	5e 87       	std	Y+14, r21	; 0x0e
     fe8:	6f 87       	std	Y+15, r22	; 0x0f
     fea:	78 8b       	std	Y+16, r23	; 0x10
     fec:	83 e0       	ldi	r24, 0x03	; 3
     fee:	89 87       	std	Y+9, r24	; 0x09
     ff0:	ce 01       	movw	r24, r28
     ff2:	09 96       	adiw	r24, 0x09	; 9
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <__mulsf3+0x1ea>
     ff6:	82 e1       	ldi	r24, 0x12	; 18
     ff8:	93 e0       	ldi	r25, 0x03	; 3
     ffa:	0e 94 24 09 	call	0x1248	; 0x1248 <__pack_f>
     ffe:	46 2f       	mov	r20, r22
    1000:	57 2f       	mov	r21, r23
    1002:	68 2f       	mov	r22, r24
    1004:	79 2f       	mov	r23, r25
    1006:	cb 01       	movw	r24, r22
    1008:	ba 01       	movw	r22, r20
    100a:	a0 96       	adiw	r28, 0x20	; 32
    100c:	e0 e1       	ldi	r30, 0x10	; 16
    100e:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__epilogue_restores__+0x4>

00001012 <__floatsisf>:
    1012:	cf 92       	push	r12
    1014:	df 92       	push	r13
    1016:	ef 92       	push	r14
    1018:	ff 92       	push	r15
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
    1022:	28 97       	sbiw	r28, 0x08	; 8
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	de bf       	out	0x3e, r29	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	cd bf       	out	0x3d, r28	; 61
    102e:	6b 01       	movw	r12, r22
    1030:	7c 01       	movw	r14, r24
    1032:	83 e0       	ldi	r24, 0x03	; 3
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	d7 01       	movw	r26, r14
    1038:	c6 01       	movw	r24, r12
    103a:	88 27       	eor	r24, r24
    103c:	b7 fd       	sbrc	r27, 7
    103e:	83 95       	inc	r24
    1040:	99 27       	eor	r25, r25
    1042:	aa 27       	eor	r26, r26
    1044:	bb 27       	eor	r27, r27
    1046:	28 2f       	mov	r18, r24
    1048:	8a 83       	std	Y+2, r24	; 0x02
    104a:	c1 14       	cp	r12, r1
    104c:	d1 04       	cpc	r13, r1
    104e:	e1 04       	cpc	r14, r1
    1050:	f1 04       	cpc	r15, r1
    1052:	19 f4       	brne	.+6      	; 0x105a <__floatsisf+0x48>
    1054:	82 e0       	ldi	r24, 0x02	; 2
    1056:	89 83       	std	Y+1, r24	; 0x01
    1058:	35 c0       	rjmp	.+106    	; 0x10c4 <__floatsisf+0xb2>
    105a:	8e e1       	ldi	r24, 0x1E	; 30
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	9c 83       	std	Y+4, r25	; 0x04
    1060:	8b 83       	std	Y+3, r24	; 0x03
    1062:	22 23       	and	r18, r18
    1064:	89 f0       	breq	.+34     	; 0x1088 <__floatsisf+0x76>
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	c8 16       	cp	r12, r24
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	d8 06       	cpc	r13, r24
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	e8 06       	cpc	r14, r24
    1072:	80 e8       	ldi	r24, 0x80	; 128
    1074:	f8 06       	cpc	r15, r24
    1076:	59 f1       	breq	.+86     	; 0x10ce <__floatsisf+0xbc>
    1078:	f0 94       	com	r15
    107a:	e0 94       	com	r14
    107c:	d0 94       	com	r13
    107e:	c0 94       	com	r12
    1080:	c1 1c       	adc	r12, r1
    1082:	d1 1c       	adc	r13, r1
    1084:	e1 1c       	adc	r14, r1
    1086:	f1 1c       	adc	r15, r1
    1088:	cd 82       	std	Y+5, r12	; 0x05
    108a:	de 82       	std	Y+6, r13	; 0x06
    108c:	ef 82       	std	Y+7, r14	; 0x07
    108e:	f8 86       	std	Y+8, r15	; 0x08
    1090:	c7 01       	movw	r24, r14
    1092:	b6 01       	movw	r22, r12
    1094:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__clzsi2>
    1098:	01 97       	sbiw	r24, 0x01	; 1
    109a:	18 16       	cp	r1, r24
    109c:	19 06       	cpc	r1, r25
    109e:	94 f4       	brge	.+36     	; 0x10c4 <__floatsisf+0xb2>
    10a0:	08 2e       	mov	r0, r24
    10a2:	04 c0       	rjmp	.+8      	; 0x10ac <__floatsisf+0x9a>
    10a4:	cc 0c       	add	r12, r12
    10a6:	dd 1c       	adc	r13, r13
    10a8:	ee 1c       	adc	r14, r14
    10aa:	ff 1c       	adc	r15, r15
    10ac:	0a 94       	dec	r0
    10ae:	d2 f7       	brpl	.-12     	; 0x10a4 <__floatsisf+0x92>
    10b0:	cd 82       	std	Y+5, r12	; 0x05
    10b2:	de 82       	std	Y+6, r13	; 0x06
    10b4:	ef 82       	std	Y+7, r14	; 0x07
    10b6:	f8 86       	std	Y+8, r15	; 0x08
    10b8:	2e e1       	ldi	r18, 0x1E	; 30
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	28 1b       	sub	r18, r24
    10be:	39 0b       	sbc	r19, r25
    10c0:	3c 83       	std	Y+4, r19	; 0x04
    10c2:	2b 83       	std	Y+3, r18	; 0x03
    10c4:	ce 01       	movw	r24, r28
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	0e 94 24 09 	call	0x1248	; 0x1248 <__pack_f>
    10cc:	04 c0       	rjmp	.+8      	; 0x10d6 <__floatsisf+0xc4>
    10ce:	60 e0       	ldi	r22, 0x00	; 0
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	9f ec       	ldi	r25, 0xCF	; 207
    10d6:	38 2f       	mov	r19, r24
    10d8:	29 2f       	mov	r18, r25
    10da:	86 2f       	mov	r24, r22
    10dc:	97 2f       	mov	r25, r23
    10de:	a3 2f       	mov	r26, r19
    10e0:	b2 2f       	mov	r27, r18
    10e2:	bc 01       	movw	r22, r24
    10e4:	cd 01       	movw	r24, r26
    10e6:	28 96       	adiw	r28, 0x08	; 8
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	f8 94       	cli
    10ec:	de bf       	out	0x3e, r29	; 62
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	cd bf       	out	0x3d, r28	; 61
    10f2:	df 91       	pop	r29
    10f4:	cf 91       	pop	r28
    10f6:	ff 90       	pop	r15
    10f8:	ef 90       	pop	r14
    10fa:	df 90       	pop	r13
    10fc:	cf 90       	pop	r12
    10fe:	08 95       	ret

00001100 <__fixsfsi>:
    1100:	ac e0       	ldi	r26, 0x0C	; 12
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e6 e8       	ldi	r30, 0x86	; 134
    1106:	f8 e0       	ldi	r31, 0x08	; 8
    1108:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__prologue_saves__+0x1c>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	89 83       	std	Y+1, r24	; 0x01
    1112:	9a 83       	std	Y+2, r25	; 0x02
    1114:	ab 83       	std	Y+3, r26	; 0x03
    1116:	bc 83       	std	Y+4, r27	; 0x04
    1118:	ce 01       	movw	r24, r28
    111a:	01 96       	adiw	r24, 0x01	; 1
    111c:	be 01       	movw	r22, r28
    111e:	6b 5f       	subi	r22, 0xFB	; 251
    1120:	7f 4f       	sbci	r23, 0xFF	; 255
    1122:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__unpack_f>
    1126:	8d 81       	ldd	r24, Y+5	; 0x05
    1128:	82 30       	cpi	r24, 0x02	; 2
    112a:	69 f1       	breq	.+90     	; 0x1186 <__fixsfsi+0x86>
    112c:	82 30       	cpi	r24, 0x02	; 2
    112e:	58 f1       	brcs	.+86     	; 0x1186 <__fixsfsi+0x86>
    1130:	84 30       	cpi	r24, 0x04	; 4
    1132:	39 f0       	breq	.+14     	; 0x1142 <__fixsfsi+0x42>
    1134:	2f 81       	ldd	r18, Y+7	; 0x07
    1136:	38 85       	ldd	r19, Y+8	; 0x08
    1138:	37 fd       	sbrc	r19, 7
    113a:	25 c0       	rjmp	.+74     	; 0x1186 <__fixsfsi+0x86>
    113c:	2f 31       	cpi	r18, 0x1F	; 31
    113e:	31 05       	cpc	r19, r1
    1140:	44 f0       	brlt	.+16     	; 0x1152 <__fixsfsi+0x52>
    1142:	8e 81       	ldd	r24, Y+6	; 0x06
    1144:	88 23       	and	r24, r24
    1146:	19 f1       	breq	.+70     	; 0x118e <__fixsfsi+0x8e>
    1148:	00 e0       	ldi	r16, 0x00	; 0
    114a:	10 e0       	ldi	r17, 0x00	; 0
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e8       	ldi	r19, 0x80	; 128
    1150:	22 c0       	rjmp	.+68     	; 0x1196 <__fixsfsi+0x96>
    1152:	8e e1       	ldi	r24, 0x1E	; 30
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	82 1b       	sub	r24, r18
    1158:	93 0b       	sbc	r25, r19
    115a:	09 85       	ldd	r16, Y+9	; 0x09
    115c:	1a 85       	ldd	r17, Y+10	; 0x0a
    115e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1160:	3c 85       	ldd	r19, Y+12	; 0x0c
    1162:	04 c0       	rjmp	.+8      	; 0x116c <__fixsfsi+0x6c>
    1164:	36 95       	lsr	r19
    1166:	27 95       	ror	r18
    1168:	17 95       	ror	r17
    116a:	07 95       	ror	r16
    116c:	8a 95       	dec	r24
    116e:	d2 f7       	brpl	.-12     	; 0x1164 <__fixsfsi+0x64>
    1170:	8e 81       	ldd	r24, Y+6	; 0x06
    1172:	88 23       	and	r24, r24
    1174:	81 f0       	breq	.+32     	; 0x1196 <__fixsfsi+0x96>
    1176:	30 95       	com	r19
    1178:	20 95       	com	r18
    117a:	10 95       	com	r17
    117c:	01 95       	neg	r16
    117e:	1f 4f       	sbci	r17, 0xFF	; 255
    1180:	2f 4f       	sbci	r18, 0xFF	; 255
    1182:	3f 4f       	sbci	r19, 0xFF	; 255
    1184:	08 c0       	rjmp	.+16     	; 0x1196 <__fixsfsi+0x96>
    1186:	00 e0       	ldi	r16, 0x00	; 0
    1188:	10 e0       	ldi	r17, 0x00	; 0
    118a:	98 01       	movw	r18, r16
    118c:	04 c0       	rjmp	.+8      	; 0x1196 <__fixsfsi+0x96>
    118e:	0f ef       	ldi	r16, 0xFF	; 255
    1190:	1f ef       	ldi	r17, 0xFF	; 255
    1192:	2f ef       	ldi	r18, 0xFF	; 255
    1194:	3f e7       	ldi	r19, 0x7F	; 127
    1196:	b8 01       	movw	r22, r16
    1198:	c9 01       	movw	r24, r18
    119a:	2c 96       	adiw	r28, 0x0c	; 12
    119c:	e4 e0       	ldi	r30, 0x04	; 4
    119e:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <__epilogue_restores__+0x1c>

000011a2 <__clzsi2>:
    11a2:	cf 92       	push	r12
    11a4:	df 92       	push	r13
    11a6:	ef 92       	push	r14
    11a8:	ff 92       	push	r15
    11aa:	0f 93       	push	r16
    11ac:	1f 93       	push	r17
    11ae:	8b 01       	movw	r16, r22
    11b0:	9c 01       	movw	r18, r24
    11b2:	00 30       	cpi	r16, 0x00	; 0
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	18 07       	cpc	r17, r24
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	28 07       	cpc	r18, r24
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	38 07       	cpc	r19, r24
    11c0:	50 f4       	brcc	.+20     	; 0x11d6 <__clzsi2+0x34>
    11c2:	0f 3f       	cpi	r16, 0xFF	; 255
    11c4:	11 05       	cpc	r17, r1
    11c6:	21 05       	cpc	r18, r1
    11c8:	31 05       	cpc	r19, r1
    11ca:	09 f0       	breq	.+2      	; 0x11ce <__clzsi2+0x2c>
    11cc:	88 f4       	brcc	.+34     	; 0x11f0 <__clzsi2+0x4e>
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	dc 01       	movw	r26, r24
    11d4:	16 c0       	rjmp	.+44     	; 0x1202 <__clzsi2+0x60>
    11d6:	00 30       	cpi	r16, 0x00	; 0
    11d8:	e0 e0       	ldi	r30, 0x00	; 0
    11da:	1e 07       	cpc	r17, r30
    11dc:	e0 e0       	ldi	r30, 0x00	; 0
    11de:	2e 07       	cpc	r18, r30
    11e0:	e1 e0       	ldi	r30, 0x01	; 1
    11e2:	3e 07       	cpc	r19, r30
    11e4:	50 f4       	brcc	.+20     	; 0x11fa <__clzsi2+0x58>
    11e6:	80 e1       	ldi	r24, 0x10	; 16
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	a0 e0       	ldi	r26, 0x00	; 0
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	09 c0       	rjmp	.+18     	; 0x1202 <__clzsi2+0x60>
    11f0:	88 e0       	ldi	r24, 0x08	; 8
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	a0 e0       	ldi	r26, 0x00	; 0
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	04 c0       	rjmp	.+8      	; 0x1202 <__clzsi2+0x60>
    11fa:	88 e1       	ldi	r24, 0x18	; 24
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	a0 e0       	ldi	r26, 0x00	; 0
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	40 e2       	ldi	r20, 0x20	; 32
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	48 1b       	sub	r20, r24
    120c:	59 0b       	sbc	r21, r25
    120e:	6a 0b       	sbc	r22, r26
    1210:	7b 0b       	sbc	r23, r27
    1212:	68 01       	movw	r12, r16
    1214:	79 01       	movw	r14, r18
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <__clzsi2+0x7e>
    1218:	f6 94       	lsr	r15
    121a:	e7 94       	ror	r14
    121c:	d7 94       	ror	r13
    121e:	c7 94       	ror	r12
    1220:	8a 95       	dec	r24
    1222:	d2 f7       	brpl	.-12     	; 0x1218 <__clzsi2+0x76>
    1224:	d7 01       	movw	r26, r14
    1226:	c6 01       	movw	r24, r12
    1228:	86 5e       	subi	r24, 0xE6	; 230
    122a:	9c 4f       	sbci	r25, 0xFC	; 252
    122c:	fc 01       	movw	r30, r24
    122e:	80 81       	ld	r24, Z
    1230:	48 1b       	sub	r20, r24
    1232:	51 09       	sbc	r21, r1
    1234:	61 09       	sbc	r22, r1
    1236:	71 09       	sbc	r23, r1
    1238:	ca 01       	movw	r24, r20
    123a:	1f 91       	pop	r17
    123c:	0f 91       	pop	r16
    123e:	ff 90       	pop	r15
    1240:	ef 90       	pop	r14
    1242:	df 90       	pop	r13
    1244:	cf 90       	pop	r12
    1246:	08 95       	ret

00001248 <__pack_f>:
    1248:	cf 92       	push	r12
    124a:	df 92       	push	r13
    124c:	ef 92       	push	r14
    124e:	ff 92       	push	r15
    1250:	0f 93       	push	r16
    1252:	1f 93       	push	r17
    1254:	dc 01       	movw	r26, r24
    1256:	14 96       	adiw	r26, 0x04	; 4
    1258:	4d 91       	ld	r20, X+
    125a:	5d 91       	ld	r21, X+
    125c:	6d 91       	ld	r22, X+
    125e:	7c 91       	ld	r23, X
    1260:	17 97       	sbiw	r26, 0x07	; 7
    1262:	11 96       	adiw	r26, 0x01	; 1
    1264:	ec 91       	ld	r30, X
    1266:	11 97       	sbiw	r26, 0x01	; 1
    1268:	8c 91       	ld	r24, X
    126a:	82 30       	cpi	r24, 0x02	; 2
    126c:	20 f4       	brcc	.+8      	; 0x1276 <__pack_f+0x2e>
    126e:	60 61       	ori	r22, 0x10	; 16
    1270:	8f ef       	ldi	r24, 0xFF	; 255
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	a5 c0       	rjmp	.+330    	; 0x13c0 <__pack_f+0x178>
    1276:	84 30       	cpi	r24, 0x04	; 4
    1278:	09 f4       	brne	.+2      	; 0x127c <__pack_f+0x34>
    127a:	9d c0       	rjmp	.+314    	; 0x13b6 <__pack_f+0x16e>
    127c:	82 30       	cpi	r24, 0x02	; 2
    127e:	09 f4       	brne	.+2      	; 0x1282 <__pack_f+0x3a>
    1280:	94 c0       	rjmp	.+296    	; 0x13aa <__pack_f+0x162>
    1282:	41 15       	cp	r20, r1
    1284:	51 05       	cpc	r21, r1
    1286:	61 05       	cpc	r22, r1
    1288:	71 05       	cpc	r23, r1
    128a:	09 f4       	brne	.+2      	; 0x128e <__pack_f+0x46>
    128c:	91 c0       	rjmp	.+290    	; 0x13b0 <__pack_f+0x168>
    128e:	12 96       	adiw	r26, 0x02	; 2
    1290:	8d 91       	ld	r24, X+
    1292:	9c 91       	ld	r25, X
    1294:	13 97       	sbiw	r26, 0x03	; 3
    1296:	2f ef       	ldi	r18, 0xFF	; 255
    1298:	82 38       	cpi	r24, 0x82	; 130
    129a:	92 07       	cpc	r25, r18
    129c:	0c f0       	brlt	.+2      	; 0x12a0 <__pack_f+0x58>
    129e:	59 c0       	rjmp	.+178    	; 0x1352 <__pack_f+0x10a>
    12a0:	22 e8       	ldi	r18, 0x82	; 130
    12a2:	3f ef       	ldi	r19, 0xFF	; 255
    12a4:	28 1b       	sub	r18, r24
    12a6:	39 0b       	sbc	r19, r25
    12a8:	2a 31       	cpi	r18, 0x1A	; 26
    12aa:	31 05       	cpc	r19, r1
    12ac:	64 f5       	brge	.+88     	; 0x1306 <__pack_f+0xbe>
    12ae:	6a 01       	movw	r12, r20
    12b0:	7b 01       	movw	r14, r22
    12b2:	02 2e       	mov	r0, r18
    12b4:	04 c0       	rjmp	.+8      	; 0x12be <__pack_f+0x76>
    12b6:	f6 94       	lsr	r15
    12b8:	e7 94       	ror	r14
    12ba:	d7 94       	ror	r13
    12bc:	c7 94       	ror	r12
    12be:	0a 94       	dec	r0
    12c0:	d2 f7       	brpl	.-12     	; 0x12b6 <__pack_f+0x6e>
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	a0 e0       	ldi	r26, 0x00	; 0
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	04 c0       	rjmp	.+8      	; 0x12d4 <__pack_f+0x8c>
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	aa 1f       	adc	r26, r26
    12d2:	bb 1f       	adc	r27, r27
    12d4:	2a 95       	dec	r18
    12d6:	d2 f7       	brpl	.-12     	; 0x12cc <__pack_f+0x84>
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	a1 09       	sbc	r26, r1
    12dc:	b1 09       	sbc	r27, r1
    12de:	84 23       	and	r24, r20
    12e0:	95 23       	and	r25, r21
    12e2:	a6 23       	and	r26, r22
    12e4:	b7 23       	and	r27, r23
    12e6:	41 e0       	ldi	r20, 0x01	; 1
    12e8:	50 e0       	ldi	r21, 0x00	; 0
    12ea:	60 e0       	ldi	r22, 0x00	; 0
    12ec:	70 e0       	ldi	r23, 0x00	; 0
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	a1 05       	cpc	r26, r1
    12f2:	b1 05       	cpc	r27, r1
    12f4:	19 f4       	brne	.+6      	; 0x12fc <__pack_f+0xb4>
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	50 e0       	ldi	r21, 0x00	; 0
    12fa:	ba 01       	movw	r22, r20
    12fc:	4c 29       	or	r20, r12
    12fe:	5d 29       	or	r21, r13
    1300:	6e 29       	or	r22, r14
    1302:	7f 29       	or	r23, r15
    1304:	03 c0       	rjmp	.+6      	; 0x130c <__pack_f+0xc4>
    1306:	40 e0       	ldi	r20, 0x00	; 0
    1308:	50 e0       	ldi	r21, 0x00	; 0
    130a:	ba 01       	movw	r22, r20
    130c:	db 01       	movw	r26, r22
    130e:	ca 01       	movw	r24, r20
    1310:	8f 77       	andi	r24, 0x7F	; 127
    1312:	90 70       	andi	r25, 0x00	; 0
    1314:	a0 70       	andi	r26, 0x00	; 0
    1316:	b0 70       	andi	r27, 0x00	; 0
    1318:	80 34       	cpi	r24, 0x40	; 64
    131a:	91 05       	cpc	r25, r1
    131c:	a1 05       	cpc	r26, r1
    131e:	b1 05       	cpc	r27, r1
    1320:	39 f4       	brne	.+14     	; 0x1330 <__pack_f+0xe8>
    1322:	47 ff       	sbrs	r20, 7
    1324:	09 c0       	rjmp	.+18     	; 0x1338 <__pack_f+0xf0>
    1326:	40 5c       	subi	r20, 0xC0	; 192
    1328:	5f 4f       	sbci	r21, 0xFF	; 255
    132a:	6f 4f       	sbci	r22, 0xFF	; 255
    132c:	7f 4f       	sbci	r23, 0xFF	; 255
    132e:	04 c0       	rjmp	.+8      	; 0x1338 <__pack_f+0xf0>
    1330:	41 5c       	subi	r20, 0xC1	; 193
    1332:	5f 4f       	sbci	r21, 0xFF	; 255
    1334:	6f 4f       	sbci	r22, 0xFF	; 255
    1336:	7f 4f       	sbci	r23, 0xFF	; 255
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	40 30       	cpi	r20, 0x00	; 0
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	52 07       	cpc	r21, r18
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	62 07       	cpc	r22, r18
    1346:	20 e4       	ldi	r18, 0x40	; 64
    1348:	72 07       	cpc	r23, r18
    134a:	38 f5       	brcc	.+78     	; 0x139a <__pack_f+0x152>
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	24 c0       	rjmp	.+72     	; 0x139a <__pack_f+0x152>
    1352:	80 38       	cpi	r24, 0x80	; 128
    1354:	91 05       	cpc	r25, r1
    1356:	7c f5       	brge	.+94     	; 0x13b6 <__pack_f+0x16e>
    1358:	8a 01       	movw	r16, r20
    135a:	9b 01       	movw	r18, r22
    135c:	0f 77       	andi	r16, 0x7F	; 127
    135e:	10 70       	andi	r17, 0x00	; 0
    1360:	20 70       	andi	r18, 0x00	; 0
    1362:	30 70       	andi	r19, 0x00	; 0
    1364:	00 34       	cpi	r16, 0x40	; 64
    1366:	11 05       	cpc	r17, r1
    1368:	21 05       	cpc	r18, r1
    136a:	31 05       	cpc	r19, r1
    136c:	39 f4       	brne	.+14     	; 0x137c <__pack_f+0x134>
    136e:	47 ff       	sbrs	r20, 7
    1370:	09 c0       	rjmp	.+18     	; 0x1384 <__pack_f+0x13c>
    1372:	40 5c       	subi	r20, 0xC0	; 192
    1374:	5f 4f       	sbci	r21, 0xFF	; 255
    1376:	6f 4f       	sbci	r22, 0xFF	; 255
    1378:	7f 4f       	sbci	r23, 0xFF	; 255
    137a:	04 c0       	rjmp	.+8      	; 0x1384 <__pack_f+0x13c>
    137c:	41 5c       	subi	r20, 0xC1	; 193
    137e:	5f 4f       	sbci	r21, 0xFF	; 255
    1380:	6f 4f       	sbci	r22, 0xFF	; 255
    1382:	7f 4f       	sbci	r23, 0xFF	; 255
    1384:	77 fd       	sbrc	r23, 7
    1386:	03 c0       	rjmp	.+6      	; 0x138e <__pack_f+0x146>
    1388:	81 58       	subi	r24, 0x81	; 129
    138a:	9f 4f       	sbci	r25, 0xFF	; 255
    138c:	06 c0       	rjmp	.+12     	; 0x139a <__pack_f+0x152>
    138e:	76 95       	lsr	r23
    1390:	67 95       	ror	r22
    1392:	57 95       	ror	r21
    1394:	47 95       	ror	r20
    1396:	80 58       	subi	r24, 0x80	; 128
    1398:	9f 4f       	sbci	r25, 0xFF	; 255
    139a:	97 e0       	ldi	r25, 0x07	; 7
    139c:	76 95       	lsr	r23
    139e:	67 95       	ror	r22
    13a0:	57 95       	ror	r21
    13a2:	47 95       	ror	r20
    13a4:	9a 95       	dec	r25
    13a6:	d1 f7       	brne	.-12     	; 0x139c <__pack_f+0x154>
    13a8:	0b c0       	rjmp	.+22     	; 0x13c0 <__pack_f+0x178>
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	05 c0       	rjmp	.+10     	; 0x13ba <__pack_f+0x172>
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	05 c0       	rjmp	.+10     	; 0x13c0 <__pack_f+0x178>
    13b6:	8f ef       	ldi	r24, 0xFF	; 255
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	40 e0       	ldi	r20, 0x00	; 0
    13bc:	50 e0       	ldi	r21, 0x00	; 0
    13be:	ba 01       	movw	r22, r20
    13c0:	98 2f       	mov	r25, r24
    13c2:	97 95       	ror	r25
    13c4:	99 27       	eor	r25, r25
    13c6:	97 95       	ror	r25
    13c8:	a6 2f       	mov	r26, r22
    13ca:	af 77       	andi	r26, 0x7F	; 127
    13cc:	e7 95       	ror	r30
    13ce:	ee 27       	eor	r30, r30
    13d0:	e7 95       	ror	r30
    13d2:	86 95       	lsr	r24
    13d4:	3a 2f       	mov	r19, r26
    13d6:	39 2b       	or	r19, r25
    13d8:	28 2f       	mov	r18, r24
    13da:	2e 2b       	or	r18, r30
    13dc:	84 2f       	mov	r24, r20
    13de:	95 2f       	mov	r25, r21
    13e0:	a3 2f       	mov	r26, r19
    13e2:	b2 2f       	mov	r27, r18
    13e4:	bc 01       	movw	r22, r24
    13e6:	cd 01       	movw	r24, r26
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	ff 90       	pop	r15
    13ee:	ef 90       	pop	r14
    13f0:	df 90       	pop	r13
    13f2:	cf 90       	pop	r12
    13f4:	08 95       	ret

000013f6 <__unpack_f>:
    13f6:	dc 01       	movw	r26, r24
    13f8:	fb 01       	movw	r30, r22
    13fa:	4c 91       	ld	r20, X
    13fc:	11 96       	adiw	r26, 0x01	; 1
    13fe:	5c 91       	ld	r21, X
    1400:	11 97       	sbiw	r26, 0x01	; 1
    1402:	12 96       	adiw	r26, 0x02	; 2
    1404:	8c 91       	ld	r24, X
    1406:	12 97       	sbiw	r26, 0x02	; 2
    1408:	68 2f       	mov	r22, r24
    140a:	6f 77       	andi	r22, 0x7F	; 127
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	98 2f       	mov	r25, r24
    1410:	99 1f       	adc	r25, r25
    1412:	99 27       	eor	r25, r25
    1414:	99 1f       	adc	r25, r25
    1416:	13 96       	adiw	r26, 0x03	; 3
    1418:	2c 91       	ld	r18, X
    141a:	13 97       	sbiw	r26, 0x03	; 3
    141c:	82 2f       	mov	r24, r18
    141e:	88 0f       	add	r24, r24
    1420:	89 2b       	or	r24, r25
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	22 1f       	adc	r18, r18
    1426:	22 27       	eor	r18, r18
    1428:	22 1f       	adc	r18, r18
    142a:	21 83       	std	Z+1, r18	; 0x01
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	39 f5       	brne	.+78     	; 0x147e <__unpack_f+0x88>
    1430:	41 15       	cp	r20, r1
    1432:	51 05       	cpc	r21, r1
    1434:	61 05       	cpc	r22, r1
    1436:	71 05       	cpc	r23, r1
    1438:	11 f4       	brne	.+4      	; 0x143e <__unpack_f+0x48>
    143a:	82 e0       	ldi	r24, 0x02	; 2
    143c:	29 c0       	rjmp	.+82     	; 0x1490 <__unpack_f+0x9a>
    143e:	82 e8       	ldi	r24, 0x82	; 130
    1440:	9f ef       	ldi	r25, 0xFF	; 255
    1442:	93 83       	std	Z+3, r25	; 0x03
    1444:	82 83       	std	Z+2, r24	; 0x02
    1446:	27 e0       	ldi	r18, 0x07	; 7
    1448:	44 0f       	add	r20, r20
    144a:	55 1f       	adc	r21, r21
    144c:	66 1f       	adc	r22, r22
    144e:	77 1f       	adc	r23, r23
    1450:	2a 95       	dec	r18
    1452:	d1 f7       	brne	.-12     	; 0x1448 <__unpack_f+0x52>
    1454:	83 e0       	ldi	r24, 0x03	; 3
    1456:	80 83       	st	Z, r24
    1458:	09 c0       	rjmp	.+18     	; 0x146c <__unpack_f+0x76>
    145a:	44 0f       	add	r20, r20
    145c:	55 1f       	adc	r21, r21
    145e:	66 1f       	adc	r22, r22
    1460:	77 1f       	adc	r23, r23
    1462:	82 81       	ldd	r24, Z+2	; 0x02
    1464:	93 81       	ldd	r25, Z+3	; 0x03
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	93 83       	std	Z+3, r25	; 0x03
    146a:	82 83       	std	Z+2, r24	; 0x02
    146c:	40 30       	cpi	r20, 0x00	; 0
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	58 07       	cpc	r21, r24
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	68 07       	cpc	r22, r24
    1476:	80 e4       	ldi	r24, 0x40	; 64
    1478:	78 07       	cpc	r23, r24
    147a:	78 f3       	brcs	.-34     	; 0x145a <__unpack_f+0x64>
    147c:	20 c0       	rjmp	.+64     	; 0x14be <__unpack_f+0xc8>
    147e:	8f 3f       	cpi	r24, 0xFF	; 255
    1480:	91 05       	cpc	r25, r1
    1482:	79 f4       	brne	.+30     	; 0x14a2 <__unpack_f+0xac>
    1484:	41 15       	cp	r20, r1
    1486:	51 05       	cpc	r21, r1
    1488:	61 05       	cpc	r22, r1
    148a:	71 05       	cpc	r23, r1
    148c:	19 f4       	brne	.+6      	; 0x1494 <__unpack_f+0x9e>
    148e:	84 e0       	ldi	r24, 0x04	; 4
    1490:	80 83       	st	Z, r24
    1492:	08 95       	ret
    1494:	64 ff       	sbrs	r22, 4
    1496:	03 c0       	rjmp	.+6      	; 0x149e <__unpack_f+0xa8>
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	80 83       	st	Z, r24
    149c:	10 c0       	rjmp	.+32     	; 0x14be <__unpack_f+0xc8>
    149e:	10 82       	st	Z, r1
    14a0:	0e c0       	rjmp	.+28     	; 0x14be <__unpack_f+0xc8>
    14a2:	8f 57       	subi	r24, 0x7F	; 127
    14a4:	90 40       	sbci	r25, 0x00	; 0
    14a6:	93 83       	std	Z+3, r25	; 0x03
    14a8:	82 83       	std	Z+2, r24	; 0x02
    14aa:	83 e0       	ldi	r24, 0x03	; 3
    14ac:	80 83       	st	Z, r24
    14ae:	87 e0       	ldi	r24, 0x07	; 7
    14b0:	44 0f       	add	r20, r20
    14b2:	55 1f       	adc	r21, r21
    14b4:	66 1f       	adc	r22, r22
    14b6:	77 1f       	adc	r23, r23
    14b8:	8a 95       	dec	r24
    14ba:	d1 f7       	brne	.-12     	; 0x14b0 <__unpack_f+0xba>
    14bc:	70 64       	ori	r23, 0x40	; 64
    14be:	44 83       	std	Z+4, r20	; 0x04
    14c0:	55 83       	std	Z+5, r21	; 0x05
    14c2:	66 83       	std	Z+6, r22	; 0x06
    14c4:	77 83       	std	Z+7, r23	; 0x07
    14c6:	08 95       	ret

000014c8 <main>:

#include "timer.h"
#include "led.h"

int main()
{
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	2a 97       	sbiw	r28, 0x0a	; 10
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	f8 94       	cli
    14d6:	de bf       	out	0x3e, r29	; 62
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	cd bf       	out	0x3d, r28	; 61
	printf("logout, good bye !!!\n");
 	while(1); */

	int tag;
	struct task task;
	led_init();
    14dc:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <led_init>
	uart_init();
    14e0:	0e 94 47 06 	call	0xc8e	; 0xc8e <uart_init>
	task_init();
    14e4:	0e 94 5f 03 	call	0x6be	; 0x6be <task_init>
	timer_init();
    14e8:	0e 94 b2 05 	call	0xb64	; 0xb64 <timer_init>

	printf("$ ");
    14ec:	0f 92       	push	r0
    14ee:	0f 92       	push	r0
    14f0:	85 e4       	ldi	r24, 0x45	; 69
    14f2:	92 e0       	ldi	r25, 0x02	; 2
    14f4:	ed b7       	in	r30, 0x3d	; 61
    14f6:	fe b7       	in	r31, 0x3e	; 62
    14f8:	92 83       	std	Z+2, r25	; 0x02
    14fa:	81 83       	std	Z+1, r24	; 0x01
    14fc:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <printf>
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
	while(1){
		cli();
    1504:	f8 94       	cli
		tag = task_delete(&task);
    1506:	ce 01       	movw	r24, r28
    1508:	01 96       	adiw	r24, 0x01	; 1
    150a:	0e 94 a8 03 	call	0x750	; 0x750 <task_delete>
		sei();
    150e:	78 94       	sei
		if(tag)
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	c1 f3       	breq	.-16     	; 0x1504 <main+0x3c>
			((*task.fun))(task.arg);
    1514:	e9 81       	ldd	r30, Y+1	; 0x01
    1516:	fa 81       	ldd	r31, Y+2	; 0x02
    1518:	ce 01       	movw	r24, r28
    151a:	03 96       	adiw	r24, 0x03	; 3
    151c:	19 95       	eicall
    151e:	f2 cf       	rjmp	.-28     	; 0x1504 <main+0x3c>

00001520 <__divmodhi4>:
    1520:	97 fb       	bst	r25, 7
    1522:	09 2e       	mov	r0, r25
    1524:	07 26       	eor	r0, r23
    1526:	0a d0       	rcall	.+20     	; 0x153c <__divmodhi4_neg1>
    1528:	77 fd       	sbrc	r23, 7
    152a:	04 d0       	rcall	.+8      	; 0x1534 <__divmodhi4_neg2>
    152c:	0c d0       	rcall	.+24     	; 0x1546 <__udivmodhi4>
    152e:	06 d0       	rcall	.+12     	; 0x153c <__divmodhi4_neg1>
    1530:	00 20       	and	r0, r0
    1532:	1a f4       	brpl	.+6      	; 0x153a <__divmodhi4_exit>

00001534 <__divmodhi4_neg2>:
    1534:	70 95       	com	r23
    1536:	61 95       	neg	r22
    1538:	7f 4f       	sbci	r23, 0xFF	; 255

0000153a <__divmodhi4_exit>:
    153a:	08 95       	ret

0000153c <__divmodhi4_neg1>:
    153c:	f6 f7       	brtc	.-4      	; 0x153a <__divmodhi4_exit>
    153e:	90 95       	com	r25
    1540:	81 95       	neg	r24
    1542:	9f 4f       	sbci	r25, 0xFF	; 255
    1544:	08 95       	ret

00001546 <__udivmodhi4>:
    1546:	aa 1b       	sub	r26, r26
    1548:	bb 1b       	sub	r27, r27
    154a:	51 e1       	ldi	r21, 0x11	; 17
    154c:	07 c0       	rjmp	.+14     	; 0x155c <__udivmodhi4_ep>

0000154e <__udivmodhi4_loop>:
    154e:	aa 1f       	adc	r26, r26
    1550:	bb 1f       	adc	r27, r27
    1552:	a6 17       	cp	r26, r22
    1554:	b7 07       	cpc	r27, r23
    1556:	10 f0       	brcs	.+4      	; 0x155c <__udivmodhi4_ep>
    1558:	a6 1b       	sub	r26, r22
    155a:	b7 0b       	sbc	r27, r23

0000155c <__udivmodhi4_ep>:
    155c:	88 1f       	adc	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	5a 95       	dec	r21
    1562:	a9 f7       	brne	.-22     	; 0x154e <__udivmodhi4_loop>
    1564:	80 95       	com	r24
    1566:	90 95       	com	r25
    1568:	bc 01       	movw	r22, r24
    156a:	cd 01       	movw	r24, r26
    156c:	08 95       	ret

0000156e <__prologue_saves__>:
    156e:	2f 92       	push	r2
    1570:	3f 92       	push	r3
    1572:	4f 92       	push	r4
    1574:	5f 92       	push	r5
    1576:	6f 92       	push	r6
    1578:	7f 92       	push	r7
    157a:	8f 92       	push	r8
    157c:	9f 92       	push	r9
    157e:	af 92       	push	r10
    1580:	bf 92       	push	r11
    1582:	cf 92       	push	r12
    1584:	df 92       	push	r13
    1586:	ef 92       	push	r14
    1588:	ff 92       	push	r15
    158a:	0f 93       	push	r16
    158c:	1f 93       	push	r17
    158e:	cf 93       	push	r28
    1590:	df 93       	push	r29
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	ca 1b       	sub	r28, r26
    1598:	db 0b       	sbc	r29, r27
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	19 94       	eijmp

000015a6 <__epilogue_restores__>:
    15a6:	2a 88       	ldd	r2, Y+18	; 0x12
    15a8:	39 88       	ldd	r3, Y+17	; 0x11
    15aa:	48 88       	ldd	r4, Y+16	; 0x10
    15ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    15ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    15b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    15b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    15b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    15b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    15b8:	b9 84       	ldd	r11, Y+9	; 0x09
    15ba:	c8 84       	ldd	r12, Y+8	; 0x08
    15bc:	df 80       	ldd	r13, Y+7	; 0x07
    15be:	ee 80       	ldd	r14, Y+6	; 0x06
    15c0:	fd 80       	ldd	r15, Y+5	; 0x05
    15c2:	0c 81       	ldd	r16, Y+4	; 0x04
    15c4:	1b 81       	ldd	r17, Y+3	; 0x03
    15c6:	aa 81       	ldd	r26, Y+2	; 0x02
    15c8:	b9 81       	ldd	r27, Y+1	; 0x01
    15ca:	ce 0f       	add	r28, r30
    15cc:	d1 1d       	adc	r29, r1
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	de bf       	out	0x3e, r29	; 62
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	ed 01       	movw	r28, r26
    15da:	08 95       	ret

000015dc <malloc>:
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	ac 01       	movw	r20, r24
    15e2:	82 30       	cpi	r24, 0x02	; 2
    15e4:	91 05       	cpc	r25, r1
    15e6:	10 f4       	brcc	.+4      	; 0x15ec <malloc+0x10>
    15e8:	42 e0       	ldi	r20, 0x02	; 2
    15ea:	50 e0       	ldi	r21, 0x00	; 0
    15ec:	e0 91 d8 06 	lds	r30, 0x06D8
    15f0:	f0 91 d9 06 	lds	r31, 0x06D9
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	a0 e0       	ldi	r26, 0x00	; 0
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	24 c0       	rjmp	.+72     	; 0x1646 <malloc+0x6a>
    15fe:	80 81       	ld	r24, Z
    1600:	91 81       	ldd	r25, Z+1	; 0x01
    1602:	84 17       	cp	r24, r20
    1604:	95 07       	cpc	r25, r21
    1606:	d0 f0       	brcs	.+52     	; 0x163c <malloc+0x60>
    1608:	84 17       	cp	r24, r20
    160a:	95 07       	cpc	r25, r21
    160c:	71 f4       	brne	.+28     	; 0x162a <malloc+0x4e>
    160e:	82 81       	ldd	r24, Z+2	; 0x02
    1610:	93 81       	ldd	r25, Z+3	; 0x03
    1612:	10 97       	sbiw	r26, 0x00	; 0
    1614:	29 f0       	breq	.+10     	; 0x1620 <malloc+0x44>
    1616:	13 96       	adiw	r26, 0x03	; 3
    1618:	9c 93       	st	X, r25
    161a:	8e 93       	st	-X, r24
    161c:	12 97       	sbiw	r26, 0x02	; 2
    161e:	2c c0       	rjmp	.+88     	; 0x1678 <malloc+0x9c>
    1620:	90 93 d9 06 	sts	0x06D9, r25
    1624:	80 93 d8 06 	sts	0x06D8, r24
    1628:	27 c0       	rjmp	.+78     	; 0x1678 <malloc+0x9c>
    162a:	21 15       	cp	r18, r1
    162c:	31 05       	cpc	r19, r1
    162e:	19 f0       	breq	.+6      	; 0x1636 <malloc+0x5a>
    1630:	82 17       	cp	r24, r18
    1632:	93 07       	cpc	r25, r19
    1634:	18 f4       	brcc	.+6      	; 0x163c <malloc+0x60>
    1636:	9c 01       	movw	r18, r24
    1638:	bd 01       	movw	r22, r26
    163a:	ef 01       	movw	r28, r30
    163c:	92 81       	ldd	r25, Z+2	; 0x02
    163e:	83 81       	ldd	r24, Z+3	; 0x03
    1640:	df 01       	movw	r26, r30
    1642:	e9 2f       	mov	r30, r25
    1644:	f8 2f       	mov	r31, r24
    1646:	30 97       	sbiw	r30, 0x00	; 0
    1648:	d1 f6       	brne	.-76     	; 0x15fe <malloc+0x22>
    164a:	21 15       	cp	r18, r1
    164c:	31 05       	cpc	r19, r1
    164e:	f9 f0       	breq	.+62     	; 0x168e <malloc+0xb2>
    1650:	c9 01       	movw	r24, r18
    1652:	84 1b       	sub	r24, r20
    1654:	95 0b       	sbc	r25, r21
    1656:	84 30       	cpi	r24, 0x04	; 4
    1658:	91 05       	cpc	r25, r1
    165a:	80 f4       	brcc	.+32     	; 0x167c <malloc+0xa0>
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	9b 81       	ldd	r25, Y+3	; 0x03
    1660:	61 15       	cp	r22, r1
    1662:	71 05       	cpc	r23, r1
    1664:	21 f0       	breq	.+8      	; 0x166e <malloc+0x92>
    1666:	fb 01       	movw	r30, r22
    1668:	93 83       	std	Z+3, r25	; 0x03
    166a:	82 83       	std	Z+2, r24	; 0x02
    166c:	04 c0       	rjmp	.+8      	; 0x1676 <malloc+0x9a>
    166e:	90 93 d9 06 	sts	0x06D9, r25
    1672:	80 93 d8 06 	sts	0x06D8, r24
    1676:	fe 01       	movw	r30, r28
    1678:	32 96       	adiw	r30, 0x02	; 2
    167a:	42 c0       	rjmp	.+132    	; 0x1700 <malloc+0x124>
    167c:	fe 01       	movw	r30, r28
    167e:	e8 0f       	add	r30, r24
    1680:	f9 1f       	adc	r31, r25
    1682:	41 93       	st	Z+, r20
    1684:	51 93       	st	Z+, r21
    1686:	02 97       	sbiw	r24, 0x02	; 2
    1688:	99 83       	std	Y+1, r25	; 0x01
    168a:	88 83       	st	Y, r24
    168c:	39 c0       	rjmp	.+114    	; 0x1700 <malloc+0x124>
    168e:	80 91 d6 06 	lds	r24, 0x06D6
    1692:	90 91 d7 06 	lds	r25, 0x06D7
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	41 f4       	brne	.+16     	; 0x16aa <malloc+0xce>
    169a:	80 91 1c 04 	lds	r24, 0x041C
    169e:	90 91 1d 04 	lds	r25, 0x041D
    16a2:	90 93 d7 06 	sts	0x06D7, r25
    16a6:	80 93 d6 06 	sts	0x06D6, r24
    16aa:	20 91 1a 04 	lds	r18, 0x041A
    16ae:	30 91 1b 04 	lds	r19, 0x041B
    16b2:	21 15       	cp	r18, r1
    16b4:	31 05       	cpc	r19, r1
    16b6:	41 f4       	brne	.+16     	; 0x16c8 <malloc+0xec>
    16b8:	2d b7       	in	r18, 0x3d	; 61
    16ba:	3e b7       	in	r19, 0x3e	; 62
    16bc:	80 91 1e 04 	lds	r24, 0x041E
    16c0:	90 91 1f 04 	lds	r25, 0x041F
    16c4:	28 1b       	sub	r18, r24
    16c6:	39 0b       	sbc	r19, r25
    16c8:	e0 91 d6 06 	lds	r30, 0x06D6
    16cc:	f0 91 d7 06 	lds	r31, 0x06D7
    16d0:	e2 17       	cp	r30, r18
    16d2:	f3 07       	cpc	r31, r19
    16d4:	98 f4       	brcc	.+38     	; 0x16fc <malloc+0x120>
    16d6:	2e 1b       	sub	r18, r30
    16d8:	3f 0b       	sbc	r19, r31
    16da:	24 17       	cp	r18, r20
    16dc:	35 07       	cpc	r19, r21
    16de:	70 f0       	brcs	.+28     	; 0x16fc <malloc+0x120>
    16e0:	ca 01       	movw	r24, r20
    16e2:	02 96       	adiw	r24, 0x02	; 2
    16e4:	28 17       	cp	r18, r24
    16e6:	39 07       	cpc	r19, r25
    16e8:	48 f0       	brcs	.+18     	; 0x16fc <malloc+0x120>
    16ea:	8e 0f       	add	r24, r30
    16ec:	9f 1f       	adc	r25, r31
    16ee:	90 93 d7 06 	sts	0x06D7, r25
    16f2:	80 93 d6 06 	sts	0x06D6, r24
    16f6:	41 93       	st	Z+, r20
    16f8:	51 93       	st	Z+, r21
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <malloc+0x124>
    16fc:	e0 e0       	ldi	r30, 0x00	; 0
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	cf 01       	movw	r24, r30
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	08 95       	ret

00001708 <free>:
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	9c 01       	movw	r18, r24
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	09 f4       	brne	.+2      	; 0x1718 <free+0x10>
    1716:	8c c0       	rjmp	.+280    	; 0x1830 <free+0x128>
    1718:	dc 01       	movw	r26, r24
    171a:	12 97       	sbiw	r26, 0x02	; 2
    171c:	13 96       	adiw	r26, 0x03	; 3
    171e:	1c 92       	st	X, r1
    1720:	1e 92       	st	-X, r1
    1722:	12 97       	sbiw	r26, 0x02	; 2
    1724:	60 91 d8 06 	lds	r22, 0x06D8
    1728:	70 91 d9 06 	lds	r23, 0x06D9
    172c:	61 15       	cp	r22, r1
    172e:	71 05       	cpc	r23, r1
    1730:	89 f4       	brne	.+34     	; 0x1754 <free+0x4c>
    1732:	8d 91       	ld	r24, X+
    1734:	9c 91       	ld	r25, X
    1736:	11 97       	sbiw	r26, 0x01	; 1
    1738:	82 0f       	add	r24, r18
    173a:	93 1f       	adc	r25, r19
    173c:	20 91 d6 06 	lds	r18, 0x06D6
    1740:	30 91 d7 06 	lds	r19, 0x06D7
    1744:	28 17       	cp	r18, r24
    1746:	39 07       	cpc	r19, r25
    1748:	69 f5       	brne	.+90     	; 0x17a4 <free+0x9c>
    174a:	b0 93 d7 06 	sts	0x06D7, r27
    174e:	a0 93 d6 06 	sts	0x06D6, r26
    1752:	6e c0       	rjmp	.+220    	; 0x1830 <free+0x128>
    1754:	fb 01       	movw	r30, r22
    1756:	40 e0       	ldi	r20, 0x00	; 0
    1758:	50 e0       	ldi	r21, 0x00	; 0
    175a:	01 c0       	rjmp	.+2      	; 0x175e <free+0x56>
    175c:	fc 01       	movw	r30, r24
    175e:	ea 17       	cp	r30, r26
    1760:	fb 07       	cpc	r31, r27
    1762:	30 f4       	brcc	.+12     	; 0x1770 <free+0x68>
    1764:	82 81       	ldd	r24, Z+2	; 0x02
    1766:	93 81       	ldd	r25, Z+3	; 0x03
    1768:	af 01       	movw	r20, r30
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	b9 f7       	brne	.-18     	; 0x175c <free+0x54>
    176e:	1f c0       	rjmp	.+62     	; 0x17ae <free+0xa6>
    1770:	e9 01       	movw	r28, r18
    1772:	22 97       	sbiw	r28, 0x02	; 2
    1774:	fb 83       	std	Y+3, r31	; 0x03
    1776:	ea 83       	std	Y+2, r30	; 0x02
    1778:	08 81       	ld	r16, Y
    177a:	19 81       	ldd	r17, Y+1	; 0x01
    177c:	c9 01       	movw	r24, r18
    177e:	80 0f       	add	r24, r16
    1780:	91 1f       	adc	r25, r17
    1782:	8e 17       	cp	r24, r30
    1784:	9f 07       	cpc	r25, r31
    1786:	59 f4       	brne	.+22     	; 0x179e <free+0x96>
    1788:	80 81       	ld	r24, Z
    178a:	91 81       	ldd	r25, Z+1	; 0x01
    178c:	80 0f       	add	r24, r16
    178e:	91 1f       	adc	r25, r17
    1790:	02 96       	adiw	r24, 0x02	; 2
    1792:	99 83       	std	Y+1, r25	; 0x01
    1794:	88 83       	st	Y, r24
    1796:	82 81       	ldd	r24, Z+2	; 0x02
    1798:	93 81       	ldd	r25, Z+3	; 0x03
    179a:	9b 83       	std	Y+3, r25	; 0x03
    179c:	8a 83       	std	Y+2, r24	; 0x02
    179e:	41 15       	cp	r20, r1
    17a0:	51 05       	cpc	r21, r1
    17a2:	29 f4       	brne	.+10     	; 0x17ae <free+0xa6>
    17a4:	b0 93 d9 06 	sts	0x06D9, r27
    17a8:	a0 93 d8 06 	sts	0x06D8, r26
    17ac:	41 c0       	rjmp	.+130    	; 0x1830 <free+0x128>
    17ae:	fa 01       	movw	r30, r20
    17b0:	b3 83       	std	Z+3, r27	; 0x03
    17b2:	a2 83       	std	Z+2, r26	; 0x02
    17b4:	c1 91       	ld	r28, Z+
    17b6:	d1 91       	ld	r29, Z+
    17b8:	ec 0f       	add	r30, r28
    17ba:	fd 1f       	adc	r31, r29
    17bc:	ae 17       	cp	r26, r30
    17be:	bf 07       	cpc	r27, r31
    17c0:	81 f4       	brne	.+32     	; 0x17e2 <free+0xda>
    17c2:	f9 01       	movw	r30, r18
    17c4:	92 91       	ld	r25, -Z
    17c6:	82 91       	ld	r24, -Z
    17c8:	8c 0f       	add	r24, r28
    17ca:	9d 1f       	adc	r25, r29
    17cc:	02 96       	adiw	r24, 0x02	; 2
    17ce:	da 01       	movw	r26, r20
    17d0:	11 96       	adiw	r26, 0x01	; 1
    17d2:	9c 93       	st	X, r25
    17d4:	8e 93       	st	-X, r24
    17d6:	82 81       	ldd	r24, Z+2	; 0x02
    17d8:	93 81       	ldd	r25, Z+3	; 0x03
    17da:	13 96       	adiw	r26, 0x03	; 3
    17dc:	9c 93       	st	X, r25
    17de:	8e 93       	st	-X, r24
    17e0:	12 97       	sbiw	r26, 0x02	; 2
    17e2:	e0 e0       	ldi	r30, 0x00	; 0
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <free+0xe4>
    17e8:	fb 01       	movw	r30, r22
    17ea:	bc 01       	movw	r22, r24
    17ec:	db 01       	movw	r26, r22
    17ee:	12 96       	adiw	r26, 0x02	; 2
    17f0:	8d 91       	ld	r24, X+
    17f2:	9c 91       	ld	r25, X
    17f4:	13 97       	sbiw	r26, 0x03	; 3
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	b9 f7       	brne	.-18     	; 0x17e8 <free+0xe0>
    17fa:	cb 01       	movw	r24, r22
    17fc:	02 96       	adiw	r24, 0x02	; 2
    17fe:	2d 91       	ld	r18, X+
    1800:	3c 91       	ld	r19, X
    1802:	11 97       	sbiw	r26, 0x01	; 1
    1804:	82 0f       	add	r24, r18
    1806:	93 1f       	adc	r25, r19
    1808:	20 91 d6 06 	lds	r18, 0x06D6
    180c:	30 91 d7 06 	lds	r19, 0x06D7
    1810:	28 17       	cp	r18, r24
    1812:	39 07       	cpc	r19, r25
    1814:	69 f4       	brne	.+26     	; 0x1830 <free+0x128>
    1816:	30 97       	sbiw	r30, 0x00	; 0
    1818:	29 f4       	brne	.+10     	; 0x1824 <free+0x11c>
    181a:	10 92 d9 06 	sts	0x06D9, r1
    181e:	10 92 d8 06 	sts	0x06D8, r1
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <free+0x120>
    1824:	13 82       	std	Z+3, r1	; 0x03
    1826:	12 82       	std	Z+2, r1	; 0x02
    1828:	70 93 d7 06 	sts	0x06D7, r23
    182c:	60 93 d6 06 	sts	0x06D6, r22
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	1f 91       	pop	r17
    1836:	0f 91       	pop	r16
    1838:	08 95       	ret

0000183a <atoi>:
    183a:	fc 01       	movw	r30, r24
    183c:	88 27       	eor	r24, r24
    183e:	99 27       	eor	r25, r25
    1840:	e8 94       	clt
    1842:	21 91       	ld	r18, Z+
    1844:	20 32       	cpi	r18, 0x20	; 32
    1846:	e9 f3       	breq	.-6      	; 0x1842 <atoi+0x8>
    1848:	29 30       	cpi	r18, 0x09	; 9
    184a:	10 f0       	brcs	.+4      	; 0x1850 <atoi+0x16>
    184c:	2e 30       	cpi	r18, 0x0E	; 14
    184e:	c8 f3       	brcs	.-14     	; 0x1842 <atoi+0x8>
    1850:	2b 32       	cpi	r18, 0x2B	; 43
    1852:	41 f0       	breq	.+16     	; 0x1864 <atoi+0x2a>
    1854:	2d 32       	cpi	r18, 0x2D	; 45
    1856:	39 f4       	brne	.+14     	; 0x1866 <atoi+0x2c>
    1858:	68 94       	set
    185a:	04 c0       	rjmp	.+8      	; 0x1864 <atoi+0x2a>
    185c:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__mulhi_const_10>
    1860:	82 0f       	add	r24, r18
    1862:	91 1d       	adc	r25, r1
    1864:	21 91       	ld	r18, Z+
    1866:	20 53       	subi	r18, 0x30	; 48
    1868:	2a 30       	cpi	r18, 0x0A	; 10
    186a:	c0 f3       	brcs	.-16     	; 0x185c <atoi+0x22>
    186c:	1e f4       	brtc	.+6      	; 0x1874 <atoi+0x3a>
    186e:	90 95       	com	r25
    1870:	81 95       	neg	r24
    1872:	9f 4f       	sbci	r25, 0xFF	; 255
    1874:	08 95       	ret

00001876 <strtok>:
    1876:	45 e2       	ldi	r20, 0x25	; 37
    1878:	54 e0       	ldi	r21, 0x04	; 4
    187a:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <strtok_r>
    187e:	08 95       	ret

00001880 <strcmp>:
    1880:	fb 01       	movw	r30, r22
    1882:	dc 01       	movw	r26, r24
    1884:	8d 91       	ld	r24, X+
    1886:	01 90       	ld	r0, Z+
    1888:	80 19       	sub	r24, r0
    188a:	01 10       	cpse	r0, r1
    188c:	d9 f3       	breq	.-10     	; 0x1884 <strcmp+0x4>
    188e:	99 0b       	sbc	r25, r25
    1890:	08 95       	ret

00001892 <strcpy>:
    1892:	fb 01       	movw	r30, r22
    1894:	dc 01       	movw	r26, r24
    1896:	01 90       	ld	r0, Z+
    1898:	0d 92       	st	X+, r0
    189a:	00 20       	and	r0, r0
    189c:	e1 f7       	brne	.-8      	; 0x1896 <strcpy+0x4>
    189e:	08 95       	ret

000018a0 <strtok_r>:
    18a0:	fa 01       	movw	r30, r20
    18a2:	a1 91       	ld	r26, Z+
    18a4:	b0 81       	ld	r27, Z
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	19 f4       	brne	.+6      	; 0x18b0 <strtok_r+0x10>
    18aa:	10 97       	sbiw	r26, 0x00	; 0
    18ac:	e1 f0       	breq	.+56     	; 0x18e6 <strtok_r+0x46>
    18ae:	cd 01       	movw	r24, r26
    18b0:	dc 01       	movw	r26, r24
    18b2:	cd 01       	movw	r24, r26
    18b4:	0d 90       	ld	r0, X+
    18b6:	00 20       	and	r0, r0
    18b8:	11 f4       	brne	.+4      	; 0x18be <strtok_r+0x1e>
    18ba:	c0 01       	movw	r24, r0
    18bc:	13 c0       	rjmp	.+38     	; 0x18e4 <strtok_r+0x44>
    18be:	fb 01       	movw	r30, r22
    18c0:	21 91       	ld	r18, Z+
    18c2:	22 23       	and	r18, r18
    18c4:	19 f0       	breq	.+6      	; 0x18cc <strtok_r+0x2c>
    18c6:	20 15       	cp	r18, r0
    18c8:	d9 f7       	brne	.-10     	; 0x18c0 <strtok_r+0x20>
    18ca:	f3 cf       	rjmp	.-26     	; 0x18b2 <strtok_r+0x12>
    18cc:	fb 01       	movw	r30, r22
    18ce:	21 91       	ld	r18, Z+
    18d0:	20 15       	cp	r18, r0
    18d2:	19 f4       	brne	.+6      	; 0x18da <strtok_r+0x3a>
    18d4:	1e 92       	st	-X, r1
    18d6:	11 96       	adiw	r26, 0x01	; 1
    18d8:	06 c0       	rjmp	.+12     	; 0x18e6 <strtok_r+0x46>
    18da:	22 23       	and	r18, r18
    18dc:	c1 f7       	brne	.-16     	; 0x18ce <strtok_r+0x2e>
    18de:	0d 90       	ld	r0, X+
    18e0:	00 20       	and	r0, r0
    18e2:	a1 f7       	brne	.-24     	; 0x18cc <strtok_r+0x2c>
    18e4:	d0 01       	movw	r26, r0
    18e6:	fa 01       	movw	r30, r20
    18e8:	a1 93       	st	Z+, r26
    18ea:	b0 83       	st	Z, r27
    18ec:	08 95       	ret

000018ee <__mulhi_const_10>:
    18ee:	7a e0       	ldi	r23, 0x0A	; 10
    18f0:	97 9f       	mul	r25, r23
    18f2:	90 2d       	mov	r25, r0
    18f4:	87 9f       	mul	r24, r23
    18f6:	80 2d       	mov	r24, r0
    18f8:	91 0d       	add	r25, r1
    18fa:	11 24       	eor	r1, r1
    18fc:	08 95       	ret

000018fe <fgets>:
    18fe:	cf 92       	push	r12
    1900:	df 92       	push	r13
    1902:	ef 92       	push	r14
    1904:	ff 92       	push	r15
    1906:	0f 93       	push	r16
    1908:	1f 93       	push	r17
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	8c 01       	movw	r16, r24
    1910:	6a 01       	movw	r12, r20
    1912:	fa 01       	movw	r30, r20
    1914:	83 81       	ldd	r24, Z+3	; 0x03
    1916:	80 ff       	sbrs	r24, 0
    1918:	1a c0       	rjmp	.+52     	; 0x194e <fgets+0x50>
    191a:	16 16       	cp	r1, r22
    191c:	17 06       	cpc	r1, r23
    191e:	bc f4       	brge	.+46     	; 0x194e <fgets+0x50>
    1920:	7b 01       	movw	r14, r22
    1922:	e8 01       	movw	r28, r16
    1924:	0e c0       	rjmp	.+28     	; 0x1942 <fgets+0x44>
    1926:	c6 01       	movw	r24, r12
    1928:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <fgetc>
    192c:	ff ef       	ldi	r31, 0xFF	; 255
    192e:	8f 3f       	cpi	r24, 0xFF	; 255
    1930:	9f 07       	cpc	r25, r31
    1932:	69 f0       	breq	.+26     	; 0x194e <fgets+0x50>
    1934:	89 93       	st	Y+, r24
    1936:	08 94       	sec
    1938:	e1 08       	sbc	r14, r1
    193a:	f1 08       	sbc	r15, r1
    193c:	8a 30       	cpi	r24, 0x0A	; 10
    193e:	91 05       	cpc	r25, r1
    1940:	21 f0       	breq	.+8      	; 0x194a <fgets+0x4c>
    1942:	21 e0       	ldi	r18, 0x01	; 1
    1944:	e2 16       	cp	r14, r18
    1946:	f1 04       	cpc	r15, r1
    1948:	71 f7       	brne	.-36     	; 0x1926 <fgets+0x28>
    194a:	18 82       	st	Y, r1
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <fgets+0x54>
    194e:	00 e0       	ldi	r16, 0x00	; 0
    1950:	10 e0       	ldi	r17, 0x00	; 0
    1952:	c8 01       	movw	r24, r16
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	ff 90       	pop	r15
    195e:	ef 90       	pop	r14
    1960:	df 90       	pop	r13
    1962:	cf 90       	pop	r12
    1964:	08 95       	ret

00001966 <gets>:
    1966:	0f 93       	push	r16
    1968:	1f 93       	push	r17
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	8c 01       	movw	r16, r24
    1970:	e0 91 da 06 	lds	r30, 0x06DA
    1974:	f0 91 db 06 	lds	r31, 0x06DB
    1978:	83 81       	ldd	r24, Z+3	; 0x03
    197a:	80 ff       	sbrs	r24, 0
    197c:	12 c0       	rjmp	.+36     	; 0x19a2 <gets+0x3c>
    197e:	e8 01       	movw	r28, r16
    1980:	80 91 da 06 	lds	r24, 0x06DA
    1984:	90 91 db 06 	lds	r25, 0x06DB
    1988:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <fgetc>
    198c:	2f ef       	ldi	r18, 0xFF	; 255
    198e:	8f 3f       	cpi	r24, 0xFF	; 255
    1990:	92 07       	cpc	r25, r18
    1992:	39 f0       	breq	.+14     	; 0x19a2 <gets+0x3c>
    1994:	89 93       	st	Y+, r24
    1996:	8a 30       	cpi	r24, 0x0A	; 10
    1998:	91 05       	cpc	r25, r1
    199a:	91 f7       	brne	.-28     	; 0x1980 <gets+0x1a>
    199c:	21 97       	sbiw	r28, 0x01	; 1
    199e:	18 82       	st	Y, r1
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <gets+0x40>
    19a2:	00 e0       	ldi	r16, 0x00	; 0
    19a4:	10 e0       	ldi	r17, 0x00	; 0
    19a6:	c8 01       	movw	r24, r16
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	08 95       	ret

000019b2 <printf>:
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	fe 01       	movw	r30, r28
    19bc:	36 96       	adiw	r30, 0x06	; 6
    19be:	61 91       	ld	r22, Z+
    19c0:	71 91       	ld	r23, Z+
    19c2:	80 91 dc 06 	lds	r24, 0x06DC
    19c6:	90 91 dd 06 	lds	r25, 0x06DD
    19ca:	af 01       	movw	r20, r30
    19cc:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <vfprintf>
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	08 95       	ret

000019d6 <putchar>:
    19d6:	60 91 dc 06 	lds	r22, 0x06DC
    19da:	70 91 dd 06 	lds	r23, 0x06DD
    19de:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <fputc>
    19e2:	08 95       	ret

000019e4 <puts>:
    19e4:	0f 93       	push	r16
    19e6:	1f 93       	push	r17
    19e8:	cf 93       	push	r28
    19ea:	df 93       	push	r29
    19ec:	8c 01       	movw	r16, r24
    19ee:	e0 91 dc 06 	lds	r30, 0x06DC
    19f2:	f0 91 dd 06 	lds	r31, 0x06DD
    19f6:	83 81       	ldd	r24, Z+3	; 0x03
    19f8:	81 ff       	sbrs	r24, 1
    19fa:	1a c0       	rjmp	.+52     	; 0x1a30 <puts+0x4c>
    19fc:	c0 e0       	ldi	r28, 0x00	; 0
    19fe:	d0 e0       	ldi	r29, 0x00	; 0
    1a00:	05 c0       	rjmp	.+10     	; 0x1a0c <puts+0x28>
    1a02:	19 95       	eicall
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	11 f0       	breq	.+4      	; 0x1a0c <puts+0x28>
    1a08:	cf ef       	ldi	r28, 0xFF	; 255
    1a0a:	df ef       	ldi	r29, 0xFF	; 255
    1a0c:	f8 01       	movw	r30, r16
    1a0e:	81 91       	ld	r24, Z+
    1a10:	8f 01       	movw	r16, r30
    1a12:	60 91 dc 06 	lds	r22, 0x06DC
    1a16:	70 91 dd 06 	lds	r23, 0x06DD
    1a1a:	db 01       	movw	r26, r22
    1a1c:	18 96       	adiw	r26, 0x08	; 8
    1a1e:	ed 91       	ld	r30, X+
    1a20:	fc 91       	ld	r31, X
    1a22:	19 97       	sbiw	r26, 0x09	; 9
    1a24:	88 23       	and	r24, r24
    1a26:	69 f7       	brne	.-38     	; 0x1a02 <puts+0x1e>
    1a28:	8a e0       	ldi	r24, 0x0A	; 10
    1a2a:	19 95       	eicall
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	11 f0       	breq	.+4      	; 0x1a34 <puts+0x50>
    1a30:	cf ef       	ldi	r28, 0xFF	; 255
    1a32:	df ef       	ldi	r29, 0xFF	; 255
    1a34:	ce 01       	movw	r24, r28
    1a36:	df 91       	pop	r29
    1a38:	cf 91       	pop	r28
    1a3a:	1f 91       	pop	r17
    1a3c:	0f 91       	pop	r16
    1a3e:	08 95       	ret

00001a40 <sprintf>:
    1a40:	0f 93       	push	r16
    1a42:	1f 93       	push	r17
    1a44:	cf 93       	push	r28
    1a46:	df 93       	push	r29
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	2e 97       	sbiw	r28, 0x0e	; 14
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	f8 94       	cli
    1a52:	de bf       	out	0x3e, r29	; 62
    1a54:	0f be       	out	0x3f, r0	; 63
    1a56:	cd bf       	out	0x3d, r28	; 61
    1a58:	0e 89       	ldd	r16, Y+22	; 0x16
    1a5a:	1f 89       	ldd	r17, Y+23	; 0x17
    1a5c:	86 e0       	ldi	r24, 0x06	; 6
    1a5e:	8c 83       	std	Y+4, r24	; 0x04
    1a60:	1a 83       	std	Y+2, r17	; 0x02
    1a62:	09 83       	std	Y+1, r16	; 0x01
    1a64:	8f ef       	ldi	r24, 0xFF	; 255
    1a66:	9f e7       	ldi	r25, 0x7F	; 127
    1a68:	9e 83       	std	Y+6, r25	; 0x06
    1a6a:	8d 83       	std	Y+5, r24	; 0x05
    1a6c:	ae 01       	movw	r20, r28
    1a6e:	46 5e       	subi	r20, 0xE6	; 230
    1a70:	5f 4f       	sbci	r21, 0xFF	; 255
    1a72:	ce 01       	movw	r24, r28
    1a74:	01 96       	adiw	r24, 0x01	; 1
    1a76:	68 8d       	ldd	r22, Y+24	; 0x18
    1a78:	79 8d       	ldd	r23, Y+25	; 0x19
    1a7a:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <vfprintf>
    1a7e:	ef 81       	ldd	r30, Y+7	; 0x07
    1a80:	f8 85       	ldd	r31, Y+8	; 0x08
    1a82:	e0 0f       	add	r30, r16
    1a84:	f1 1f       	adc	r31, r17
    1a86:	10 82       	st	Z, r1
    1a88:	2e 96       	adiw	r28, 0x0e	; 14
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	1f 91       	pop	r17
    1a9a:	0f 91       	pop	r16
    1a9c:	08 95       	ret

00001a9e <vfprintf>:
    1a9e:	2f 92       	push	r2
    1aa0:	3f 92       	push	r3
    1aa2:	4f 92       	push	r4
    1aa4:	5f 92       	push	r5
    1aa6:	6f 92       	push	r6
    1aa8:	7f 92       	push	r7
    1aaa:	8f 92       	push	r8
    1aac:	9f 92       	push	r9
    1aae:	af 92       	push	r10
    1ab0:	bf 92       	push	r11
    1ab2:	cf 92       	push	r12
    1ab4:	df 92       	push	r13
    1ab6:	ef 92       	push	r14
    1ab8:	ff 92       	push	r15
    1aba:	0f 93       	push	r16
    1abc:	1f 93       	push	r17
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	2d 97       	sbiw	r28, 0x0d	; 13
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
    1ad2:	3c 01       	movw	r6, r24
    1ad4:	7d 87       	std	Y+13, r23	; 0x0d
    1ad6:	6c 87       	std	Y+12, r22	; 0x0c
    1ad8:	5a 01       	movw	r10, r20
    1ada:	fc 01       	movw	r30, r24
    1adc:	17 82       	std	Z+7, r1	; 0x07
    1ade:	16 82       	std	Z+6, r1	; 0x06
    1ae0:	83 81       	ldd	r24, Z+3	; 0x03
    1ae2:	81 ff       	sbrs	r24, 1
    1ae4:	c8 c1       	rjmp	.+912    	; 0x1e76 <vfprintf+0x3d8>
    1ae6:	2e 01       	movw	r4, r28
    1ae8:	08 94       	sec
    1aea:	41 1c       	adc	r4, r1
    1aec:	51 1c       	adc	r5, r1
    1aee:	f3 01       	movw	r30, r6
    1af0:	93 81       	ldd	r25, Z+3	; 0x03
    1af2:	ec 85       	ldd	r30, Y+12	; 0x0c
    1af4:	fd 85       	ldd	r31, Y+13	; 0x0d
    1af6:	93 fd       	sbrc	r25, 3
    1af8:	85 91       	lpm	r24, Z+
    1afa:	93 ff       	sbrs	r25, 3
    1afc:	81 91       	ld	r24, Z+
    1afe:	fd 87       	std	Y+13, r31	; 0x0d
    1b00:	ec 87       	std	Y+12, r30	; 0x0c
    1b02:	88 23       	and	r24, r24
    1b04:	09 f4       	brne	.+2      	; 0x1b08 <vfprintf+0x6a>
    1b06:	b3 c1       	rjmp	.+870    	; 0x1e6e <vfprintf+0x3d0>
    1b08:	85 32       	cpi	r24, 0x25	; 37
    1b0a:	41 f4       	brne	.+16     	; 0x1b1c <vfprintf+0x7e>
    1b0c:	93 fd       	sbrc	r25, 3
    1b0e:	85 91       	lpm	r24, Z+
    1b10:	93 ff       	sbrs	r25, 3
    1b12:	81 91       	ld	r24, Z+
    1b14:	fd 87       	std	Y+13, r31	; 0x0d
    1b16:	ec 87       	std	Y+12, r30	; 0x0c
    1b18:	85 32       	cpi	r24, 0x25	; 37
    1b1a:	29 f4       	brne	.+10     	; 0x1b26 <vfprintf+0x88>
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	b3 01       	movw	r22, r6
    1b20:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <fputc>
    1b24:	e4 cf       	rjmp	.-56     	; 0x1aee <vfprintf+0x50>
    1b26:	ff 24       	eor	r15, r15
    1b28:	ee 24       	eor	r14, r14
    1b2a:	10 e0       	ldi	r17, 0x00	; 0
    1b2c:	10 32       	cpi	r17, 0x20	; 32
    1b2e:	b0 f4       	brcc	.+44     	; 0x1b5c <vfprintf+0xbe>
    1b30:	8b 32       	cpi	r24, 0x2B	; 43
    1b32:	69 f0       	breq	.+26     	; 0x1b4e <vfprintf+0xb0>
    1b34:	8c 32       	cpi	r24, 0x2C	; 44
    1b36:	28 f4       	brcc	.+10     	; 0x1b42 <vfprintf+0xa4>
    1b38:	80 32       	cpi	r24, 0x20	; 32
    1b3a:	51 f0       	breq	.+20     	; 0x1b50 <vfprintf+0xb2>
    1b3c:	83 32       	cpi	r24, 0x23	; 35
    1b3e:	71 f4       	brne	.+28     	; 0x1b5c <vfprintf+0xbe>
    1b40:	0b c0       	rjmp	.+22     	; 0x1b58 <vfprintf+0xba>
    1b42:	8d 32       	cpi	r24, 0x2D	; 45
    1b44:	39 f0       	breq	.+14     	; 0x1b54 <vfprintf+0xb6>
    1b46:	80 33       	cpi	r24, 0x30	; 48
    1b48:	49 f4       	brne	.+18     	; 0x1b5c <vfprintf+0xbe>
    1b4a:	11 60       	ori	r17, 0x01	; 1
    1b4c:	2c c0       	rjmp	.+88     	; 0x1ba6 <vfprintf+0x108>
    1b4e:	12 60       	ori	r17, 0x02	; 2
    1b50:	14 60       	ori	r17, 0x04	; 4
    1b52:	29 c0       	rjmp	.+82     	; 0x1ba6 <vfprintf+0x108>
    1b54:	18 60       	ori	r17, 0x08	; 8
    1b56:	27 c0       	rjmp	.+78     	; 0x1ba6 <vfprintf+0x108>
    1b58:	10 61       	ori	r17, 0x10	; 16
    1b5a:	25 c0       	rjmp	.+74     	; 0x1ba6 <vfprintf+0x108>
    1b5c:	17 fd       	sbrc	r17, 7
    1b5e:	2e c0       	rjmp	.+92     	; 0x1bbc <vfprintf+0x11e>
    1b60:	28 2f       	mov	r18, r24
    1b62:	20 53       	subi	r18, 0x30	; 48
    1b64:	2a 30       	cpi	r18, 0x0A	; 10
    1b66:	98 f4       	brcc	.+38     	; 0x1b8e <vfprintf+0xf0>
    1b68:	16 ff       	sbrs	r17, 6
    1b6a:	08 c0       	rjmp	.+16     	; 0x1b7c <vfprintf+0xde>
    1b6c:	8f 2d       	mov	r24, r15
    1b6e:	88 0f       	add	r24, r24
    1b70:	f8 2e       	mov	r15, r24
    1b72:	ff 0c       	add	r15, r15
    1b74:	ff 0c       	add	r15, r15
    1b76:	f8 0e       	add	r15, r24
    1b78:	f2 0e       	add	r15, r18
    1b7a:	15 c0       	rjmp	.+42     	; 0x1ba6 <vfprintf+0x108>
    1b7c:	8e 2d       	mov	r24, r14
    1b7e:	88 0f       	add	r24, r24
    1b80:	e8 2e       	mov	r14, r24
    1b82:	ee 0c       	add	r14, r14
    1b84:	ee 0c       	add	r14, r14
    1b86:	e8 0e       	add	r14, r24
    1b88:	e2 0e       	add	r14, r18
    1b8a:	10 62       	ori	r17, 0x20	; 32
    1b8c:	0c c0       	rjmp	.+24     	; 0x1ba6 <vfprintf+0x108>
    1b8e:	8e 32       	cpi	r24, 0x2E	; 46
    1b90:	21 f4       	brne	.+8      	; 0x1b9a <vfprintf+0xfc>
    1b92:	16 fd       	sbrc	r17, 6
    1b94:	6c c1       	rjmp	.+728    	; 0x1e6e <vfprintf+0x3d0>
    1b96:	10 64       	ori	r17, 0x40	; 64
    1b98:	06 c0       	rjmp	.+12     	; 0x1ba6 <vfprintf+0x108>
    1b9a:	8c 36       	cpi	r24, 0x6C	; 108
    1b9c:	11 f4       	brne	.+4      	; 0x1ba2 <vfprintf+0x104>
    1b9e:	10 68       	ori	r17, 0x80	; 128
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <vfprintf+0x108>
    1ba2:	88 36       	cpi	r24, 0x68	; 104
    1ba4:	59 f4       	brne	.+22     	; 0x1bbc <vfprintf+0x11e>
    1ba6:	ec 85       	ldd	r30, Y+12	; 0x0c
    1ba8:	fd 85       	ldd	r31, Y+13	; 0x0d
    1baa:	93 fd       	sbrc	r25, 3
    1bac:	85 91       	lpm	r24, Z+
    1bae:	93 ff       	sbrs	r25, 3
    1bb0:	81 91       	ld	r24, Z+
    1bb2:	fd 87       	std	Y+13, r31	; 0x0d
    1bb4:	ec 87       	std	Y+12, r30	; 0x0c
    1bb6:	88 23       	and	r24, r24
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <vfprintf+0x11e>
    1bba:	b8 cf       	rjmp	.-144    	; 0x1b2c <vfprintf+0x8e>
    1bbc:	98 2f       	mov	r25, r24
    1bbe:	95 54       	subi	r25, 0x45	; 69
    1bc0:	93 30       	cpi	r25, 0x03	; 3
    1bc2:	18 f0       	brcs	.+6      	; 0x1bca <vfprintf+0x12c>
    1bc4:	90 52       	subi	r25, 0x20	; 32
    1bc6:	93 30       	cpi	r25, 0x03	; 3
    1bc8:	38 f4       	brcc	.+14     	; 0x1bd8 <vfprintf+0x13a>
    1bca:	24 e0       	ldi	r18, 0x04	; 4
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	a2 0e       	add	r10, r18
    1bd0:	b3 1e       	adc	r11, r19
    1bd2:	3f e3       	ldi	r19, 0x3F	; 63
    1bd4:	39 83       	std	Y+1, r19	; 0x01
    1bd6:	0f c0       	rjmp	.+30     	; 0x1bf6 <vfprintf+0x158>
    1bd8:	83 36       	cpi	r24, 0x63	; 99
    1bda:	31 f0       	breq	.+12     	; 0x1be8 <vfprintf+0x14a>
    1bdc:	83 37       	cpi	r24, 0x73	; 115
    1bde:	81 f0       	breq	.+32     	; 0x1c00 <vfprintf+0x162>
    1be0:	83 35       	cpi	r24, 0x53	; 83
    1be2:	09 f0       	breq	.+2      	; 0x1be6 <vfprintf+0x148>
    1be4:	5a c0       	rjmp	.+180    	; 0x1c9a <vfprintf+0x1fc>
    1be6:	22 c0       	rjmp	.+68     	; 0x1c2c <vfprintf+0x18e>
    1be8:	f5 01       	movw	r30, r10
    1bea:	80 81       	ld	r24, Z
    1bec:	89 83       	std	Y+1, r24	; 0x01
    1bee:	22 e0       	ldi	r18, 0x02	; 2
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	a2 0e       	add	r10, r18
    1bf4:	b3 1e       	adc	r11, r19
    1bf6:	21 e0       	ldi	r18, 0x01	; 1
    1bf8:	c2 2e       	mov	r12, r18
    1bfa:	d1 2c       	mov	r13, r1
    1bfc:	42 01       	movw	r8, r4
    1bfe:	14 c0       	rjmp	.+40     	; 0x1c28 <vfprintf+0x18a>
    1c00:	92 e0       	ldi	r25, 0x02	; 2
    1c02:	29 2e       	mov	r2, r25
    1c04:	31 2c       	mov	r3, r1
    1c06:	2a 0c       	add	r2, r10
    1c08:	3b 1c       	adc	r3, r11
    1c0a:	f5 01       	movw	r30, r10
    1c0c:	80 80       	ld	r8, Z
    1c0e:	91 80       	ldd	r9, Z+1	; 0x01
    1c10:	16 ff       	sbrs	r17, 6
    1c12:	03 c0       	rjmp	.+6      	; 0x1c1a <vfprintf+0x17c>
    1c14:	6f 2d       	mov	r22, r15
    1c16:	70 e0       	ldi	r23, 0x00	; 0
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <vfprintf+0x180>
    1c1a:	6f ef       	ldi	r22, 0xFF	; 255
    1c1c:	7f ef       	ldi	r23, 0xFF	; 255
    1c1e:	c4 01       	movw	r24, r8
    1c20:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <strnlen>
    1c24:	6c 01       	movw	r12, r24
    1c26:	51 01       	movw	r10, r2
    1c28:	1f 77       	andi	r17, 0x7F	; 127
    1c2a:	15 c0       	rjmp	.+42     	; 0x1c56 <vfprintf+0x1b8>
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	28 2e       	mov	r2, r24
    1c30:	31 2c       	mov	r3, r1
    1c32:	2a 0c       	add	r2, r10
    1c34:	3b 1c       	adc	r3, r11
    1c36:	f5 01       	movw	r30, r10
    1c38:	80 80       	ld	r8, Z
    1c3a:	91 80       	ldd	r9, Z+1	; 0x01
    1c3c:	16 ff       	sbrs	r17, 6
    1c3e:	03 c0       	rjmp	.+6      	; 0x1c46 <vfprintf+0x1a8>
    1c40:	6f 2d       	mov	r22, r15
    1c42:	70 e0       	ldi	r23, 0x00	; 0
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <vfprintf+0x1ac>
    1c46:	6f ef       	ldi	r22, 0xFF	; 255
    1c48:	7f ef       	ldi	r23, 0xFF	; 255
    1c4a:	c4 01       	movw	r24, r8
    1c4c:	0e 94 56 0f 	call	0x1eac	; 0x1eac <strnlen_P>
    1c50:	6c 01       	movw	r12, r24
    1c52:	10 68       	ori	r17, 0x80	; 128
    1c54:	51 01       	movw	r10, r2
    1c56:	13 fd       	sbrc	r17, 3
    1c58:	1c c0       	rjmp	.+56     	; 0x1c92 <vfprintf+0x1f4>
    1c5a:	06 c0       	rjmp	.+12     	; 0x1c68 <vfprintf+0x1ca>
    1c5c:	80 e2       	ldi	r24, 0x20	; 32
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	b3 01       	movw	r22, r6
    1c62:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <fputc>
    1c66:	ea 94       	dec	r14
    1c68:	8e 2d       	mov	r24, r14
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	c8 16       	cp	r12, r24
    1c6e:	d9 06       	cpc	r13, r25
    1c70:	a8 f3       	brcs	.-22     	; 0x1c5c <vfprintf+0x1be>
    1c72:	0f c0       	rjmp	.+30     	; 0x1c92 <vfprintf+0x1f4>
    1c74:	f4 01       	movw	r30, r8
    1c76:	17 fd       	sbrc	r17, 7
    1c78:	85 91       	lpm	r24, Z+
    1c7a:	17 ff       	sbrs	r17, 7
    1c7c:	81 91       	ld	r24, Z+
    1c7e:	4f 01       	movw	r8, r30
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	b3 01       	movw	r22, r6
    1c84:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <fputc>
    1c88:	e1 10       	cpse	r14, r1
    1c8a:	ea 94       	dec	r14
    1c8c:	08 94       	sec
    1c8e:	c1 08       	sbc	r12, r1
    1c90:	d1 08       	sbc	r13, r1
    1c92:	c1 14       	cp	r12, r1
    1c94:	d1 04       	cpc	r13, r1
    1c96:	71 f7       	brne	.-36     	; 0x1c74 <vfprintf+0x1d6>
    1c98:	e7 c0       	rjmp	.+462    	; 0x1e68 <vfprintf+0x3ca>
    1c9a:	84 36       	cpi	r24, 0x64	; 100
    1c9c:	11 f0       	breq	.+4      	; 0x1ca2 <vfprintf+0x204>
    1c9e:	89 36       	cpi	r24, 0x69	; 105
    1ca0:	51 f5       	brne	.+84     	; 0x1cf6 <vfprintf+0x258>
    1ca2:	f5 01       	movw	r30, r10
    1ca4:	17 ff       	sbrs	r17, 7
    1ca6:	07 c0       	rjmp	.+14     	; 0x1cb6 <vfprintf+0x218>
    1ca8:	80 81       	ld	r24, Z
    1caa:	91 81       	ldd	r25, Z+1	; 0x01
    1cac:	a2 81       	ldd	r26, Z+2	; 0x02
    1cae:	b3 81       	ldd	r27, Z+3	; 0x03
    1cb0:	24 e0       	ldi	r18, 0x04	; 4
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	08 c0       	rjmp	.+16     	; 0x1cc6 <vfprintf+0x228>
    1cb6:	80 81       	ld	r24, Z
    1cb8:	91 81       	ldd	r25, Z+1	; 0x01
    1cba:	aa 27       	eor	r26, r26
    1cbc:	97 fd       	sbrc	r25, 7
    1cbe:	a0 95       	com	r26
    1cc0:	ba 2f       	mov	r27, r26
    1cc2:	22 e0       	ldi	r18, 0x02	; 2
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	a2 0e       	add	r10, r18
    1cc8:	b3 1e       	adc	r11, r19
    1cca:	01 2f       	mov	r16, r17
    1ccc:	0f 76       	andi	r16, 0x6F	; 111
    1cce:	b7 ff       	sbrs	r27, 7
    1cd0:	08 c0       	rjmp	.+16     	; 0x1ce2 <vfprintf+0x244>
    1cd2:	b0 95       	com	r27
    1cd4:	a0 95       	com	r26
    1cd6:	90 95       	com	r25
    1cd8:	81 95       	neg	r24
    1cda:	9f 4f       	sbci	r25, 0xFF	; 255
    1cdc:	af 4f       	sbci	r26, 0xFF	; 255
    1cde:	bf 4f       	sbci	r27, 0xFF	; 255
    1ce0:	00 68       	ori	r16, 0x80	; 128
    1ce2:	bc 01       	movw	r22, r24
    1ce4:	cd 01       	movw	r24, r26
    1ce6:	a2 01       	movw	r20, r4
    1ce8:	2a e0       	ldi	r18, 0x0A	; 10
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__ultoa_invert>
    1cf0:	d8 2e       	mov	r13, r24
    1cf2:	d4 18       	sub	r13, r4
    1cf4:	3f c0       	rjmp	.+126    	; 0x1d74 <vfprintf+0x2d6>
    1cf6:	85 37       	cpi	r24, 0x75	; 117
    1cf8:	21 f4       	brne	.+8      	; 0x1d02 <vfprintf+0x264>
    1cfa:	1f 7e       	andi	r17, 0xEF	; 239
    1cfc:	2a e0       	ldi	r18, 0x0A	; 10
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	20 c0       	rjmp	.+64     	; 0x1d42 <vfprintf+0x2a4>
    1d02:	19 7f       	andi	r17, 0xF9	; 249
    1d04:	8f 36       	cpi	r24, 0x6F	; 111
    1d06:	a9 f0       	breq	.+42     	; 0x1d32 <vfprintf+0x294>
    1d08:	80 37       	cpi	r24, 0x70	; 112
    1d0a:	20 f4       	brcc	.+8      	; 0x1d14 <vfprintf+0x276>
    1d0c:	88 35       	cpi	r24, 0x58	; 88
    1d0e:	09 f0       	breq	.+2      	; 0x1d12 <vfprintf+0x274>
    1d10:	ae c0       	rjmp	.+348    	; 0x1e6e <vfprintf+0x3d0>
    1d12:	0b c0       	rjmp	.+22     	; 0x1d2a <vfprintf+0x28c>
    1d14:	80 37       	cpi	r24, 0x70	; 112
    1d16:	21 f0       	breq	.+8      	; 0x1d20 <vfprintf+0x282>
    1d18:	88 37       	cpi	r24, 0x78	; 120
    1d1a:	09 f0       	breq	.+2      	; 0x1d1e <vfprintf+0x280>
    1d1c:	a8 c0       	rjmp	.+336    	; 0x1e6e <vfprintf+0x3d0>
    1d1e:	01 c0       	rjmp	.+2      	; 0x1d22 <vfprintf+0x284>
    1d20:	10 61       	ori	r17, 0x10	; 16
    1d22:	14 ff       	sbrs	r17, 4
    1d24:	09 c0       	rjmp	.+18     	; 0x1d38 <vfprintf+0x29a>
    1d26:	14 60       	ori	r17, 0x04	; 4
    1d28:	07 c0       	rjmp	.+14     	; 0x1d38 <vfprintf+0x29a>
    1d2a:	14 ff       	sbrs	r17, 4
    1d2c:	08 c0       	rjmp	.+16     	; 0x1d3e <vfprintf+0x2a0>
    1d2e:	16 60       	ori	r17, 0x06	; 6
    1d30:	06 c0       	rjmp	.+12     	; 0x1d3e <vfprintf+0x2a0>
    1d32:	28 e0       	ldi	r18, 0x08	; 8
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	05 c0       	rjmp	.+10     	; 0x1d42 <vfprintf+0x2a4>
    1d38:	20 e1       	ldi	r18, 0x10	; 16
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <vfprintf+0x2a4>
    1d3e:	20 e1       	ldi	r18, 0x10	; 16
    1d40:	32 e0       	ldi	r19, 0x02	; 2
    1d42:	f5 01       	movw	r30, r10
    1d44:	17 ff       	sbrs	r17, 7
    1d46:	07 c0       	rjmp	.+14     	; 0x1d56 <vfprintf+0x2b8>
    1d48:	60 81       	ld	r22, Z
    1d4a:	71 81       	ldd	r23, Z+1	; 0x01
    1d4c:	82 81       	ldd	r24, Z+2	; 0x02
    1d4e:	93 81       	ldd	r25, Z+3	; 0x03
    1d50:	44 e0       	ldi	r20, 0x04	; 4
    1d52:	50 e0       	ldi	r21, 0x00	; 0
    1d54:	06 c0       	rjmp	.+12     	; 0x1d62 <vfprintf+0x2c4>
    1d56:	60 81       	ld	r22, Z
    1d58:	71 81       	ldd	r23, Z+1	; 0x01
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	42 e0       	ldi	r20, 0x02	; 2
    1d60:	50 e0       	ldi	r21, 0x00	; 0
    1d62:	a4 0e       	add	r10, r20
    1d64:	b5 1e       	adc	r11, r21
    1d66:	a2 01       	movw	r20, r4
    1d68:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__ultoa_invert>
    1d6c:	d8 2e       	mov	r13, r24
    1d6e:	d4 18       	sub	r13, r4
    1d70:	01 2f       	mov	r16, r17
    1d72:	0f 77       	andi	r16, 0x7F	; 127
    1d74:	06 ff       	sbrs	r16, 6
    1d76:	09 c0       	rjmp	.+18     	; 0x1d8a <vfprintf+0x2ec>
    1d78:	0e 7f       	andi	r16, 0xFE	; 254
    1d7a:	df 14       	cp	r13, r15
    1d7c:	30 f4       	brcc	.+12     	; 0x1d8a <vfprintf+0x2ec>
    1d7e:	04 ff       	sbrs	r16, 4
    1d80:	06 c0       	rjmp	.+12     	; 0x1d8e <vfprintf+0x2f0>
    1d82:	02 fd       	sbrc	r16, 2
    1d84:	04 c0       	rjmp	.+8      	; 0x1d8e <vfprintf+0x2f0>
    1d86:	0f 7e       	andi	r16, 0xEF	; 239
    1d88:	02 c0       	rjmp	.+4      	; 0x1d8e <vfprintf+0x2f0>
    1d8a:	1d 2d       	mov	r17, r13
    1d8c:	01 c0       	rjmp	.+2      	; 0x1d90 <vfprintf+0x2f2>
    1d8e:	1f 2d       	mov	r17, r15
    1d90:	80 2f       	mov	r24, r16
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	04 ff       	sbrs	r16, 4
    1d96:	0c c0       	rjmp	.+24     	; 0x1db0 <vfprintf+0x312>
    1d98:	fe 01       	movw	r30, r28
    1d9a:	ed 0d       	add	r30, r13
    1d9c:	f1 1d       	adc	r31, r1
    1d9e:	20 81       	ld	r18, Z
    1da0:	20 33       	cpi	r18, 0x30	; 48
    1da2:	11 f4       	brne	.+4      	; 0x1da8 <vfprintf+0x30a>
    1da4:	09 7e       	andi	r16, 0xE9	; 233
    1da6:	09 c0       	rjmp	.+18     	; 0x1dba <vfprintf+0x31c>
    1da8:	02 ff       	sbrs	r16, 2
    1daa:	06 c0       	rjmp	.+12     	; 0x1db8 <vfprintf+0x31a>
    1dac:	1e 5f       	subi	r17, 0xFE	; 254
    1dae:	05 c0       	rjmp	.+10     	; 0x1dba <vfprintf+0x31c>
    1db0:	86 78       	andi	r24, 0x86	; 134
    1db2:	90 70       	andi	r25, 0x00	; 0
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	09 f0       	breq	.+2      	; 0x1dba <vfprintf+0x31c>
    1db8:	1f 5f       	subi	r17, 0xFF	; 255
    1dba:	80 2e       	mov	r8, r16
    1dbc:	99 24       	eor	r9, r9
    1dbe:	03 fd       	sbrc	r16, 3
    1dc0:	12 c0       	rjmp	.+36     	; 0x1de6 <vfprintf+0x348>
    1dc2:	00 ff       	sbrs	r16, 0
    1dc4:	0d c0       	rjmp	.+26     	; 0x1de0 <vfprintf+0x342>
    1dc6:	fd 2c       	mov	r15, r13
    1dc8:	1e 15       	cp	r17, r14
    1dca:	50 f4       	brcc	.+20     	; 0x1de0 <vfprintf+0x342>
    1dcc:	fe 0c       	add	r15, r14
    1dce:	f1 1a       	sub	r15, r17
    1dd0:	1e 2d       	mov	r17, r14
    1dd2:	06 c0       	rjmp	.+12     	; 0x1de0 <vfprintf+0x342>
    1dd4:	80 e2       	ldi	r24, 0x20	; 32
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	b3 01       	movw	r22, r6
    1dda:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <fputc>
    1dde:	1f 5f       	subi	r17, 0xFF	; 255
    1de0:	1e 15       	cp	r17, r14
    1de2:	c0 f3       	brcs	.-16     	; 0x1dd4 <vfprintf+0x336>
    1de4:	04 c0       	rjmp	.+8      	; 0x1dee <vfprintf+0x350>
    1de6:	1e 15       	cp	r17, r14
    1de8:	10 f4       	brcc	.+4      	; 0x1dee <vfprintf+0x350>
    1dea:	e1 1a       	sub	r14, r17
    1dec:	01 c0       	rjmp	.+2      	; 0x1df0 <vfprintf+0x352>
    1dee:	ee 24       	eor	r14, r14
    1df0:	84 fe       	sbrs	r8, 4
    1df2:	0f c0       	rjmp	.+30     	; 0x1e12 <vfprintf+0x374>
    1df4:	80 e3       	ldi	r24, 0x30	; 48
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	b3 01       	movw	r22, r6
    1dfa:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <fputc>
    1dfe:	82 fe       	sbrs	r8, 2
    1e00:	1f c0       	rjmp	.+62     	; 0x1e40 <vfprintf+0x3a2>
    1e02:	81 fe       	sbrs	r8, 1
    1e04:	03 c0       	rjmp	.+6      	; 0x1e0c <vfprintf+0x36e>
    1e06:	88 e5       	ldi	r24, 0x58	; 88
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	10 c0       	rjmp	.+32     	; 0x1e2c <vfprintf+0x38e>
    1e0c:	88 e7       	ldi	r24, 0x78	; 120
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	0d c0       	rjmp	.+26     	; 0x1e2c <vfprintf+0x38e>
    1e12:	c4 01       	movw	r24, r8
    1e14:	86 78       	andi	r24, 0x86	; 134
    1e16:	90 70       	andi	r25, 0x00	; 0
    1e18:	00 97       	sbiw	r24, 0x00	; 0
    1e1a:	91 f0       	breq	.+36     	; 0x1e40 <vfprintf+0x3a2>
    1e1c:	81 fc       	sbrc	r8, 1
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <vfprintf+0x386>
    1e20:	80 e2       	ldi	r24, 0x20	; 32
    1e22:	01 c0       	rjmp	.+2      	; 0x1e26 <vfprintf+0x388>
    1e24:	8b e2       	ldi	r24, 0x2B	; 43
    1e26:	07 fd       	sbrc	r16, 7
    1e28:	8d e2       	ldi	r24, 0x2D	; 45
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	b3 01       	movw	r22, r6
    1e2e:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <fputc>
    1e32:	06 c0       	rjmp	.+12     	; 0x1e40 <vfprintf+0x3a2>
    1e34:	80 e3       	ldi	r24, 0x30	; 48
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	b3 01       	movw	r22, r6
    1e3a:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <fputc>
    1e3e:	fa 94       	dec	r15
    1e40:	df 14       	cp	r13, r15
    1e42:	c0 f3       	brcs	.-16     	; 0x1e34 <vfprintf+0x396>
    1e44:	da 94       	dec	r13
    1e46:	f2 01       	movw	r30, r4
    1e48:	ed 0d       	add	r30, r13
    1e4a:	f1 1d       	adc	r31, r1
    1e4c:	80 81       	ld	r24, Z
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	b3 01       	movw	r22, r6
    1e52:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <fputc>
    1e56:	dd 20       	and	r13, r13
    1e58:	a9 f7       	brne	.-22     	; 0x1e44 <vfprintf+0x3a6>
    1e5a:	06 c0       	rjmp	.+12     	; 0x1e68 <vfprintf+0x3ca>
    1e5c:	80 e2       	ldi	r24, 0x20	; 32
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	b3 01       	movw	r22, r6
    1e62:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <fputc>
    1e66:	ea 94       	dec	r14
    1e68:	ee 20       	and	r14, r14
    1e6a:	c1 f7       	brne	.-16     	; 0x1e5c <vfprintf+0x3be>
    1e6c:	40 ce       	rjmp	.-896    	; 0x1aee <vfprintf+0x50>
    1e6e:	f3 01       	movw	r30, r6
    1e70:	86 81       	ldd	r24, Z+6	; 0x06
    1e72:	97 81       	ldd	r25, Z+7	; 0x07
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <vfprintf+0x3dc>
    1e76:	8f ef       	ldi	r24, 0xFF	; 255
    1e78:	9f ef       	ldi	r25, 0xFF	; 255
    1e7a:	2d 96       	adiw	r28, 0x0d	; 13
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	de bf       	out	0x3e, r29	; 62
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	cd bf       	out	0x3d, r28	; 61
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	1f 91       	pop	r17
    1e8c:	0f 91       	pop	r16
    1e8e:	ff 90       	pop	r15
    1e90:	ef 90       	pop	r14
    1e92:	df 90       	pop	r13
    1e94:	cf 90       	pop	r12
    1e96:	bf 90       	pop	r11
    1e98:	af 90       	pop	r10
    1e9a:	9f 90       	pop	r9
    1e9c:	8f 90       	pop	r8
    1e9e:	7f 90       	pop	r7
    1ea0:	6f 90       	pop	r6
    1ea2:	5f 90       	pop	r5
    1ea4:	4f 90       	pop	r4
    1ea6:	3f 90       	pop	r3
    1ea8:	2f 90       	pop	r2
    1eaa:	08 95       	ret

00001eac <strnlen_P>:
    1eac:	fc 01       	movw	r30, r24
    1eae:	05 90       	lpm	r0, Z+
    1eb0:	61 50       	subi	r22, 0x01	; 1
    1eb2:	70 40       	sbci	r23, 0x00	; 0
    1eb4:	01 10       	cpse	r0, r1
    1eb6:	d8 f7       	brcc	.-10     	; 0x1eae <strnlen_P+0x2>
    1eb8:	80 95       	com	r24
    1eba:	90 95       	com	r25
    1ebc:	8e 0f       	add	r24, r30
    1ebe:	9f 1f       	adc	r25, r31
    1ec0:	08 95       	ret

00001ec2 <strnlen>:
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	61 50       	subi	r22, 0x01	; 1
    1ec6:	70 40       	sbci	r23, 0x00	; 0
    1ec8:	01 90       	ld	r0, Z+
    1eca:	01 10       	cpse	r0, r1
    1ecc:	d8 f7       	brcc	.-10     	; 0x1ec4 <strnlen+0x2>
    1ece:	80 95       	com	r24
    1ed0:	90 95       	com	r25
    1ed2:	8e 0f       	add	r24, r30
    1ed4:	9f 1f       	adc	r25, r31
    1ed6:	08 95       	ret

00001ed8 <fgetc>:
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	ec 01       	movw	r28, r24
    1ede:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee0:	20 ff       	sbrs	r18, 0
    1ee2:	35 c0       	rjmp	.+106    	; 0x1f4e <fgetc+0x76>
    1ee4:	26 ff       	sbrs	r18, 6
    1ee6:	09 c0       	rjmp	.+18     	; 0x1efa <fgetc+0x22>
    1ee8:	2f 7b       	andi	r18, 0xBF	; 191
    1eea:	2b 83       	std	Y+3, r18	; 0x03
    1eec:	8e 81       	ldd	r24, Y+6	; 0x06
    1eee:	9f 81       	ldd	r25, Y+7	; 0x07
    1ef0:	01 96       	adiw	r24, 0x01	; 1
    1ef2:	9f 83       	std	Y+7, r25	; 0x07
    1ef4:	8e 83       	std	Y+6, r24	; 0x06
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	28 c0       	rjmp	.+80     	; 0x1f4a <fgetc+0x72>
    1efa:	22 ff       	sbrs	r18, 2
    1efc:	0f c0       	rjmp	.+30     	; 0x1f1c <fgetc+0x44>
    1efe:	e8 81       	ld	r30, Y
    1f00:	f9 81       	ldd	r31, Y+1	; 0x01
    1f02:	80 81       	ld	r24, Z
    1f04:	99 27       	eor	r25, r25
    1f06:	87 fd       	sbrc	r24, 7
    1f08:	90 95       	com	r25
    1f0a:	00 97       	sbiw	r24, 0x00	; 0
    1f0c:	19 f4       	brne	.+6      	; 0x1f14 <fgetc+0x3c>
    1f0e:	20 62       	ori	r18, 0x20	; 32
    1f10:	2b 83       	std	Y+3, r18	; 0x03
    1f12:	1d c0       	rjmp	.+58     	; 0x1f4e <fgetc+0x76>
    1f14:	31 96       	adiw	r30, 0x01	; 1
    1f16:	f9 83       	std	Y+1, r31	; 0x01
    1f18:	e8 83       	st	Y, r30
    1f1a:	11 c0       	rjmp	.+34     	; 0x1f3e <fgetc+0x66>
    1f1c:	ea 85       	ldd	r30, Y+10	; 0x0a
    1f1e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1f20:	ce 01       	movw	r24, r28
    1f22:	19 95       	eicall
    1f24:	97 ff       	sbrs	r25, 7
    1f26:	0b c0       	rjmp	.+22     	; 0x1f3e <fgetc+0x66>
    1f28:	2b 81       	ldd	r18, Y+3	; 0x03
    1f2a:	3f ef       	ldi	r19, 0xFF	; 255
    1f2c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f2e:	93 07       	cpc	r25, r19
    1f30:	11 f4       	brne	.+4      	; 0x1f36 <fgetc+0x5e>
    1f32:	80 e1       	ldi	r24, 0x10	; 16
    1f34:	01 c0       	rjmp	.+2      	; 0x1f38 <fgetc+0x60>
    1f36:	80 e2       	ldi	r24, 0x20	; 32
    1f38:	82 2b       	or	r24, r18
    1f3a:	8b 83       	std	Y+3, r24	; 0x03
    1f3c:	08 c0       	rjmp	.+16     	; 0x1f4e <fgetc+0x76>
    1f3e:	2e 81       	ldd	r18, Y+6	; 0x06
    1f40:	3f 81       	ldd	r19, Y+7	; 0x07
    1f42:	2f 5f       	subi	r18, 0xFF	; 255
    1f44:	3f 4f       	sbci	r19, 0xFF	; 255
    1f46:	3f 83       	std	Y+7, r19	; 0x07
    1f48:	2e 83       	std	Y+6, r18	; 0x06
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <fgetc+0x7a>
    1f4e:	8f ef       	ldi	r24, 0xFF	; 255
    1f50:	9f ef       	ldi	r25, 0xFF	; 255
    1f52:	df 91       	pop	r29
    1f54:	cf 91       	pop	r28
    1f56:	08 95       	ret

00001f58 <fputc>:
    1f58:	0f 93       	push	r16
    1f5a:	1f 93       	push	r17
    1f5c:	cf 93       	push	r28
    1f5e:	df 93       	push	r29
    1f60:	8c 01       	movw	r16, r24
    1f62:	eb 01       	movw	r28, r22
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	81 ff       	sbrs	r24, 1
    1f68:	1b c0       	rjmp	.+54     	; 0x1fa0 <fputc+0x48>
    1f6a:	82 ff       	sbrs	r24, 2
    1f6c:	0d c0       	rjmp	.+26     	; 0x1f88 <fputc+0x30>
    1f6e:	2e 81       	ldd	r18, Y+6	; 0x06
    1f70:	3f 81       	ldd	r19, Y+7	; 0x07
    1f72:	8c 81       	ldd	r24, Y+4	; 0x04
    1f74:	9d 81       	ldd	r25, Y+5	; 0x05
    1f76:	28 17       	cp	r18, r24
    1f78:	39 07       	cpc	r19, r25
    1f7a:	64 f4       	brge	.+24     	; 0x1f94 <fputc+0x3c>
    1f7c:	e8 81       	ld	r30, Y
    1f7e:	f9 81       	ldd	r31, Y+1	; 0x01
    1f80:	01 93       	st	Z+, r16
    1f82:	f9 83       	std	Y+1, r31	; 0x01
    1f84:	e8 83       	st	Y, r30
    1f86:	06 c0       	rjmp	.+12     	; 0x1f94 <fputc+0x3c>
    1f88:	e8 85       	ldd	r30, Y+8	; 0x08
    1f8a:	f9 85       	ldd	r31, Y+9	; 0x09
    1f8c:	80 2f       	mov	r24, r16
    1f8e:	19 95       	eicall
    1f90:	00 97       	sbiw	r24, 0x00	; 0
    1f92:	31 f4       	brne	.+12     	; 0x1fa0 <fputc+0x48>
    1f94:	8e 81       	ldd	r24, Y+6	; 0x06
    1f96:	9f 81       	ldd	r25, Y+7	; 0x07
    1f98:	01 96       	adiw	r24, 0x01	; 1
    1f9a:	9f 83       	std	Y+7, r25	; 0x07
    1f9c:	8e 83       	std	Y+6, r24	; 0x06
    1f9e:	02 c0       	rjmp	.+4      	; 0x1fa4 <fputc+0x4c>
    1fa0:	0f ef       	ldi	r16, 0xFF	; 255
    1fa2:	1f ef       	ldi	r17, 0xFF	; 255
    1fa4:	c8 01       	movw	r24, r16
    1fa6:	df 91       	pop	r29
    1fa8:	cf 91       	pop	r28
    1faa:	1f 91       	pop	r17
    1fac:	0f 91       	pop	r16
    1fae:	08 95       	ret

00001fb0 <__ultoa_invert>:
    1fb0:	fa 01       	movw	r30, r20
    1fb2:	aa 27       	eor	r26, r26
    1fb4:	28 30       	cpi	r18, 0x08	; 8
    1fb6:	51 f1       	breq	.+84     	; 0x200c <__ultoa_invert+0x5c>
    1fb8:	20 31       	cpi	r18, 0x10	; 16
    1fba:	81 f1       	breq	.+96     	; 0x201c <__ultoa_invert+0x6c>
    1fbc:	e8 94       	clt
    1fbe:	6f 93       	push	r22
    1fc0:	6e 7f       	andi	r22, 0xFE	; 254
    1fc2:	6e 5f       	subi	r22, 0xFE	; 254
    1fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc6:	8f 4f       	sbci	r24, 0xFF	; 255
    1fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fca:	af 4f       	sbci	r26, 0xFF	; 255
    1fcc:	b1 e0       	ldi	r27, 0x01	; 1
    1fce:	3e d0       	rcall	.+124    	; 0x204c <__ultoa_invert+0x9c>
    1fd0:	b4 e0       	ldi	r27, 0x04	; 4
    1fd2:	3c d0       	rcall	.+120    	; 0x204c <__ultoa_invert+0x9c>
    1fd4:	67 0f       	add	r22, r23
    1fd6:	78 1f       	adc	r23, r24
    1fd8:	89 1f       	adc	r24, r25
    1fda:	9a 1f       	adc	r25, r26
    1fdc:	a1 1d       	adc	r26, r1
    1fde:	68 0f       	add	r22, r24
    1fe0:	79 1f       	adc	r23, r25
    1fe2:	8a 1f       	adc	r24, r26
    1fe4:	91 1d       	adc	r25, r1
    1fe6:	a1 1d       	adc	r26, r1
    1fe8:	6a 0f       	add	r22, r26
    1fea:	71 1d       	adc	r23, r1
    1fec:	81 1d       	adc	r24, r1
    1fee:	91 1d       	adc	r25, r1
    1ff0:	a1 1d       	adc	r26, r1
    1ff2:	20 d0       	rcall	.+64     	; 0x2034 <__ultoa_invert+0x84>
    1ff4:	09 f4       	brne	.+2      	; 0x1ff8 <__ultoa_invert+0x48>
    1ff6:	68 94       	set
    1ff8:	3f 91       	pop	r19
    1ffa:	2a e0       	ldi	r18, 0x0A	; 10
    1ffc:	26 9f       	mul	r18, r22
    1ffe:	11 24       	eor	r1, r1
    2000:	30 19       	sub	r19, r0
    2002:	30 5d       	subi	r19, 0xD0	; 208
    2004:	31 93       	st	Z+, r19
    2006:	de f6       	brtc	.-74     	; 0x1fbe <__ultoa_invert+0xe>
    2008:	cf 01       	movw	r24, r30
    200a:	08 95       	ret
    200c:	46 2f       	mov	r20, r22
    200e:	47 70       	andi	r20, 0x07	; 7
    2010:	40 5d       	subi	r20, 0xD0	; 208
    2012:	41 93       	st	Z+, r20
    2014:	b3 e0       	ldi	r27, 0x03	; 3
    2016:	0f d0       	rcall	.+30     	; 0x2036 <__ultoa_invert+0x86>
    2018:	c9 f7       	brne	.-14     	; 0x200c <__ultoa_invert+0x5c>
    201a:	f6 cf       	rjmp	.-20     	; 0x2008 <__ultoa_invert+0x58>
    201c:	46 2f       	mov	r20, r22
    201e:	4f 70       	andi	r20, 0x0F	; 15
    2020:	40 5d       	subi	r20, 0xD0	; 208
    2022:	4a 33       	cpi	r20, 0x3A	; 58
    2024:	18 f0       	brcs	.+6      	; 0x202c <__ultoa_invert+0x7c>
    2026:	49 5d       	subi	r20, 0xD9	; 217
    2028:	31 fd       	sbrc	r19, 1
    202a:	40 52       	subi	r20, 0x20	; 32
    202c:	41 93       	st	Z+, r20
    202e:	02 d0       	rcall	.+4      	; 0x2034 <__ultoa_invert+0x84>
    2030:	a9 f7       	brne	.-22     	; 0x201c <__ultoa_invert+0x6c>
    2032:	ea cf       	rjmp	.-44     	; 0x2008 <__ultoa_invert+0x58>
    2034:	b4 e0       	ldi	r27, 0x04	; 4
    2036:	a6 95       	lsr	r26
    2038:	97 95       	ror	r25
    203a:	87 95       	ror	r24
    203c:	77 95       	ror	r23
    203e:	67 95       	ror	r22
    2040:	ba 95       	dec	r27
    2042:	c9 f7       	brne	.-14     	; 0x2036 <__ultoa_invert+0x86>
    2044:	00 97       	sbiw	r24, 0x00	; 0
    2046:	61 05       	cpc	r22, r1
    2048:	71 05       	cpc	r23, r1
    204a:	08 95       	ret
    204c:	9b 01       	movw	r18, r22
    204e:	ac 01       	movw	r20, r24
    2050:	0a 2e       	mov	r0, r26
    2052:	06 94       	lsr	r0
    2054:	57 95       	ror	r21
    2056:	47 95       	ror	r20
    2058:	37 95       	ror	r19
    205a:	27 95       	ror	r18
    205c:	ba 95       	dec	r27
    205e:	c9 f7       	brne	.-14     	; 0x2052 <__ultoa_invert+0xa2>
    2060:	62 0f       	add	r22, r18
    2062:	73 1f       	adc	r23, r19
    2064:	84 1f       	adc	r24, r20
    2066:	95 1f       	adc	r25, r21
    2068:	a0 1d       	adc	r26, r0
    206a:	08 95       	ret

0000206c <_exit>:
    206c:	f8 94       	cli

0000206e <__stop_program>:
    206e:	ff cf       	rjmp	.-2      	; 0x206e <__stop_program>

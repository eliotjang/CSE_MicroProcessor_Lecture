
BootLoder2550.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  000001fa  0000026e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006e4  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  000009e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000055d  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001c6  00000000  00000000  00000ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036b  00000000  00000000  000011c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00001530  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000142  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000250  00000000  00000000  00001776  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000019c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ef       	ldi	r30, 0xFA	; 250
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	12 e0       	ldi	r17, 0x02	; 2
 112:	a0 e0       	ldi	r26, 0x00	; 0
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	a0 30       	cpi	r26, 0x00	; 0
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
 124:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <wait_for_SPM>:
	asm("SPM");
}

void wait_for_SPM()
{
	while(SPMCSR & (1 << SPMEN))
 12c:	07 b6       	in	r0, 0x37	; 55
 12e:	00 fc       	sbrc	r0, 0
 130:	fd cf       	rjmp	.-6      	; 0x12c <wait_for_SPM>
				;
}
 132:	08 95       	ret

00000134 <do_SPM>:
	pg_addr = (pg_num & 0xff) << 8;
	do_SPM(pg_addr, (1 << PGERS) | (1 << SPMEN));
}

void do_SPM(uint16_t pg_addr, uint8_t spm_cmd)
{
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	0f 92       	push	r0
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	8c 01       	movw	r16, r24
	wait_for_SPM();
 144:	69 83       	std	Y+1, r22	; 0x01
 146:	0e 94 96 00 	call	0x12c	; 0x12c <wait_for_SPM>

	ZPNTR = pg_addr;
 14a:	10 93 1f 00 	sts	0x001F, r17
 14e:	00 93 1e 00 	sts	0x001E, r16
	SPMCSR = spm_cmd;
 152:	69 81       	ldd	r22, Y+1	; 0x01
 154:	67 bf       	out	0x37, r22	; 55
	asm("SPM");
 156:	e8 95       	spm
}
 158:	0f 90       	pop	r0
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	08 95       	ret

00000164 <flash_page_erase>:
#include <avr/io.h>
#include "spm.h"


void flash_page_erase(uint16_t pg_num)
{
 164:	28 2f       	mov	r18, r24
	uint16_t pg_addr;

	RAMPZ = pg_num >> 8;
 166:	9b bf       	out	0x3b, r25	; 59
	pg_addr = (pg_num & 0xff) << 8;
	do_SPM(pg_addr, (1 << PGERS) | (1 << SPMEN));
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	92 2f       	mov	r25, r18
 16c:	63 e0       	ldi	r22, 0x03	; 3
 16e:	0e 94 9a 00 	call	0x134	; 0x134 <do_SPM>
}
 172:	08 95       	ret

00000174 <flash_RWW_clearSB>:
				;
}

void flash_RWW_clearSB()
{
	do_SPM(0, (1<<RWWSRE) | (1<<SPMEN));
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	61 e1       	ldi	r22, 0x11	; 17
 17a:	0e 94 9a 00 	call	0x134	; 0x134 <do_SPM>
}
 17e:	08 95       	ret

00000180 <flash_page_buffer_word_write>:
	for( wd_off = 0,wbp = (uint16_t *)pg_buf; wd_off < pg_bytesz; wd_off += 2, wbp++)
		flash_page_buffer_word_write(wd_off, *wbp);
}

void flash_page_buffer_word_write(uint16_t wd_off, uint16_t wd)
{
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
	R00 = R01;
 184:	c0 e0       	ldi	r28, 0x00	; 0
 186:	d0 e0       	ldi	r29, 0x00	; 0

	PGBUF = wd;
 188:	79 83       	std	Y+1, r23	; 0x01
 18a:	68 83       	st	Y, r22
	ZPNTR = wd_off;
 18c:	90 93 1f 00 	sts	0x001F, r25
 190:	80 93 1e 00 	sts	0x001E, r24

	wait_for_SPM();
 194:	0e 94 96 00 	call	0x12c	; 0x12c <wait_for_SPM>

	SPMCSR = (1<<SPMEN);
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	87 bf       	out	0x37, r24	; 55
	asm("SPM");
 19c:	e8 95       	spm

	R01=R00;
 19e:	88 81       	ld	r24, Y
 1a0:	80 93 01 00 	sts	0x0001, r24
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <flash_page_buffer_write>:
#include <avr/io.h>
#include "spl.h"
#include "spm.h"

void flash_page_buffer_write(uint8_t pg_buf[], uint16_t pg_bytesz)
{
 1aa:	ef 92       	push	r14
 1ac:	ff 92       	push	r15
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	7b 01       	movw	r14, r22
	uint16_t wd_off, *wbp;

	for( wd_off = 0,wbp = (uint16_t *)pg_buf; wd_off < pg_bytesz; wd_off += 2, wbp++)
 1b8:	8c 01       	movw	r16, r24
 1ba:	c0 e0       	ldi	r28, 0x00	; 0
 1bc:	d0 e0       	ldi	r29, 0x00	; 0
 1be:	08 c0       	rjmp	.+16     	; 0x1d0 <flash_page_buffer_write+0x26>
		flash_page_buffer_word_write(wd_off, *wbp);
 1c0:	f8 01       	movw	r30, r16
 1c2:	61 91       	ld	r22, Z+
 1c4:	71 91       	ld	r23, Z+
 1c6:	8f 01       	movw	r16, r30
 1c8:	ce 01       	movw	r24, r28
 1ca:	0e 94 c0 00 	call	0x180	; 0x180 <flash_page_buffer_word_write>

void flash_page_buffer_write(uint8_t pg_buf[], uint16_t pg_bytesz)
{
	uint16_t wd_off, *wbp;

	for( wd_off = 0,wbp = (uint16_t *)pg_buf; wd_off < pg_bytesz; wd_off += 2, wbp++)
 1ce:	22 96       	adiw	r28, 0x02	; 2
 1d0:	ce 15       	cp	r28, r14
 1d2:	df 05       	cpc	r29, r15
 1d4:	a8 f3       	brcs	.-22     	; 0x1c0 <flash_page_buffer_write+0x16>
		flash_page_buffer_word_write(wd_off, *wbp);
}
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	1f 91       	pop	r17
 1dc:	0f 91       	pop	r16
 1de:	ff 90       	pop	r15
 1e0:	ef 90       	pop	r14
 1e2:	08 95       	ret

000001e4 <flash_page_write>:
	asm("SPM");

	R01=R00;
}
void flash_page_write(uint16_t pg_num)
{
 1e4:	28 2f       	mov	r18, r24
	uint16_t pg_addr;

	RAMPZ = pg_num >> 8;
 1e6:	9b bf       	out	0x3b, r25	; 59
	pg_addr = (pg_num & 0xff) <<8;

	do_SPM(pg_addr, (1<<PGWRT) | (1<<SPMEN));
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	92 2f       	mov	r25, r18
 1ec:	65 e0       	ldi	r22, 0x05	; 5
 1ee:	0e 94 9a 00 	call	0x134	; 0x134 <do_SPM>
}
 1f2:	08 95       	ret

000001f4 <main>:
#include <stdio.h>

int main()
{
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <main>

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>

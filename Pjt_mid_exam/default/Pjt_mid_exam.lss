
Pjt_mid_exam.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800200  00001420  000014b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001420  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025d  0080026e  0080026e  00001522  2**0
                  ALLOC
  3 .stab         00000f78  00000000  00000000  00001524  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000339  00000000  00000000  0000249c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000290  00000000  00000000  000027d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023f0  00000000  00000000  00002a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010e2  00000000  00000000  00004e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001393  00000000  00000000  00005f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e0  00000000  00000000  000072d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e8  00000000  00000000  000079b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019ab  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00009a43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_15>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 9c 04 	jmp	0x938	; 0x938 <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 e2       	ldi	r30, 0x20	; 32
      fc:	f4 e1       	ldi	r31, 0x14	; 20
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 36       	cpi	r26, 0x6E	; 110
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	14 e0       	ldi	r17, 0x04	; 4
     112:	ae e6       	ldi	r26, 0x6E	; 110
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	ab 3c       	cpi	r26, 0xCB	; 203
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 3c 05 	call	0xa78	; 0xa78 <main>
     124:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <pr_time>:
		sec++;
		pr_time(sec);
	}
}
void pr_time(int sec)
{
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
	int ss, mm, hh;
	ss = sec % 60; sec = sec / 60;
     130:	2c e3       	ldi	r18, 0x3C	; 60
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	b9 01       	movw	r22, r18
     136:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__divmodhi4>
     13a:	ec 01       	movw	r28, r24
	mm = sec % 60; sec = sec / 60;
	hh = sec;
	printf("%.2d:%.2d:%.2d\n",hh,mm,ss);
     13c:	8d b7       	in	r24, 0x3d	; 61
     13e:	9e b7       	in	r25, 0x3e	; 62
     140:	08 97       	sbiw	r24, 0x08	; 8
     142:	0f b6       	in	r0, 0x3f	; 63
     144:	f8 94       	cli
     146:	9e bf       	out	0x3e, r25	; 62
     148:	0f be       	out	0x3f, r0	; 63
     14a:	8d bf       	out	0x3d, r24	; 61
     14c:	ed b7       	in	r30, 0x3d	; 61
     14e:	fe b7       	in	r31, 0x3e	; 62
     150:	31 96       	adiw	r30, 0x01	; 1
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	92 e0       	ldi	r25, 0x02	; 2
     156:	ad b7       	in	r26, 0x3d	; 61
     158:	be b7       	in	r27, 0x3e	; 62
     15a:	12 96       	adiw	r26, 0x02	; 2
     15c:	9c 93       	st	X, r25
     15e:	8e 93       	st	-X, r24
     160:	11 97       	sbiw	r26, 0x01	; 1
}
void pr_time(int sec)
{
	int ss, mm, hh;
	ss = sec % 60; sec = sec / 60;
	mm = sec % 60; sec = sec / 60;
     162:	cb 01       	movw	r24, r22
     164:	b9 01       	movw	r22, r18
     166:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__divmodhi4>
	hh = sec;
	printf("%.2d:%.2d:%.2d\n",hh,mm,ss);
     16a:	73 83       	std	Z+3, r23	; 0x03
     16c:	62 83       	std	Z+2, r22	; 0x02
     16e:	95 83       	std	Z+5, r25	; 0x05
     170:	84 83       	std	Z+4, r24	; 0x04
     172:	d7 83       	std	Z+7, r29	; 0x07
     174:	c6 83       	std	Z+6, r28	; 0x06
     176:	0e 94 0e 07 	call	0xe1c	; 0xe1c <printf>
     17a:	8d b7       	in	r24, 0x3d	; 61
     17c:	9e b7       	in	r25, 0x3e	; 62
     17e:	08 96       	adiw	r24, 0x08	; 8
     180:	0f b6       	in	r0, 0x3f	; 63
     182:	f8 94       	cli
     184:	9e bf       	out	0x3e, r25	; 62
     186:	0f be       	out	0x3f, r0	; 63
     188:	8d bf       	out	0x3d, r24	; 61
			h++;
			m=0;
		}
		printf("%2d:%2d:%2d\n",h,m,s);
	}*/
}
     18a:	df 91       	pop	r29
     18c:	cf 91       	pop	r28
     18e:	08 95       	ret

00000190 <timer2_init>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <compat/deprecated.h>
#include "timer2.h"
void timer2_init(void) {
	TCNT2=0;
     190:	10 92 b2 00 	sts	0x00B2, r1
	sbi(ASSR,AS2);
     194:	e6 eb       	ldi	r30, 0xB6	; 182
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	80 81       	ld	r24, Z
     19a:	80 62       	ori	r24, 0x20	; 32
     19c:	80 83       	st	Z, r24
	sbi(TIMSK2, TOIE2);
     19e:	e0 e7       	ldi	r30, 0x70	; 112
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	80 81       	ld	r24, Z
     1a4:	81 60       	ori	r24, 0x01	; 1
     1a6:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS22) | (1<<CS20);
     1a8:	e1 eb       	ldi	r30, 0xB1	; 177
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	85 60       	ori	r24, 0x05	; 5
     1b0:	80 83       	st	Z, r24
}
     1b2:	08 95       	ret

000001b4 <__vector_15>:
ISR(TIMER2_OVF_vect) {
     1b4:	1f 92       	push	r1
     1b6:	0f 92       	push	r0
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	0f 92       	push	r0
     1bc:	11 24       	eor	r1, r1
     1be:	8f 93       	push	r24
     1c0:	9f 93       	push	r25
	static  int count = 0;
	TCNT2=0;
     1c2:	10 92 b2 00 	sts	0x00B2, r1
	if((++count%4)==0)
     1c6:	80 91 6e 02 	lds	r24, 0x026E
     1ca:	90 91 6f 02 	lds	r25, 0x026F
     1ce:	01 96       	adiw	r24, 0x01	; 1
     1d0:	90 93 6f 02 	sts	0x026F, r25
     1d4:	80 93 6e 02 	sts	0x026E, r24
     1d8:	83 70       	andi	r24, 0x03	; 3
     1da:	90 70       	andi	r25, 0x00	; 0
     1dc:	00 97       	sbiw	r24, 0x00	; 0
     1de:	19 f4       	brne	.+6      	; 0x1e6 <__vector_15+0x32>
		time_flag = 1;
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	80 93 7f 04 	sts	0x047F, r24
	//time_flag=1;
}
     1e6:	9f 91       	pop	r25
     1e8:	8f 91       	pop	r24
     1ea:	0f 90       	pop	r0
     1ec:	0f be       	out	0x3f, r0	; 63
     1ee:	0f 90       	pop	r0
     1f0:	1f 90       	pop	r1
     1f2:	18 95       	reti

000001f4 <is_prime>:
#include <string.h>
#include "list.h"
#include "timer.h"
#include <stdlib.h>

int is_prime(int n) {
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	fc 01       	movw	r30, r24
	int i;
	for(i=2;i<=n/2;i++)
     1fa:	62 e0       	ldi	r22, 0x02	; 2
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__divmodhi4>
     202:	eb 01       	movw	r28, r22
     204:	22 e0       	ldi	r18, 0x02	; 2
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	08 c0       	rjmp	.+16     	; 0x21a <is_prime+0x26>
		if((n%i)==0) return(0);
     20a:	cf 01       	movw	r24, r30
     20c:	b9 01       	movw	r22, r18
     20e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__divmodhi4>
     212:	00 97       	sbiw	r24, 0x00	; 0
     214:	41 f0       	breq	.+16     	; 0x226 <is_prime+0x32>
#include "timer.h"
#include <stdlib.h>

int is_prime(int n) {
	int i;
	for(i=2;i<=n/2;i++)
     216:	2f 5f       	subi	r18, 0xFF	; 255
     218:	3f 4f       	sbci	r19, 0xFF	; 255
     21a:	c2 17       	cp	r28, r18
     21c:	d3 07       	cpc	r29, r19
     21e:	ac f7       	brge	.-22     	; 0x20a <is_prime+0x16>
		if((n%i)==0) return(0);
	return(1);
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	02 c0       	rjmp	.+4      	; 0x22a <is_prime+0x36>
#include <stdlib.h>

int is_prime(int n) {
	int i;
	for(i=2;i<=n/2;i++)
		if((n%i)==0) return(0);
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	90 e0       	ldi	r25, 0x00	; 0
	return(1);
}
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	08 95       	ret

00000230 <app_prime>:
void app_prime(char *ap) {
     230:	cf 92       	push	r12
     232:	df 92       	push	r13
     234:	ef 92       	push	r14
     236:	ff 92       	push	r15
     238:	0f 93       	push	r16
     23a:	1f 93       	push	r17
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
	int t=2000,count=0,n;
	if(ap) t= atoi(ap);
     240:	00 97       	sbiw	r24, 0x00	; 0
     242:	21 f0       	breq	.+8      	; 0x24c <app_prime+0x1c>
     244:	0e 94 a4 06 	call	0xd48	; 0xd48 <atoi>
     248:	7c 01       	movw	r14, r24
     24a:	04 c0       	rjmp	.+8      	; 0x254 <app_prime+0x24>
	for(i=2;i<=n/2;i++)
		if((n%i)==0) return(0);
	return(1);
}
void app_prime(char *ap) {
	int t=2000,count=0,n;
     24c:	90 ed       	ldi	r25, 0xD0	; 208
     24e:	e9 2e       	mov	r14, r25
     250:	97 e0       	ldi	r25, 0x07	; 7
     252:	f9 2e       	mov	r15, r25
	if(ap) t= atoi(ap);
	for(n=2; n<=t ;n++) {
     254:	c2 e0       	ldi	r28, 0x02	; 2
     256:	d0 e0       	ldi	r29, 0x00	; 0
	for(i=2;i<=n/2;i++)
		if((n%i)==0) return(0);
	return(1);
}
void app_prime(char *ap) {
	int t=2000,count=0,n;
     258:	00 e0       	ldi	r16, 0x00	; 0
     25a:	10 e0       	ldi	r17, 0x00	; 0
	if(ap) t= atoi(ap);
	for(n=2; n<=t ;n++) {
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n",n);
     25c:	80 e1       	ldi	r24, 0x10	; 16
     25e:	c8 2e       	mov	r12, r24
     260:	82 e0       	ldi	r24, 0x02	; 2
     262:	d8 2e       	mov	r13, r24
	return(1);
}
void app_prime(char *ap) {
	int t=2000,count=0,n;
	if(ap) t= atoi(ap);
	for(n=2; n<=t ;n++) {
     264:	16 c0       	rjmp	.+44     	; 0x292 <app_prime+0x62>
		if(is_prime(n)) {
     266:	ce 01       	movw	r24, r28
     268:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <is_prime>
     26c:	00 97       	sbiw	r24, 0x00	; 0
     26e:	81 f0       	breq	.+32     	; 0x290 <app_prime+0x60>
			count++;
     270:	0f 5f       	subi	r16, 0xFF	; 255
     272:	1f 4f       	sbci	r17, 0xFF	; 255
			printf("%d is a prime number !!!\n",n);
     274:	00 d0       	rcall	.+0      	; 0x276 <app_prime+0x46>
     276:	0f 92       	push	r0
     278:	ed b7       	in	r30, 0x3d	; 61
     27a:	fe b7       	in	r31, 0x3e	; 62
     27c:	d2 82       	std	Z+2, r13	; 0x02
     27e:	c1 82       	std	Z+1, r12	; 0x01
     280:	d4 83       	std	Z+4, r29	; 0x04
     282:	c3 83       	std	Z+3, r28	; 0x03
     284:	0e 94 0e 07 	call	0xe1c	; 0xe1c <printf>
     288:	0f 90       	pop	r0
     28a:	0f 90       	pop	r0
     28c:	0f 90       	pop	r0
     28e:	0f 90       	pop	r0
	return(1);
}
void app_prime(char *ap) {
	int t=2000,count=0,n;
	if(ap) t= atoi(ap);
	for(n=2; n<=t ;n++) {
     290:	21 96       	adiw	r28, 0x01	; 1
     292:	ec 16       	cp	r14, r28
     294:	fd 06       	cpc	r15, r29
     296:	3c f7       	brge	.-50     	; 0x266 <app_prime+0x36>
		if(is_prime(n)) {
			count++;
			printf("%d is a prime number !!!\n",n);
		}
	}
	printf("count=%d\n",count);
     298:	00 d0       	rcall	.+0      	; 0x29a <app_prime+0x6a>
     29a:	0f 92       	push	r0
     29c:	8a e2       	ldi	r24, 0x2A	; 42
     29e:	92 e0       	ldi	r25, 0x02	; 2
     2a0:	ed b7       	in	r30, 0x3d	; 61
     2a2:	fe b7       	in	r31, 0x3e	; 62
     2a4:	92 83       	std	Z+2, r25	; 0x02
     2a6:	81 83       	std	Z+1, r24	; 0x01
     2a8:	14 83       	std	Z+4, r17	; 0x04
     2aa:	03 83       	std	Z+3, r16	; 0x03
     2ac:	0e 94 0e 07 	call	0xe1c	; 0xe1c <printf>
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
}
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	1f 91       	pop	r17
     2be:	0f 91       	pop	r16
     2c0:	ff 90       	pop	r15
     2c2:	ef 90       	pop	r14
     2c4:	df 90       	pop	r13
     2c6:	cf 90       	pop	r12
     2c8:	08 95       	ret

000002ca <app_list>:
void app_list(char *ap) {
     2ca:	cf 92       	push	r12
     2cc:	df 92       	push	r13
     2ce:	ff 92       	push	r15
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	cd b7       	in	r28, 0x3d	; 61
     2da:	de b7       	in	r29, 0x3e	; 62
     2dc:	28 97       	sbiw	r28, 0x08	; 8
     2de:	0f b6       	in	r0, 0x3f	; 63
     2e0:	f8 94       	cli
     2e2:	de bf       	out	0x3e, r29	; 62
     2e4:	0f be       	out	0x3f, r0	; 63
     2e6:	cd bf       	out	0x3d, r28	; 61
	char buf[8],how='a';
	struct node *np;

	if(ap) how = *ap;
     2e8:	00 97       	sbiw	r24, 0x00	; 0
     2ea:	19 f0       	breq	.+6      	; 0x2f2 <app_list+0x28>
     2ec:	fc 01       	movw	r30, r24
     2ee:	f0 80       	ld	r15, Z
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <app_list+0x2c>
		}
	}
	printf("count=%d\n",count);
}
void app_list(char *ap) {
	char buf[8],how='a';
     2f2:	31 e6       	ldi	r19, 0x61	; 97
     2f4:	f3 2e       	mov	r15, r19
	struct node *np;

	if(ap) how = *ap;
	while(1) {
		printf(">> ");
     2f6:	24 e3       	ldi	r18, 0x34	; 52
     2f8:	c2 2e       	mov	r12, r18
     2fa:	22 e0       	ldi	r18, 0x02	; 2
     2fc:	d2 2e       	mov	r13, r18
     2fe:	0f 92       	push	r0
     300:	0f 92       	push	r0
     302:	ed b7       	in	r30, 0x3d	; 61
     304:	fe b7       	in	r31, 0x3e	; 62
     306:	d2 82       	std	Z+2, r13	; 0x02
     308:	c1 82       	std	Z+1, r12	; 0x01
     30a:	0e 94 0e 07 	call	0xe1c	; 0xe1c <printf>
		if(fgets(buf,8,stdin) ==NULL)
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	40 91 c5 04 	lds	r20, 0x04C5
     316:	50 91 c6 04 	lds	r21, 0x04C6
     31a:	ce 01       	movw	r24, r28
     31c:	01 96       	adiw	r24, 0x01	; 1
     31e:	68 e0       	ldi	r22, 0x08	; 8
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	0e 94 da 06 	call	0xdb4	; 0xdb4 <fgets>
     326:	00 97       	sbiw	r24, 0x00	; 0
     328:	d9 f0       	breq	.+54     	; 0x360 <app_list+0x96>
			break;
		np=get_node();
     32a:	0e 94 39 02 	call	0x472	; 0x472 <get_node>
     32e:	8c 01       	movw	r16, r24
		strcpy(np->data,buf);
     330:	be 01       	movw	r22, r28
     332:	6f 5f       	subi	r22, 0xFF	; 255
     334:	7f 4f       	sbci	r23, 0xFF	; 255
     336:	0e 94 cb 06 	call	0xd96	; 0xd96 <strcpy>
		switch(how) {
     33a:	f8 e6       	ldi	r31, 0x68	; 104
     33c:	ff 16       	cp	r15, r31
     33e:	21 f0       	breq	.+8      	; 0x348 <app_list+0x7e>
     340:	84 e7       	ldi	r24, 0x74	; 116
     342:	f8 16       	cp	r15, r24
     344:	49 f4       	brne	.+18     	; 0x358 <app_list+0x8e>
     346:	04 c0       	rjmp	.+8      	; 0x350 <app_list+0x86>
			case 'h':insert_node_head(np); break;
     348:	c8 01       	movw	r24, r16
     34a:	0e 94 41 02 	call	0x482	; 0x482 <insert_node_head>
     34e:	d7 cf       	rjmp	.-82     	; 0x2fe <app_list+0x34>
			case 't':insert_node_tail(np); break;
     350:	c8 01       	movw	r24, r16
     352:	0e 94 56 02 	call	0x4ac	; 0x4ac <insert_node_tail>
     356:	d3 cf       	rjmp	.-90     	; 0x2fe <app_list+0x34>
			default:insert_node_ascn(np); break;
     358:	c8 01       	movw	r24, r16
     35a:	0e 94 6d 02 	call	0x4da	; 0x4da <insert_node_ascn>
     35e:	cf cf       	rjmp	.-98     	; 0x2fe <app_list+0x34>
		}
	}
	tour_list();
     360:	0e 94 af 02 	call	0x55e	; 0x55e <tour_list>
	free_list();
     364:	0e 94 da 02 	call	0x5b4	; 0x5b4 <free_list>
}
     368:	28 96       	adiw	r28, 0x08	; 8
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	f8 94       	cli
     36e:	de bf       	out	0x3e, r29	; 62
     370:	0f be       	out	0x3f, r0	; 63
     372:	cd bf       	out	0x3d, r28	; 61
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	1f 91       	pop	r17
     37a:	0f 91       	pop	r16
     37c:	ff 90       	pop	r15
     37e:	df 90       	pop	r13
     380:	cf 90       	pop	r12
     382:	08 95       	ret

00000384 <app_timer>:
void app_timer(char *ap) {
     384:	0f 93       	push	r16
     386:	1f 93       	push	r17
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	62 97       	sbiw	r28, 0x12	; 18
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	f8 94       	cli
     396:	de bf       	out	0x3e, r29	; 62
     398:	0f be       	out	0x3f, r0	; 63
     39a:	cd bf       	out	0x3d, r28	; 61
	char buf[8];
	int ms;
	struct task tsk;

	while(1) {
		printf(">> ");
     39c:	04 e3       	ldi	r16, 0x34	; 52
     39e:	12 e0       	ldi	r17, 0x02	; 2
     3a0:	0f 92       	push	r0
     3a2:	0f 92       	push	r0
     3a4:	ed b7       	in	r30, 0x3d	; 61
     3a6:	fe b7       	in	r31, 0x3e	; 62
     3a8:	12 83       	std	Z+2, r17	; 0x02
     3aa:	01 83       	std	Z+1, r16	; 0x01
     3ac:	0e 94 0e 07 	call	0xe1c	; 0xe1c <printf>
		if(fgets(buf,8,stdin) ==NULL || (ms=atoi(buf))==0)
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	40 91 c5 04 	lds	r20, 0x04C5
     3b8:	50 91 c6 04 	lds	r21, 0x04C6
     3bc:	ce 01       	movw	r24, r28
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	68 e0       	ldi	r22, 0x08	; 8
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	0e 94 da 06 	call	0xdb4	; 0xdb4 <fgets>
     3c8:	00 97       	sbiw	r24, 0x00	; 0
     3ca:	61 f0       	breq	.+24     	; 0x3e4 <app_timer+0x60>
     3cc:	ce 01       	movw	r24, r28
     3ce:	01 96       	adiw	r24, 0x01	; 1
     3d0:	0e 94 a4 06 	call	0xd48	; 0xd48 <atoi>
     3d4:	bc 01       	movw	r22, r24
     3d6:	00 97       	sbiw	r24, 0x00	; 0
     3d8:	29 f0       	breq	.+10     	; 0x3e4 <app_timer+0x60>
			break;
		insert_timer(&tsk,ms);
     3da:	ce 01       	movw	r24, r28
     3dc:	09 96       	adiw	r24, 0x09	; 9
     3de:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <insert_timer>
	}
     3e2:	de cf       	rjmp	.-68     	; 0x3a0 <app_timer+0x1c>
	tour_timer();
     3e4:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <tour_timer>
	free_timer();
     3e8:	0e 94 bc 03 	call	0x778	; 0x778 <free_timer>
}
     3ec:	62 96       	adiw	r28, 0x12	; 18
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	f8 94       	cli
     3f2:	de bf       	out	0x3e, r29	; 62
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	cd bf       	out	0x3d, r28	; 61
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	08 95       	ret

00000402 <led_init>:
#include "led.h"

static uint8_t Leds;

void led_init() {
	Leds = DDRL = PORTL = 0xff;
     402:	8f ef       	ldi	r24, 0xFF	; 255
     404:	80 93 0b 01 	sts	0x010B, r24
     408:	80 93 0a 01 	sts	0x010A, r24
     40c:	80 93 70 02 	sts	0x0270, r24
}
     410:	08 95       	ret

00000412 <led_on_all>:
void led_on_all() {
	Leds = PORTL = 0x00;
     412:	10 92 0b 01 	sts	0x010B, r1
     416:	10 92 70 02 	sts	0x0270, r1
}
     41a:	08 95       	ret

0000041c <led_off_all>:
void led_off_all() {
	Leds = PORTL = 0xff;
     41c:	8f ef       	ldi	r24, 0xFF	; 255
     41e:	80 93 0b 01 	sts	0x010B, r24
     422:	80 93 70 02 	sts	0x0270, r24
}
     426:	08 95       	ret

00000428 <led_on>:
void led_on(uint8_t led_no) {
	Leds &= ~(1<<led_no);
     428:	21 e0       	ldi	r18, 0x01	; 1
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	02 c0       	rjmp	.+4      	; 0x432 <led_on+0xa>
     42e:	22 0f       	add	r18, r18
     430:	33 1f       	adc	r19, r19
     432:	8a 95       	dec	r24
     434:	e2 f7       	brpl	.-8      	; 0x42e <led_on+0x6>
     436:	20 95       	com	r18
     438:	80 91 70 02 	lds	r24, 0x0270
     43c:	28 23       	and	r18, r24
     43e:	20 93 70 02 	sts	0x0270, r18
	PORTL = Leds;
     442:	20 93 0b 01 	sts	0x010B, r18
}
     446:	08 95       	ret

00000448 <led_off>:
void led_off(uint8_t led_no) {
	Leds |= (1<<led_no);
     448:	21 e0       	ldi	r18, 0x01	; 1
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	02 c0       	rjmp	.+4      	; 0x452 <led_off+0xa>
     44e:	22 0f       	add	r18, r18
     450:	33 1f       	adc	r19, r19
     452:	8a 95       	dec	r24
     454:	e2 f7       	brpl	.-8      	; 0x44e <led_off+0x6>
     456:	80 91 70 02 	lds	r24, 0x0270
     45a:	82 2b       	or	r24, r18
     45c:	80 93 70 02 	sts	0x0270, r24
	PORTL = Leds;
     460:	80 93 0b 01 	sts	0x010B, r24
}
     464:	08 95       	ret

00000466 <led_set>:
void led_set(uint8_t led_mask) {
	Leds = ~led_mask;
     466:	80 95       	com	r24
     468:	80 93 70 02 	sts	0x0270, r24
	PORTL = Leds;
     46c:	80 93 0b 01 	sts	0x010B, r24
}
     470:	08 95       	ret

00000472 <get_node>:

struct node *Head = NULL;

struct node *get_node() {
	struct node *cp;
	cp=(struct node *)malloc(sizeof(struct node));
     472:	8a e0       	ldi	r24, 0x0A	; 10
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 75 05 	call	0xaea	; 0xaea <malloc>
	return(cp);
}
     47a:	08 95       	ret

0000047c <free_node>:
void free_node(struct node *np) {
	free(np);
     47c:	0e 94 0b 06 	call	0xc16	; 0xc16 <free>
}
     480:	08 95       	ret

00000482 <insert_node_head>:
void insert_node_head(struct node *np) {
     482:	fc 01       	movw	r30, r24
	if(!Head) {
     484:	80 91 71 02 	lds	r24, 0x0271
     488:	90 91 72 02 	lds	r25, 0x0272
     48c:	00 97       	sbiw	r24, 0x00	; 0
     48e:	39 f4       	brne	.+14     	; 0x49e <insert_node_head+0x1c>
		Head = np;
     490:	f0 93 72 02 	sts	0x0272, r31
     494:	e0 93 71 02 	sts	0x0271, r30
		np->link = NULL;
     498:	11 86       	std	Z+9, r1	; 0x09
     49a:	10 86       	std	Z+8, r1	; 0x08
     49c:	08 95       	ret
	}
	else {
		np->link = Head;
     49e:	91 87       	std	Z+9, r25	; 0x09
     4a0:	80 87       	std	Z+8, r24	; 0x08
		Head = np;
     4a2:	f0 93 72 02 	sts	0x0272, r31
     4a6:	e0 93 71 02 	sts	0x0271, r30
     4aa:	08 95       	ret

000004ac <insert_node_tail>:
	}
}
void insert_node_tail(struct node *np) {
	struct node *cp;
	if(!Head)
     4ac:	e0 91 71 02 	lds	r30, 0x0271
     4b0:	f0 91 72 02 	lds	r31, 0x0272
     4b4:	30 97       	sbiw	r30, 0x00	; 0
     4b6:	31 f4       	brne	.+12     	; 0x4c4 <insert_node_tail+0x18>
		Head=np;
     4b8:	90 93 72 02 	sts	0x0272, r25
     4bc:	80 93 71 02 	sts	0x0271, r24
     4c0:	08 c0       	rjmp	.+16     	; 0x4d2 <insert_node_tail+0x26>
	else {
		for(cp=Head; cp->link != NULL; cp=cp->link)
     4c2:	f9 01       	movw	r30, r18
     4c4:	20 85       	ldd	r18, Z+8	; 0x08
     4c6:	31 85       	ldd	r19, Z+9	; 0x09
     4c8:	21 15       	cp	r18, r1
     4ca:	31 05       	cpc	r19, r1
     4cc:	d1 f7       	brne	.-12     	; 0x4c2 <insert_node_tail+0x16>
			;
		cp->link=np;
     4ce:	91 87       	std	Z+9, r25	; 0x09
     4d0:	80 87       	std	Z+8, r24	; 0x08
	}
	np->link=NULL;
     4d2:	fc 01       	movw	r30, r24
     4d4:	11 86       	std	Z+9, r1	; 0x09
     4d6:	10 86       	std	Z+8, r1	; 0x08
}
     4d8:	08 95       	ret

000004da <insert_node_ascn>:

void insert_node_ascn(struct node *np) {
     4da:	cf 92       	push	r12
     4dc:	df 92       	push	r13
     4de:	ef 92       	push	r14
     4e0:	ff 92       	push	r15
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	ec 01       	movw	r28, r24
	struct node *cp, *pp;
	if(!Head) {
     4ec:	c0 90 71 02 	lds	r12, 0x0271
     4f0:	d0 90 72 02 	lds	r13, 0x0272
     4f4:	c1 14       	cp	r12, r1
     4f6:	d1 04       	cpc	r13, r1
     4f8:	79 f4       	brne	.+30     	; 0x518 <insert_node_ascn+0x3e>
		Head=np;
     4fa:	90 93 72 02 	sts	0x0272, r25
     4fe:	80 93 71 02 	sts	0x0271, r24
		np->link =NULL;
     502:	19 86       	std	Y+9, r1	; 0x09
     504:	18 86       	std	Y+8, r1	; 0x08
     506:	22 c0       	rjmp	.+68     	; 0x54c <insert_node_ascn+0x72>
	}
	else {
		for(cp=Head,pp=NULL;cp!=NULL && strcmp(cp->data,np->data) < 0 ; pp=cp,cp=cp->link)
     508:	f8 01       	movw	r30, r16
     50a:	80 85       	ldd	r24, Z+8	; 0x08
     50c:	91 85       	ldd	r25, Z+9	; 0x09
     50e:	78 01       	movw	r14, r16
     510:	00 97       	sbiw	r24, 0x00	; 0
     512:	59 f0       	breq	.+22     	; 0x52a <insert_node_ascn+0x50>
     514:	8c 01       	movw	r16, r24
     516:	03 c0       	rjmp	.+6      	; 0x51e <insert_node_ascn+0x44>
	np->link=NULL;
}

void insert_node_ascn(struct node *np) {
	struct node *cp, *pp;
	if(!Head) {
     518:	86 01       	movw	r16, r12
     51a:	ee 24       	eor	r14, r14
     51c:	ff 24       	eor	r15, r15
		Head=np;
		np->link =NULL;
	}
	else {
		for(cp=Head,pp=NULL;cp!=NULL && strcmp(cp->data,np->data) < 0 ; pp=cp,cp=cp->link)
     51e:	c8 01       	movw	r24, r16
     520:	be 01       	movw	r22, r28
     522:	0e 94 c2 06 	call	0xd84	; 0xd84 <strcmp>
     526:	97 fd       	sbrc	r25, 7
     528:	ef cf       	rjmp	.-34     	; 0x508 <insert_node_ascn+0x2e>
			;
		if(pp==NULL) {
     52a:	e1 14       	cp	r14, r1
     52c:	f1 04       	cpc	r15, r1
     52e:	39 f4       	brne	.+14     	; 0x53e <insert_node_ascn+0x64>
			np->link = Head;
     530:	d9 86       	std	Y+9, r13	; 0x09
     532:	c8 86       	std	Y+8, r12	; 0x08
			Head=np;
     534:	d0 93 72 02 	sts	0x0272, r29
     538:	c0 93 71 02 	sts	0x0271, r28
     53c:	07 c0       	rjmp	.+14     	; 0x54c <insert_node_ascn+0x72>
		}
		else {
			np->link = pp->link;
     53e:	f7 01       	movw	r30, r14
     540:	80 85       	ldd	r24, Z+8	; 0x08
     542:	91 85       	ldd	r25, Z+9	; 0x09
     544:	99 87       	std	Y+9, r25	; 0x09
     546:	88 87       	std	Y+8, r24	; 0x08
			pp->link = np;
     548:	d1 87       	std	Z+9, r29	; 0x09
     54a:	c0 87       	std	Z+8, r28	; 0x08
		}
	}
}
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	1f 91       	pop	r17
     552:	0f 91       	pop	r16
     554:	ff 90       	pop	r15
     556:	ef 90       	pop	r14
     558:	df 90       	pop	r13
     55a:	cf 90       	pop	r12
     55c:	08 95       	ret

0000055e <tour_list>:
void tour_list() {
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
	struct node *cp;
	printf("\n");
     566:	8a e0       	ldi	r24, 0x0A	; 10
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 20 07 	call	0xe40	; 0xe40 <putchar>
	for(cp=Head; cp!=NULL;cp=cp->link)
     56e:	c0 91 71 02 	lds	r28, 0x0271
     572:	d0 91 72 02 	lds	r29, 0x0272
		printf("-->%s ",cp->data);
     576:	08 e3       	ldi	r16, 0x38	; 56
     578:	12 e0       	ldi	r17, 0x02	; 2
	}
}
void tour_list() {
	struct node *cp;
	printf("\n");
	for(cp=Head; cp!=NULL;cp=cp->link)
     57a:	11 c0       	rjmp	.+34     	; 0x59e <tour_list+0x40>
		printf("-->%s ",cp->data);
     57c:	00 d0       	rcall	.+0      	; 0x57e <tour_list+0x20>
     57e:	0f 92       	push	r0
     580:	ed b7       	in	r30, 0x3d	; 61
     582:	fe b7       	in	r31, 0x3e	; 62
     584:	12 83       	std	Z+2, r17	; 0x02
     586:	01 83       	std	Z+1, r16	; 0x01
     588:	d4 83       	std	Z+4, r29	; 0x04
     58a:	c3 83       	std	Z+3, r28	; 0x03
     58c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <printf>
	}
}
void tour_list() {
	struct node *cp;
	printf("\n");
	for(cp=Head; cp!=NULL;cp=cp->link)
     590:	08 84       	ldd	r0, Y+8	; 0x08
     592:	d9 85       	ldd	r29, Y+9	; 0x09
     594:	c0 2d       	mov	r28, r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	20 97       	sbiw	r28, 0x00	; 0
     5a0:	69 f7       	brne	.-38     	; 0x57c <tour_list+0x1e>
		printf("-->%s ",cp->data);
	printf("\n");
     5a2:	8a e0       	ldi	r24, 0x0A	; 10
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 20 07 	call	0xe40	; 0xe40 <putchar>
}
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	08 95       	ret

000005b4 <free_list>:

void free_list() {
	struct node *cp;

	for(;Head!=NULL;) {
     5b4:	09 c0       	rjmp	.+18     	; 0x5c8 <free_list+0x14>
		cp=Head;
		Head=cp->link;
     5b6:	fc 01       	movw	r30, r24
     5b8:	20 85       	ldd	r18, Z+8	; 0x08
     5ba:	31 85       	ldd	r19, Z+9	; 0x09
     5bc:	30 93 72 02 	sts	0x0272, r19
     5c0:	20 93 71 02 	sts	0x0271, r18
	struct node *cp;
	cp=(struct node *)malloc(sizeof(struct node));
	return(cp);
}
void free_node(struct node *np) {
	free(np);
     5c4:	0e 94 0b 06 	call	0xc16	; 0xc16 <free>
}

void free_list() {
	struct node *cp;

	for(;Head!=NULL;) {
     5c8:	80 91 71 02 	lds	r24, 0x0271
     5cc:	90 91 72 02 	lds	r25, 0x0272
     5d0:	00 97       	sbiw	r24, 0x00	; 0
     5d2:	89 f7       	brne	.-30     	; 0x5b6 <free_list+0x2>
		cp=Head;
		Head=cp->link;
		free_node(cp);
	}
}
     5d4:	08 95       	ret

000005d6 <q_init>:

static char qi[QI_SIZE],qo[QO_SIZE];
static int fi,ri,fo,ro;

void q_init() {
	fi=ri=fo=ro=0;
     5d6:	10 92 74 02 	sts	0x0274, r1
     5da:	10 92 73 02 	sts	0x0273, r1
     5de:	10 92 76 02 	sts	0x0276, r1
     5e2:	10 92 75 02 	sts	0x0275, r1
     5e6:	10 92 78 02 	sts	0x0278, r1
     5ea:	10 92 77 02 	sts	0x0277, r1
     5ee:	10 92 7a 02 	sts	0x027A, r1
     5f2:	10 92 79 02 	sts	0x0279, r1
}
     5f6:	08 95       	ret

000005f8 <qi_insert>:

int qi_insert(char ch) {
     5f8:	48 2f       	mov	r20, r24
	if((ri+1)%QI_SIZE ==fi)
     5fa:	20 91 77 02 	lds	r18, 0x0277
     5fe:	30 91 78 02 	lds	r19, 0x0278
     602:	2f 5f       	subi	r18, 0xFF	; 255
     604:	3f 4f       	sbci	r19, 0xFF	; 255
     606:	c9 01       	movw	r24, r18
     608:	60 e0       	ldi	r22, 0x00	; 0
     60a:	71 e0       	ldi	r23, 0x01	; 1
     60c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__divmodhi4>
     610:	9c 01       	movw	r18, r24
     612:	80 91 79 02 	lds	r24, 0x0279
     616:	90 91 7a 02 	lds	r25, 0x027A
     61a:	28 17       	cp	r18, r24
     61c:	39 07       	cpc	r19, r25
     61e:	59 f0       	breq	.+22     	; 0x636 <qi_insert+0x3e>
		return(0);	// full
	ri=(ri+1)%QI_SIZE;
     620:	30 93 78 02 	sts	0x0278, r19
     624:	20 93 77 02 	sts	0x0277, r18
	qi[ri]=ch;
     628:	25 58       	subi	r18, 0x85	; 133
     62a:	3d 4f       	sbci	r19, 0xFD	; 253
     62c:	f9 01       	movw	r30, r18
     62e:	40 83       	st	Z, r20
	return(1);
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	08 95       	ret
	fi=ri=fo=ro=0;
}

int qi_insert(char ch) {
	if((ri+1)%QI_SIZE ==fi)
		return(0);	// full
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
	ri=(ri+1)%QI_SIZE;
	qi[ri]=ch;
	return(1);
}
     63a:	08 95       	ret

0000063c <qi_delete>:

int qi_delete() {
	if(ri==fi)
     63c:	80 91 79 02 	lds	r24, 0x0279
     640:	90 91 7a 02 	lds	r25, 0x027A
     644:	20 91 77 02 	lds	r18, 0x0277
     648:	30 91 78 02 	lds	r19, 0x0278
     64c:	28 17       	cp	r18, r24
     64e:	39 07       	cpc	r19, r25
     650:	79 f0       	breq	.+30     	; 0x670 <qi_delete+0x34>
		return(0);	// empty
	fi=(fi+1)%QI_SIZE;
     652:	01 96       	adiw	r24, 0x01	; 1
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	71 e0       	ldi	r23, 0x01	; 1
     658:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__divmodhi4>
     65c:	90 93 7a 02 	sts	0x027A, r25
     660:	80 93 79 02 	sts	0x0279, r24
	return(qi[fi]);
     664:	85 58       	subi	r24, 0x85	; 133
     666:	9d 4f       	sbci	r25, 0xFD	; 253
     668:	fc 01       	movw	r30, r24
     66a:	80 81       	ld	r24, Z
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	08 95       	ret
	return(1);
}

int qi_delete() {
	if(ri==fi)
		return(0);	// empty
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
	fi=(fi+1)%QI_SIZE;
	return(qi[fi]);
}
     674:	08 95       	ret

00000676 <qo_insert>:

int qo_insert(char ch) {
     676:	48 2f       	mov	r20, r24
	if((ro+1)%QO_SIZE ==fo)
     678:	20 91 73 02 	lds	r18, 0x0273
     67c:	30 91 74 02 	lds	r19, 0x0274
     680:	2f 5f       	subi	r18, 0xFF	; 255
     682:	3f 4f       	sbci	r19, 0xFF	; 255
     684:	c9 01       	movw	r24, r18
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	71 e0       	ldi	r23, 0x01	; 1
     68a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__divmodhi4>
     68e:	9c 01       	movw	r18, r24
     690:	80 91 75 02 	lds	r24, 0x0275
     694:	90 91 76 02 	lds	r25, 0x0276
     698:	28 17       	cp	r18, r24
     69a:	39 07       	cpc	r19, r25
     69c:	59 f0       	breq	.+22     	; 0x6b4 <qo_insert+0x3e>
		return(0);	// full
	ro=(ro+1)%QO_SIZE;
     69e:	30 93 74 02 	sts	0x0274, r19
     6a2:	20 93 73 02 	sts	0x0273, r18
	qo[ro]=ch;
     6a6:	25 58       	subi	r18, 0x85	; 133
     6a8:	3c 4f       	sbci	r19, 0xFC	; 252
     6aa:	f9 01       	movw	r30, r18
     6ac:	40 83       	st	Z, r20
	return(1);
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	08 95       	ret
	return(qi[fi]);
}

int qo_insert(char ch) {
	if((ro+1)%QO_SIZE ==fo)
		return(0);	// full
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	90 e0       	ldi	r25, 0x00	; 0
	ro=(ro+1)%QO_SIZE;
	qo[ro]=ch;
	return(1);
}
     6b8:	08 95       	ret

000006ba <qo_delete>:

int qo_delete() {
	if(ro==fo)
     6ba:	80 91 75 02 	lds	r24, 0x0275
     6be:	90 91 76 02 	lds	r25, 0x0276
     6c2:	20 91 73 02 	lds	r18, 0x0273
     6c6:	30 91 74 02 	lds	r19, 0x0274
     6ca:	28 17       	cp	r18, r24
     6cc:	39 07       	cpc	r19, r25
     6ce:	79 f0       	breq	.+30     	; 0x6ee <qo_delete+0x34>
		return(0);	// empty
	fo=(fo+1)%QO_SIZE;
     6d0:	01 96       	adiw	r24, 0x01	; 1
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	71 e0       	ldi	r23, 0x01	; 1
     6d6:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__divmodhi4>
     6da:	90 93 76 02 	sts	0x0276, r25
     6de:	80 93 75 02 	sts	0x0275, r24
	return(qo[fo]);
     6e2:	85 58       	subi	r24, 0x85	; 133
     6e4:	9c 4f       	sbci	r25, 0xFC	; 252
     6e6:	fc 01       	movw	r30, r24
     6e8:	80 81       	ld	r24, Z
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	08 95       	ret
	return(1);
}

int qo_delete() {
	if(ro==fo)
		return(0);	// empty
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	90 e0       	ldi	r25, 0x00	; 0
	fo=(fo+1)%QO_SIZE;
	return(qo[fo]);
}
     6f2:	08 95       	ret

000006f4 <tour_timer>:
		pp->link=tp;
		tp->link=cp;
	}
}

void tour_timer() {
     6f4:	ef 92       	push	r14
     6f6:	ff 92       	push	r15
     6f8:	0f 93       	push	r16
     6fa:	1f 93       	push	r17
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
	struct timer *cp;
	int total=0;

	printf("\n");
     700:	8a e0       	ldi	r24, 0x0A	; 10
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	0e 94 20 07 	call	0xe40	; 0xe40 <putchar>
	for(cp=Thead; cp!=NULL; cp=cp->link) {
     708:	c0 91 7b 04 	lds	r28, 0x047B
     70c:	d0 91 7c 04 	lds	r29, 0x047C
	}
}

void tour_timer() {
	struct timer *cp;
	int total=0;
     710:	00 e0       	ldi	r16, 0x00	; 0
     712:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for(cp=Thead; cp!=NULL; cp=cp->link) {
		total +=cp->time;
		printf("-->%d(%d) ", cp->time, total);
     714:	8f e3       	ldi	r24, 0x3F	; 63
     716:	e8 2e       	mov	r14, r24
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	f8 2e       	mov	r15, r24
void tour_timer() {
	struct timer *cp;
	int total=0;

	printf("\n");
	for(cp=Thead; cp!=NULL; cp=cp->link) {
     71c:	20 c0       	rjmp	.+64     	; 0x75e <tour_timer+0x6a>
		total +=cp->time;
     71e:	88 81       	ld	r24, Y
     720:	99 81       	ldd	r25, Y+1	; 0x01
     722:	08 0f       	add	r16, r24
     724:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     726:	00 d0       	rcall	.+0      	; 0x728 <tour_timer+0x34>
     728:	00 d0       	rcall	.+0      	; 0x72a <tour_timer+0x36>
     72a:	ed b7       	in	r30, 0x3d	; 61
     72c:	fe b7       	in	r31, 0x3e	; 62
     72e:	31 96       	adiw	r30, 0x01	; 1
     730:	ad b7       	in	r26, 0x3d	; 61
     732:	be b7       	in	r27, 0x3e	; 62
     734:	12 96       	adiw	r26, 0x02	; 2
     736:	fc 92       	st	X, r15
     738:	ee 92       	st	-X, r14
     73a:	11 97       	sbiw	r26, 0x01	; 1
     73c:	93 83       	std	Z+3, r25	; 0x03
     73e:	82 83       	std	Z+2, r24	; 0x02
     740:	15 83       	std	Z+5, r17	; 0x05
     742:	04 83       	std	Z+4, r16	; 0x04
     744:	0e 94 0e 07 	call	0xe1c	; 0xe1c <printf>
void tour_timer() {
	struct timer *cp;
	int total=0;

	printf("\n");
	for(cp=Thead; cp!=NULL; cp=cp->link) {
     748:	0c 84       	ldd	r0, Y+12	; 0x0c
     74a:	dd 85       	ldd	r29, Y+13	; 0x0d
     74c:	c0 2d       	mov	r28, r0
     74e:	8d b7       	in	r24, 0x3d	; 61
     750:	9e b7       	in	r25, 0x3e	; 62
     752:	06 96       	adiw	r24, 0x06	; 6
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	f8 94       	cli
     758:	9e bf       	out	0x3e, r25	; 62
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	8d bf       	out	0x3d, r24	; 61
     75e:	20 97       	sbiw	r28, 0x00	; 0
     760:	f1 f6       	brne	.-68     	; 0x71e <tour_timer+0x2a>
		total +=cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     762:	8a e0       	ldi	r24, 0x0A	; 10
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 20 07 	call	0xe40	; 0xe40 <putchar>
}
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
     770:	0f 91       	pop	r16
     772:	ff 90       	pop	r15
     774:	ef 90       	pop	r14
     776:	08 95       	ret

00000778 <free_timer>:

void free_timer() {
	struct timer *cp;
	for(;Thead !=NULL ; ) {
     778:	09 c0       	rjmp	.+18     	; 0x78c <free_timer+0x14>
		cp=Thead;
		Thead = cp->link;
     77a:	fc 01       	movw	r30, r24
     77c:	24 85       	ldd	r18, Z+12	; 0x0c
     77e:	35 85       	ldd	r19, Z+13	; 0x0d
     780:	30 93 7c 04 	sts	0x047C, r19
     784:	20 93 7b 04 	sts	0x047B, r18
		free(cp);
     788:	0e 94 0b 06 	call	0xc16	; 0xc16 <free>
	printf("\n");
}

void free_timer() {
	struct timer *cp;
	for(;Thead !=NULL ; ) {
     78c:	80 91 7b 04 	lds	r24, 0x047B
     790:	90 91 7c 04 	lds	r25, 0x047C
     794:	00 97       	sbiw	r24, 0x00	; 0
     796:	89 f7       	brne	.-30     	; 0x77a <free_timer+0x2>
		cp=Thead;
		Thead = cp->link;
		free(cp);
	}
}
     798:	08 95       	ret

0000079a <get_timer>:

struct timer *get_timer() {
	struct timer *tp;

	tp=(struct timer *)malloc(sizeof(*tp));
     79a:	8e e0       	ldi	r24, 0x0E	; 14
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	0e 94 75 05 	call	0xaea	; 0xaea <malloc>
	return(tp);
}
     7a2:	08 95       	ret

000007a4 <insert_timer>:
#include <stdlib.h>
#include "timer.h"

struct timer *Thead = NULL;

void insert_timer(struct task *tskp, int ms) {
     7a4:	ef 92       	push	r14
     7a6:	ff 92       	push	r15
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	f8 2e       	mov	r15, r24
     7b2:	e9 2e       	mov	r14, r25
     7b4:	8b 01       	movw	r16, r22
	int total;
	struct timer *tp, *cp, *pp;

	tp= get_timer();
     7b6:	0e 94 cd 03 	call	0x79a	; 0x79a <get_timer>
     7ba:	ec 01       	movw	r28, r24
	tp->task=*tskp;
     7bc:	dc 01       	movw	r26, r24
     7be:	12 96       	adiw	r26, 0x02	; 2
     7c0:	ef 2d       	mov	r30, r15
     7c2:	fe 2d       	mov	r31, r14
     7c4:	8a e0       	ldi	r24, 0x0A	; 10
     7c6:	01 90       	ld	r0, Z+
     7c8:	0d 92       	st	X+, r0
     7ca:	81 50       	subi	r24, 0x01	; 1
     7cc:	e1 f7       	brne	.-8      	; 0x7c6 <insert_timer+0x22>
	tp->time = ms;
     7ce:	19 83       	std	Y+1, r17	; 0x01
     7d0:	08 83       	st	Y, r16

	if(Thead == NULL) {
     7d2:	e0 91 7b 04 	lds	r30, 0x047B
     7d6:	f0 91 7c 04 	lds	r31, 0x047C
     7da:	30 97       	sbiw	r30, 0x00	; 0
     7dc:	29 f4       	brne	.+10     	; 0x7e8 <insert_timer+0x44>
		Thead = tp, tp->link = NULL;
     7de:	d0 93 7c 04 	sts	0x047C, r29
     7e2:	c0 93 7b 04 	sts	0x047B, r28
     7e6:	2f c0       	rjmp	.+94     	; 0x846 <insert_timer+0xa2>

	tp= get_timer();
	tp->task=*tskp;
	tp->time = ms;

	if(Thead == NULL) {
     7e8:	40 e0       	ldi	r20, 0x00	; 0
     7ea:	50 e0       	ldi	r21, 0x00	; 0
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	01 c0       	rjmp	.+2      	; 0x7f4 <insert_timer+0x50>
		Thead = tp, tp->link = NULL;
		return;
	}
	pp= NULL, total = 0;
	for(cp=Thead;cp;cp=cp->link) {
     7f2:	fd 01       	movw	r30, r26
		total+=cp->time;
     7f4:	80 81       	ld	r24, Z
     7f6:	91 81       	ldd	r25, Z+1	; 0x01
     7f8:	28 0f       	add	r18, r24
     7fa:	39 1f       	adc	r19, r25
		if(total >=ms)
     7fc:	20 17       	cp	r18, r16
     7fe:	31 07       	cpc	r19, r17
     800:	34 f4       	brge	.+12     	; 0x80e <insert_timer+0x6a>
	if(Thead == NULL) {
		Thead = tp, tp->link = NULL;
		return;
	}
	pp= NULL, total = 0;
	for(cp=Thead;cp;cp=cp->link) {
     802:	a4 85       	ldd	r26, Z+12	; 0x0c
     804:	b5 85       	ldd	r27, Z+13	; 0x0d
     806:	af 01       	movw	r20, r30
     808:	10 97       	sbiw	r26, 0x00	; 0
     80a:	99 f7       	brne	.-26     	; 0x7f2 <insert_timer+0x4e>
     80c:	01 c0       	rjmp	.+2      	; 0x810 <insert_timer+0x6c>
		total+=cp->time;
		if(total >=ms)
     80e:	df 01       	movw	r26, r30
			break;
		pp=cp;
	}
	if(pp==NULL) {
     810:	41 15       	cp	r20, r1
     812:	51 05       	cpc	r21, r1
     814:	79 f4       	brne	.+30     	; 0x834 <insert_timer+0x90>
		cp->time -= tp->time;
     816:	8d 91       	ld	r24, X+
     818:	9c 91       	ld	r25, X
     81a:	11 97       	sbiw	r26, 0x01	; 1
     81c:	80 1b       	sub	r24, r16
     81e:	91 0b       	sbc	r25, r17
     820:	11 96       	adiw	r26, 0x01	; 1
     822:	9c 93       	st	X, r25
     824:	8e 93       	st	-X, r24
		tp->link = cp, Thead =tp;
     826:	bd 87       	std	Y+13, r27	; 0x0d
     828:	ac 87       	std	Y+12, r26	; 0x0c
     82a:	d0 93 7c 04 	sts	0x047C, r29
     82e:	c0 93 7b 04 	sts	0x047B, r28
     832:	24 c0       	rjmp	.+72     	; 0x87c <insert_timer+0xd8>
	}
	else if(cp==NULL) {
     834:	10 97       	sbiw	r26, 0x00	; 0
     836:	51 f4       	brne	.+20     	; 0x84c <insert_timer+0xa8>
		tp->time -= total;
     838:	02 1b       	sub	r16, r18
     83a:	13 0b       	sbc	r17, r19
     83c:	19 83       	std	Y+1, r17	; 0x01
     83e:	08 83       	st	Y, r16
		pp->link = tp;
     840:	fa 01       	movw	r30, r20
     842:	d5 87       	std	Z+13, r29	; 0x0d
     844:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     846:	1d 86       	std	Y+13, r1	; 0x0d
     848:	1c 86       	std	Y+12, r1	; 0x0c
     84a:	18 c0       	rjmp	.+48     	; 0x87c <insert_timer+0xd8>
	}
	else {
		total-=cp->time;
     84c:	8d 91       	ld	r24, X+
     84e:	9c 91       	ld	r25, X
     850:	11 97       	sbiw	r26, 0x01	; 1
     852:	b9 01       	movw	r22, r18
     854:	68 1b       	sub	r22, r24
     856:	79 0b       	sbc	r23, r25
		tp->time-=total;
     858:	98 01       	movw	r18, r16
     85a:	26 1b       	sub	r18, r22
     85c:	37 0b       	sbc	r19, r23
     85e:	39 83       	std	Y+1, r19	; 0x01
     860:	28 83       	st	Y, r18
		cp->time-=tp->time;
     862:	8d 91       	ld	r24, X+
     864:	9c 91       	ld	r25, X
     866:	11 97       	sbiw	r26, 0x01	; 1
     868:	82 1b       	sub	r24, r18
     86a:	93 0b       	sbc	r25, r19
     86c:	11 96       	adiw	r26, 0x01	; 1
     86e:	9c 93       	st	X, r25
     870:	8e 93       	st	-X, r24
		pp->link=tp;
     872:	fa 01       	movw	r30, r20
     874:	d5 87       	std	Z+13, r29	; 0x0d
     876:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link=cp;
     878:	bd 87       	std	Y+13, r27	; 0x0d
     87a:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	ff 90       	pop	r15
     886:	ef 90       	pop	r14
     888:	08 95       	ret

0000088a <uart_putchar>:
	} while(ch==0);

	if(ch==ETX) return(-1);
	else return(ch);
}
int uart_putchar(char ch, FILE *stream) {
     88a:	cf 93       	push	r28
     88c:	c8 2f       	mov	r28, r24
	if(ch=='\n')
     88e:	8a 30       	cpi	r24, 0x0A	; 10
     890:	19 f4       	brne	.+6      	; 0x898 <uart_putchar+0xe>
		uart_putchar('\r',stream);
     892:	8d e0       	ldi	r24, 0x0D	; 13
     894:	0e 94 45 04 	call	0x88a	; 0x88a <uart_putchar>
	cli();
     898:	f8 94       	cli
	if(!uart_busy) {
     89a:	80 91 80 04 	lds	r24, 0x0480
     89e:	88 23       	and	r24, r24
     8a0:	59 f4       	brne	.+22     	; 0x8b8 <uart_putchar+0x2e>
		UDR0 = ch;
     8a2:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy=1;
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	80 93 80 04 	sts	0x0480, r24
     8ac:	0a c0       	rjmp	.+20     	; 0x8c2 <uart_putchar+0x38>
	}
	else {
		while(qo_insert(ch)==0) {
			sei();
     8ae:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8b0:	86 ef       	ldi	r24, 0xF6	; 246
     8b2:	8a 95       	dec	r24
     8b4:	f1 f7       	brne	.-4      	; 0x8b2 <uart_putchar+0x28>
			_delay_us(100);
			cli();
     8b6:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy=1;
	}
	else {
		while(qo_insert(ch)==0) {
     8b8:	8c 2f       	mov	r24, r28
     8ba:	0e 94 3b 03 	call	0x676	; 0x676 <qo_insert>
     8be:	00 97       	sbiw	r24, 0x00	; 0
     8c0:	b1 f3       	breq	.-20     	; 0x8ae <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     8c2:	78 94       	sei
	return(1);
}
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	cf 91       	pop	r28
     8ca:	08 95       	ret

000008cc <uart_getchar>:
// this
int uart_getchar(FILE *stream) {
	char ch;

	do {
		cli();
     8cc:	f8 94       	cli
		ch=qi_delete();
     8ce:	0e 94 1e 03 	call	0x63c	; 0x63c <qi_delete>
		sei();
     8d2:	78 94       	sei
	} while(ch==0);
     8d4:	88 23       	and	r24, r24
     8d6:	d1 f3       	breq	.-12     	; 0x8cc <uart_getchar>

	if(ch==ETX) return(-1);
     8d8:	84 30       	cpi	r24, 0x04	; 4
     8da:	11 f0       	breq	.+4      	; 0x8e0 <uart_getchar+0x14>
	else return(ch);
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	08 95       	ret
		cli();
		ch=qi_delete();
		sei();
	} while(ch==0);

	if(ch==ETX) return(-1);
     8e0:	8f ef       	ldi	r24, 0xFF	; 255
     8e2:	9f ef       	ldi	r25, 0xFF	; 255
	else return(ch);
}
     8e4:	08 95       	ret

000008e6 <uart_init>:
FILE Mystdout = FDEV_SETUP_STREAM (uart_putchar, NULL,_FDEV_SETUP_WRITE);
FILE Mystdin = FDEV_SETUP_STREAM (NULL,uart_getchar, _FDEV_SETUP_READ);
char uart_busy;

void uart_init() {
	stdin = &Mystdin;
     8e6:	8a e4       	ldi	r24, 0x4A	; 74
     8e8:	92 e0       	ldi	r25, 0x02	; 2
     8ea:	90 93 c6 04 	sts	0x04C6, r25
     8ee:	80 93 c5 04 	sts	0x04C5, r24
	stdout = &Mystdout;
     8f2:	88 e5       	ldi	r24, 0x58	; 88
     8f4:	92 e0       	ldi	r25, 0x02	; 2
     8f6:	90 93 c8 04 	sts	0x04C8, r25
     8fa:	80 93 c7 04 	sts	0x04C7, r24
	q_init();
     8fe:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <q_init>
	uart_busy=0;
     902:	10 92 80 04 	sts	0x0480, r1
	UBRR0H=0x00; UBRR0L=0x07;
     906:	10 92 c5 00 	sts	0x00C5, r1
     90a:	87 e0       	ldi	r24, 0x07	; 7
     90c:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A,U2X0);
     910:	e0 ec       	ldi	r30, 0xC0	; 192
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	80 81       	ld	r24, Z
     916:	82 60       	ori	r24, 0x02	; 2
     918:	80 83       	st	Z, r24
	sbi(UCSR0B,TXEN0);
     91a:	e1 ec       	ldi	r30, 0xC1	; 193
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	80 81       	ld	r24, Z
     920:	88 60       	ori	r24, 0x08	; 8
     922:	80 83       	st	Z, r24
	sbi(UCSR0B,TXCIE0);
     924:	80 81       	ld	r24, Z
     926:	80 64       	ori	r24, 0x40	; 64
     928:	80 83       	st	Z, r24
	sbi(UCSR0B,RXEN0);
     92a:	80 81       	ld	r24, Z
     92c:	80 61       	ori	r24, 0x10	; 16
     92e:	80 83       	st	Z, r24
	sbi(UCSR0B,RXCIE0);
     930:	80 81       	ld	r24, Z
     932:	80 68       	ori	r24, 0x80	; 128
     934:	80 83       	st	Z, r24
}
     936:	08 95       	ret

00000938 <__vector_27>:
		}
	}
	sei();
	return(1);
}
ISR(USART0_TX_vect) {
     938:	1f 92       	push	r1
     93a:	0f 92       	push	r0
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	0f 92       	push	r0
     940:	0b b6       	in	r0, 0x3b	; 59
     942:	0f 92       	push	r0
     944:	11 24       	eor	r1, r1
     946:	2f 93       	push	r18
     948:	3f 93       	push	r19
     94a:	4f 93       	push	r20
     94c:	5f 93       	push	r21
     94e:	6f 93       	push	r22
     950:	7f 93       	push	r23
     952:	8f 93       	push	r24
     954:	9f 93       	push	r25
     956:	af 93       	push	r26
     958:	bf 93       	push	r27
     95a:	ef 93       	push	r30
     95c:	ff 93       	push	r31
	char ch;

	if((ch=qo_delete())==0)
     95e:	0e 94 5d 03 	call	0x6ba	; 0x6ba <qo_delete>
     962:	88 23       	and	r24, r24
     964:	19 f4       	brne	.+6      	; 0x96c <__vector_27+0x34>
		uart_busy=0;
     966:	10 92 80 04 	sts	0x0480, r1
     96a:	02 c0       	rjmp	.+4      	; 0x970 <__vector_27+0x38>
	else
		UDR0=ch;
     96c:	80 93 c6 00 	sts	0x00C6, r24
}
     970:	ff 91       	pop	r31
     972:	ef 91       	pop	r30
     974:	bf 91       	pop	r27
     976:	af 91       	pop	r26
     978:	9f 91       	pop	r25
     97a:	8f 91       	pop	r24
     97c:	7f 91       	pop	r23
     97e:	6f 91       	pop	r22
     980:	5f 91       	pop	r21
     982:	4f 91       	pop	r20
     984:	3f 91       	pop	r19
     986:	2f 91       	pop	r18
     988:	0f 90       	pop	r0
     98a:	0b be       	out	0x3b, r0	; 59
     98c:	0f 90       	pop	r0
     98e:	0f be       	out	0x3f, r0	; 63
     990:	0f 90       	pop	r0
     992:	1f 90       	pop	r1
     994:	18 95       	reti

00000996 <uart_echo>:
			ch='\n';
		uart_echo(ch);
	}
	qi_insert(ch);
}
void uart_echo(char ch) {
     996:	cf 93       	push	r28
     998:	c8 2f       	mov	r28, r24
	if(ch=='\n') uart_echo('\r');
     99a:	8a 30       	cpi	r24, 0x0A	; 10
     99c:	19 f4       	brne	.+6      	; 0x9a4 <uart_echo+0xe>
     99e:	8d e0       	ldi	r24, 0x0D	; 13
     9a0:	0e 94 cb 04 	call	0x996	; 0x996 <uart_echo>

	if(!uart_busy) {
     9a4:	80 91 80 04 	lds	r24, 0x0480
     9a8:	88 23       	and	r24, r24
     9aa:	31 f4       	brne	.+12     	; 0x9b8 <uart_echo+0x22>
		UDR0=ch;
     9ac:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy=1;
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	80 93 80 04 	sts	0x0480, r24
     9b6:	03 c0       	rjmp	.+6      	; 0x9be <uart_echo+0x28>
	}
	else
		qo_insert(ch);
     9b8:	8c 2f       	mov	r24, r28
     9ba:	0e 94 3b 03 	call	0x676	; 0x676 <qo_insert>
}
     9be:	cf 91       	pop	r28
     9c0:	08 95       	ret

000009c2 <__vector_25>:
		uart_busy=0;
	else
		UDR0=ch;
}
//
ISR(USART0_RX_vect) {
     9c2:	1f 92       	push	r1
     9c4:	0f 92       	push	r0
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	0f 92       	push	r0
     9ca:	0b b6       	in	r0, 0x3b	; 59
     9cc:	0f 92       	push	r0
     9ce:	11 24       	eor	r1, r1
     9d0:	2f 93       	push	r18
     9d2:	3f 93       	push	r19
     9d4:	4f 93       	push	r20
     9d6:	5f 93       	push	r21
     9d8:	6f 93       	push	r22
     9da:	7f 93       	push	r23
     9dc:	8f 93       	push	r24
     9de:	9f 93       	push	r25
     9e0:	af 93       	push	r26
     9e2:	bf 93       	push	r27
     9e4:	cf 93       	push	r28
     9e6:	ef 93       	push	r30
     9e8:	ff 93       	push	r31
	char ch;

	ch=UDR0;
     9ea:	c0 91 c6 00 	lds	r28, 0x00C6
	if(ch!=ETX) {
     9ee:	c4 30       	cpi	r28, 0x04	; 4
     9f0:	31 f0       	breq	.+12     	; 0x9fe <__vector_25+0x3c>
		if(ch=='\r')
     9f2:	cd 30       	cpi	r28, 0x0D	; 13
     9f4:	09 f4       	brne	.+2      	; 0x9f8 <__vector_25+0x36>
			ch='\n';
     9f6:	ca e0       	ldi	r28, 0x0A	; 10
		uart_echo(ch);
     9f8:	8c 2f       	mov	r24, r28
     9fa:	0e 94 cb 04 	call	0x996	; 0x996 <uart_echo>
	}
	qi_insert(ch);
     9fe:	8c 2f       	mov	r24, r28
     a00:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <qi_insert>
}
     a04:	ff 91       	pop	r31
     a06:	ef 91       	pop	r30
     a08:	cf 91       	pop	r28
     a0a:	bf 91       	pop	r27
     a0c:	af 91       	pop	r26
     a0e:	9f 91       	pop	r25
     a10:	8f 91       	pop	r24
     a12:	7f 91       	pop	r23
     a14:	6f 91       	pop	r22
     a16:	5f 91       	pop	r21
     a18:	4f 91       	pop	r20
     a1a:	3f 91       	pop	r19
     a1c:	2f 91       	pop	r18
     a1e:	0f 90       	pop	r0
     a20:	0b be       	out	0x3b, r0	; 59
     a22:	0f 90       	pop	r0
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	0f 90       	pop	r0
     a28:	1f 90       	pop	r1
     a2a:	18 95       	reti

00000a2c <uart_putchar_1>:
	}
	else
		qo_insert(ch);
}
	
int uart_putchar_1(char ch, FILE *stream) {
     a2c:	cf 93       	push	r28
     a2e:	c8 2f       	mov	r28, r24
	if(ch=='\n')
     a30:	8a 30       	cpi	r24, 0x0A	; 10
     a32:	19 f4       	brne	.+6      	; 0xa3a <uart_putchar_1+0xe>
		uart_putchar_1('\r',stream);
     a34:	8d e0       	ldi	r24, 0x0D	; 13
     a36:	0e 94 16 05 	call	0xa2c	; 0xa2c <uart_putchar_1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a3a:	83 e3       	ldi	r24, 0x33	; 51
     a3c:	97 e0       	ldi	r25, 0x07	; 7
     a3e:	01 97       	sbiw	r24, 0x01	; 1
     a40:	f1 f7       	brne	.-4      	; 0xa3e <uart_putchar_1+0x12>
	_delay_ms(1);
	UDR0=ch;
     a42:	c0 93 c6 00 	sts	0x00C6, r28
	return(1);
}
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	cf 91       	pop	r28
     a4c:	08 95       	ret

00000a4e <uart_putchar_2>:

int uart_putchar_2(char ch, FILE *stream) {
     a4e:	cf 93       	push	r28
     a50:	c8 2f       	mov	r28, r24
	if(ch=='\n')
     a52:	8a 30       	cpi	r24, 0x0A	; 10
     a54:	39 f4       	brne	.+14     	; 0xa64 <uart_putchar_2+0x16>
		uart_putchar_2('\r',stdout);
     a56:	60 91 c7 04 	lds	r22, 0x04C7
     a5a:	70 91 c8 04 	lds	r23, 0x04C8
     a5e:	8d e0       	ldi	r24, 0x0D	; 13
     a60:	0e 94 27 05 	call	0xa4e	; 0xa4e <uart_putchar_2>
	while(!(UCSR0A & (1<<UDRE0)))
     a64:	80 91 c0 00 	lds	r24, 0x00C0
     a68:	85 ff       	sbrs	r24, 5
     a6a:	fc cf       	rjmp	.-8      	; 0xa64 <uart_putchar_2+0x16>
		;
	UDR0=ch;
     a6c:	c0 93 c6 00 	sts	0x00C6, r28
	return(1);
}
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	cf 91       	pop	r28
     a76:	08 95       	ret

00000a78 <main>:

int main()
{
	int sec = 0;
	//uint8_t h,m,s;
	uart_init();
     a78:	0e 94 73 04 	call	0x8e6	; 0x8e6 <uart_init>
	timer2_init(); sei();
     a7c:	0e 94 c8 00 	call	0x190	; 0x190 <timer2_init>
     a80:	78 94       	sei

void pr_time(int sec);

int main()
{
	int sec = 0;
     a82:	c0 e0       	ldi	r28, 0x00	; 0
     a84:	d0 e0       	ldi	r29, 0x00	; 0
	//uint8_t h,m,s;
	uart_init();
	timer2_init(); sei();
	//h=m=s=0;
	while(1) {
		while(!time_flag);
     a86:	80 91 7f 04 	lds	r24, 0x047F
     a8a:	88 23       	and	r24, r24
     a8c:	e1 f3       	breq	.-8      	; 0xa86 <main+0xe>
		time_flag = 0;
     a8e:	10 92 7f 04 	sts	0x047F, r1
		sec++;
     a92:	21 96       	adiw	r28, 0x01	; 1
		pr_time(sec);
     a94:	ce 01       	movw	r24, r28
     a96:	0e 94 96 00 	call	0x12c	; 0x12c <pr_time>
	}
     a9a:	f5 cf       	rjmp	.-22     	; 0xa86 <main+0xe>

00000a9c <__divmodhi4>:
     a9c:	97 fb       	bst	r25, 7
     a9e:	09 2e       	mov	r0, r25
     aa0:	07 26       	eor	r0, r23
     aa2:	0a d0       	rcall	.+20     	; 0xab8 <__divmodhi4_neg1>
     aa4:	77 fd       	sbrc	r23, 7
     aa6:	04 d0       	rcall	.+8      	; 0xab0 <__divmodhi4_neg2>
     aa8:	0c d0       	rcall	.+24     	; 0xac2 <__udivmodhi4>
     aaa:	06 d0       	rcall	.+12     	; 0xab8 <__divmodhi4_neg1>
     aac:	00 20       	and	r0, r0
     aae:	1a f4       	brpl	.+6      	; 0xab6 <__divmodhi4_exit>

00000ab0 <__divmodhi4_neg2>:
     ab0:	70 95       	com	r23
     ab2:	61 95       	neg	r22
     ab4:	7f 4f       	sbci	r23, 0xFF	; 255

00000ab6 <__divmodhi4_exit>:
     ab6:	08 95       	ret

00000ab8 <__divmodhi4_neg1>:
     ab8:	f6 f7       	brtc	.-4      	; 0xab6 <__divmodhi4_exit>
     aba:	90 95       	com	r25
     abc:	81 95       	neg	r24
     abe:	9f 4f       	sbci	r25, 0xFF	; 255
     ac0:	08 95       	ret

00000ac2 <__udivmodhi4>:
     ac2:	aa 1b       	sub	r26, r26
     ac4:	bb 1b       	sub	r27, r27
     ac6:	51 e1       	ldi	r21, 0x11	; 17
     ac8:	07 c0       	rjmp	.+14     	; 0xad8 <__udivmodhi4_ep>

00000aca <__udivmodhi4_loop>:
     aca:	aa 1f       	adc	r26, r26
     acc:	bb 1f       	adc	r27, r27
     ace:	a6 17       	cp	r26, r22
     ad0:	b7 07       	cpc	r27, r23
     ad2:	10 f0       	brcs	.+4      	; 0xad8 <__udivmodhi4_ep>
     ad4:	a6 1b       	sub	r26, r22
     ad6:	b7 0b       	sbc	r27, r23

00000ad8 <__udivmodhi4_ep>:
     ad8:	88 1f       	adc	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	5a 95       	dec	r21
     ade:	a9 f7       	brne	.-22     	; 0xaca <__udivmodhi4_loop>
     ae0:	80 95       	com	r24
     ae2:	90 95       	com	r25
     ae4:	bc 01       	movw	r22, r24
     ae6:	cd 01       	movw	r24, r26
     ae8:	08 95       	ret

00000aea <malloc>:
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	ac 01       	movw	r20, r24
     af0:	82 30       	cpi	r24, 0x02	; 2
     af2:	91 05       	cpc	r25, r1
     af4:	10 f4       	brcc	.+4      	; 0xafa <malloc+0x10>
     af6:	42 e0       	ldi	r20, 0x02	; 2
     af8:	50 e0       	ldi	r21, 0x00	; 0
     afa:	e0 91 c3 04 	lds	r30, 0x04C3
     afe:	f0 91 c4 04 	lds	r31, 0x04C4
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	a0 e0       	ldi	r26, 0x00	; 0
     b08:	b0 e0       	ldi	r27, 0x00	; 0
     b0a:	24 c0       	rjmp	.+72     	; 0xb54 <malloc+0x6a>
     b0c:	80 81       	ld	r24, Z
     b0e:	91 81       	ldd	r25, Z+1	; 0x01
     b10:	84 17       	cp	r24, r20
     b12:	95 07       	cpc	r25, r21
     b14:	d0 f0       	brcs	.+52     	; 0xb4a <malloc+0x60>
     b16:	84 17       	cp	r24, r20
     b18:	95 07       	cpc	r25, r21
     b1a:	71 f4       	brne	.+28     	; 0xb38 <malloc+0x4e>
     b1c:	82 81       	ldd	r24, Z+2	; 0x02
     b1e:	93 81       	ldd	r25, Z+3	; 0x03
     b20:	10 97       	sbiw	r26, 0x00	; 0
     b22:	29 f0       	breq	.+10     	; 0xb2e <malloc+0x44>
     b24:	13 96       	adiw	r26, 0x03	; 3
     b26:	9c 93       	st	X, r25
     b28:	8e 93       	st	-X, r24
     b2a:	12 97       	sbiw	r26, 0x02	; 2
     b2c:	2c c0       	rjmp	.+88     	; 0xb86 <malloc+0x9c>
     b2e:	90 93 c4 04 	sts	0x04C4, r25
     b32:	80 93 c3 04 	sts	0x04C3, r24
     b36:	27 c0       	rjmp	.+78     	; 0xb86 <malloc+0x9c>
     b38:	21 15       	cp	r18, r1
     b3a:	31 05       	cpc	r19, r1
     b3c:	19 f0       	breq	.+6      	; 0xb44 <malloc+0x5a>
     b3e:	82 17       	cp	r24, r18
     b40:	93 07       	cpc	r25, r19
     b42:	18 f4       	brcc	.+6      	; 0xb4a <malloc+0x60>
     b44:	9c 01       	movw	r18, r24
     b46:	bd 01       	movw	r22, r26
     b48:	ef 01       	movw	r28, r30
     b4a:	92 81       	ldd	r25, Z+2	; 0x02
     b4c:	83 81       	ldd	r24, Z+3	; 0x03
     b4e:	df 01       	movw	r26, r30
     b50:	e9 2f       	mov	r30, r25
     b52:	f8 2f       	mov	r31, r24
     b54:	30 97       	sbiw	r30, 0x00	; 0
     b56:	d1 f6       	brne	.-76     	; 0xb0c <malloc+0x22>
     b58:	21 15       	cp	r18, r1
     b5a:	31 05       	cpc	r19, r1
     b5c:	f9 f0       	breq	.+62     	; 0xb9c <malloc+0xb2>
     b5e:	c9 01       	movw	r24, r18
     b60:	84 1b       	sub	r24, r20
     b62:	95 0b       	sbc	r25, r21
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	91 05       	cpc	r25, r1
     b68:	80 f4       	brcc	.+32     	; 0xb8a <malloc+0xa0>
     b6a:	8a 81       	ldd	r24, Y+2	; 0x02
     b6c:	9b 81       	ldd	r25, Y+3	; 0x03
     b6e:	61 15       	cp	r22, r1
     b70:	71 05       	cpc	r23, r1
     b72:	21 f0       	breq	.+8      	; 0xb7c <malloc+0x92>
     b74:	fb 01       	movw	r30, r22
     b76:	93 83       	std	Z+3, r25	; 0x03
     b78:	82 83       	std	Z+2, r24	; 0x02
     b7a:	04 c0       	rjmp	.+8      	; 0xb84 <malloc+0x9a>
     b7c:	90 93 c4 04 	sts	0x04C4, r25
     b80:	80 93 c3 04 	sts	0x04C3, r24
     b84:	fe 01       	movw	r30, r28
     b86:	32 96       	adiw	r30, 0x02	; 2
     b88:	42 c0       	rjmp	.+132    	; 0xc0e <malloc+0x124>
     b8a:	fe 01       	movw	r30, r28
     b8c:	e8 0f       	add	r30, r24
     b8e:	f9 1f       	adc	r31, r25
     b90:	41 93       	st	Z+, r20
     b92:	51 93       	st	Z+, r21
     b94:	02 97       	sbiw	r24, 0x02	; 2
     b96:	99 83       	std	Y+1, r25	; 0x01
     b98:	88 83       	st	Y, r24
     b9a:	39 c0       	rjmp	.+114    	; 0xc0e <malloc+0x124>
     b9c:	80 91 c1 04 	lds	r24, 0x04C1
     ba0:	90 91 c2 04 	lds	r25, 0x04C2
     ba4:	00 97       	sbiw	r24, 0x00	; 0
     ba6:	41 f4       	brne	.+16     	; 0xbb8 <malloc+0xce>
     ba8:	80 91 6a 02 	lds	r24, 0x026A
     bac:	90 91 6b 02 	lds	r25, 0x026B
     bb0:	90 93 c2 04 	sts	0x04C2, r25
     bb4:	80 93 c1 04 	sts	0x04C1, r24
     bb8:	20 91 68 02 	lds	r18, 0x0268
     bbc:	30 91 69 02 	lds	r19, 0x0269
     bc0:	21 15       	cp	r18, r1
     bc2:	31 05       	cpc	r19, r1
     bc4:	41 f4       	brne	.+16     	; 0xbd6 <malloc+0xec>
     bc6:	2d b7       	in	r18, 0x3d	; 61
     bc8:	3e b7       	in	r19, 0x3e	; 62
     bca:	80 91 6c 02 	lds	r24, 0x026C
     bce:	90 91 6d 02 	lds	r25, 0x026D
     bd2:	28 1b       	sub	r18, r24
     bd4:	39 0b       	sbc	r19, r25
     bd6:	e0 91 c1 04 	lds	r30, 0x04C1
     bda:	f0 91 c2 04 	lds	r31, 0x04C2
     bde:	e2 17       	cp	r30, r18
     be0:	f3 07       	cpc	r31, r19
     be2:	98 f4       	brcc	.+38     	; 0xc0a <malloc+0x120>
     be4:	2e 1b       	sub	r18, r30
     be6:	3f 0b       	sbc	r19, r31
     be8:	24 17       	cp	r18, r20
     bea:	35 07       	cpc	r19, r21
     bec:	70 f0       	brcs	.+28     	; 0xc0a <malloc+0x120>
     bee:	ca 01       	movw	r24, r20
     bf0:	02 96       	adiw	r24, 0x02	; 2
     bf2:	28 17       	cp	r18, r24
     bf4:	39 07       	cpc	r19, r25
     bf6:	48 f0       	brcs	.+18     	; 0xc0a <malloc+0x120>
     bf8:	8e 0f       	add	r24, r30
     bfa:	9f 1f       	adc	r25, r31
     bfc:	90 93 c2 04 	sts	0x04C2, r25
     c00:	80 93 c1 04 	sts	0x04C1, r24
     c04:	41 93       	st	Z+, r20
     c06:	51 93       	st	Z+, r21
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <malloc+0x124>
     c0a:	e0 e0       	ldi	r30, 0x00	; 0
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	cf 01       	movw	r24, r30
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	08 95       	ret

00000c16 <free>:
     c16:	0f 93       	push	r16
     c18:	1f 93       	push	r17
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	9c 01       	movw	r18, r24
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	09 f4       	brne	.+2      	; 0xc26 <free+0x10>
     c24:	8c c0       	rjmp	.+280    	; 0xd3e <free+0x128>
     c26:	dc 01       	movw	r26, r24
     c28:	12 97       	sbiw	r26, 0x02	; 2
     c2a:	13 96       	adiw	r26, 0x03	; 3
     c2c:	1c 92       	st	X, r1
     c2e:	1e 92       	st	-X, r1
     c30:	12 97       	sbiw	r26, 0x02	; 2
     c32:	60 91 c3 04 	lds	r22, 0x04C3
     c36:	70 91 c4 04 	lds	r23, 0x04C4
     c3a:	61 15       	cp	r22, r1
     c3c:	71 05       	cpc	r23, r1
     c3e:	89 f4       	brne	.+34     	; 0xc62 <free+0x4c>
     c40:	8d 91       	ld	r24, X+
     c42:	9c 91       	ld	r25, X
     c44:	11 97       	sbiw	r26, 0x01	; 1
     c46:	82 0f       	add	r24, r18
     c48:	93 1f       	adc	r25, r19
     c4a:	20 91 c1 04 	lds	r18, 0x04C1
     c4e:	30 91 c2 04 	lds	r19, 0x04C2
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	69 f5       	brne	.+90     	; 0xcb2 <free+0x9c>
     c58:	b0 93 c2 04 	sts	0x04C2, r27
     c5c:	a0 93 c1 04 	sts	0x04C1, r26
     c60:	6e c0       	rjmp	.+220    	; 0xd3e <free+0x128>
     c62:	fb 01       	movw	r30, r22
     c64:	40 e0       	ldi	r20, 0x00	; 0
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	01 c0       	rjmp	.+2      	; 0xc6c <free+0x56>
     c6a:	fc 01       	movw	r30, r24
     c6c:	ea 17       	cp	r30, r26
     c6e:	fb 07       	cpc	r31, r27
     c70:	30 f4       	brcc	.+12     	; 0xc7e <free+0x68>
     c72:	82 81       	ldd	r24, Z+2	; 0x02
     c74:	93 81       	ldd	r25, Z+3	; 0x03
     c76:	af 01       	movw	r20, r30
     c78:	00 97       	sbiw	r24, 0x00	; 0
     c7a:	b9 f7       	brne	.-18     	; 0xc6a <free+0x54>
     c7c:	1f c0       	rjmp	.+62     	; 0xcbc <free+0xa6>
     c7e:	e9 01       	movw	r28, r18
     c80:	22 97       	sbiw	r28, 0x02	; 2
     c82:	fb 83       	std	Y+3, r31	; 0x03
     c84:	ea 83       	std	Y+2, r30	; 0x02
     c86:	08 81       	ld	r16, Y
     c88:	19 81       	ldd	r17, Y+1	; 0x01
     c8a:	c9 01       	movw	r24, r18
     c8c:	80 0f       	add	r24, r16
     c8e:	91 1f       	adc	r25, r17
     c90:	8e 17       	cp	r24, r30
     c92:	9f 07       	cpc	r25, r31
     c94:	59 f4       	brne	.+22     	; 0xcac <free+0x96>
     c96:	80 81       	ld	r24, Z
     c98:	91 81       	ldd	r25, Z+1	; 0x01
     c9a:	80 0f       	add	r24, r16
     c9c:	91 1f       	adc	r25, r17
     c9e:	02 96       	adiw	r24, 0x02	; 2
     ca0:	99 83       	std	Y+1, r25	; 0x01
     ca2:	88 83       	st	Y, r24
     ca4:	82 81       	ldd	r24, Z+2	; 0x02
     ca6:	93 81       	ldd	r25, Z+3	; 0x03
     ca8:	9b 83       	std	Y+3, r25	; 0x03
     caa:	8a 83       	std	Y+2, r24	; 0x02
     cac:	41 15       	cp	r20, r1
     cae:	51 05       	cpc	r21, r1
     cb0:	29 f4       	brne	.+10     	; 0xcbc <free+0xa6>
     cb2:	b0 93 c4 04 	sts	0x04C4, r27
     cb6:	a0 93 c3 04 	sts	0x04C3, r26
     cba:	41 c0       	rjmp	.+130    	; 0xd3e <free+0x128>
     cbc:	fa 01       	movw	r30, r20
     cbe:	b3 83       	std	Z+3, r27	; 0x03
     cc0:	a2 83       	std	Z+2, r26	; 0x02
     cc2:	c1 91       	ld	r28, Z+
     cc4:	d1 91       	ld	r29, Z+
     cc6:	ec 0f       	add	r30, r28
     cc8:	fd 1f       	adc	r31, r29
     cca:	ae 17       	cp	r26, r30
     ccc:	bf 07       	cpc	r27, r31
     cce:	81 f4       	brne	.+32     	; 0xcf0 <free+0xda>
     cd0:	f9 01       	movw	r30, r18
     cd2:	92 91       	ld	r25, -Z
     cd4:	82 91       	ld	r24, -Z
     cd6:	8c 0f       	add	r24, r28
     cd8:	9d 1f       	adc	r25, r29
     cda:	02 96       	adiw	r24, 0x02	; 2
     cdc:	da 01       	movw	r26, r20
     cde:	11 96       	adiw	r26, 0x01	; 1
     ce0:	9c 93       	st	X, r25
     ce2:	8e 93       	st	-X, r24
     ce4:	82 81       	ldd	r24, Z+2	; 0x02
     ce6:	93 81       	ldd	r25, Z+3	; 0x03
     ce8:	13 96       	adiw	r26, 0x03	; 3
     cea:	9c 93       	st	X, r25
     cec:	8e 93       	st	-X, r24
     cee:	12 97       	sbiw	r26, 0x02	; 2
     cf0:	e0 e0       	ldi	r30, 0x00	; 0
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <free+0xe4>
     cf6:	fb 01       	movw	r30, r22
     cf8:	bc 01       	movw	r22, r24
     cfa:	db 01       	movw	r26, r22
     cfc:	12 96       	adiw	r26, 0x02	; 2
     cfe:	8d 91       	ld	r24, X+
     d00:	9c 91       	ld	r25, X
     d02:	13 97       	sbiw	r26, 0x03	; 3
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	b9 f7       	brne	.-18     	; 0xcf6 <free+0xe0>
     d08:	cb 01       	movw	r24, r22
     d0a:	02 96       	adiw	r24, 0x02	; 2
     d0c:	2d 91       	ld	r18, X+
     d0e:	3c 91       	ld	r19, X
     d10:	11 97       	sbiw	r26, 0x01	; 1
     d12:	82 0f       	add	r24, r18
     d14:	93 1f       	adc	r25, r19
     d16:	20 91 c1 04 	lds	r18, 0x04C1
     d1a:	30 91 c2 04 	lds	r19, 0x04C2
     d1e:	28 17       	cp	r18, r24
     d20:	39 07       	cpc	r19, r25
     d22:	69 f4       	brne	.+26     	; 0xd3e <free+0x128>
     d24:	30 97       	sbiw	r30, 0x00	; 0
     d26:	29 f4       	brne	.+10     	; 0xd32 <free+0x11c>
     d28:	10 92 c4 04 	sts	0x04C4, r1
     d2c:	10 92 c3 04 	sts	0x04C3, r1
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <free+0x120>
     d32:	13 82       	std	Z+3, r1	; 0x03
     d34:	12 82       	std	Z+2, r1	; 0x02
     d36:	70 93 c2 04 	sts	0x04C2, r23
     d3a:	60 93 c1 04 	sts	0x04C1, r22
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	1f 91       	pop	r17
     d44:	0f 91       	pop	r16
     d46:	08 95       	ret

00000d48 <atoi>:
     d48:	fc 01       	movw	r30, r24
     d4a:	88 27       	eor	r24, r24
     d4c:	99 27       	eor	r25, r25
     d4e:	e8 94       	clt
     d50:	21 91       	ld	r18, Z+
     d52:	20 32       	cpi	r18, 0x20	; 32
     d54:	e9 f3       	breq	.-6      	; 0xd50 <atoi+0x8>
     d56:	29 30       	cpi	r18, 0x09	; 9
     d58:	10 f0       	brcs	.+4      	; 0xd5e <atoi+0x16>
     d5a:	2e 30       	cpi	r18, 0x0E	; 14
     d5c:	c8 f3       	brcs	.-14     	; 0xd50 <atoi+0x8>
     d5e:	2b 32       	cpi	r18, 0x2B	; 43
     d60:	41 f0       	breq	.+16     	; 0xd72 <atoi+0x2a>
     d62:	2d 32       	cpi	r18, 0x2D	; 45
     d64:	39 f4       	brne	.+14     	; 0xd74 <atoi+0x2c>
     d66:	68 94       	set
     d68:	04 c0       	rjmp	.+8      	; 0xd72 <atoi+0x2a>
     d6a:	0e 94 d2 06 	call	0xda4	; 0xda4 <__mulhi_const_10>
     d6e:	82 0f       	add	r24, r18
     d70:	91 1d       	adc	r25, r1
     d72:	21 91       	ld	r18, Z+
     d74:	20 53       	subi	r18, 0x30	; 48
     d76:	2a 30       	cpi	r18, 0x0A	; 10
     d78:	c0 f3       	brcs	.-16     	; 0xd6a <atoi+0x22>
     d7a:	1e f4       	brtc	.+6      	; 0xd82 <atoi+0x3a>
     d7c:	90 95       	com	r25
     d7e:	81 95       	neg	r24
     d80:	9f 4f       	sbci	r25, 0xFF	; 255
     d82:	08 95       	ret

00000d84 <strcmp>:
     d84:	fb 01       	movw	r30, r22
     d86:	dc 01       	movw	r26, r24
     d88:	8d 91       	ld	r24, X+
     d8a:	01 90       	ld	r0, Z+
     d8c:	80 19       	sub	r24, r0
     d8e:	01 10       	cpse	r0, r1
     d90:	d9 f3       	breq	.-10     	; 0xd88 <strcmp+0x4>
     d92:	99 0b       	sbc	r25, r25
     d94:	08 95       	ret

00000d96 <strcpy>:
     d96:	fb 01       	movw	r30, r22
     d98:	dc 01       	movw	r26, r24
     d9a:	01 90       	ld	r0, Z+
     d9c:	0d 92       	st	X+, r0
     d9e:	00 20       	and	r0, r0
     da0:	e1 f7       	brne	.-8      	; 0xd9a <strcpy+0x4>
     da2:	08 95       	ret

00000da4 <__mulhi_const_10>:
     da4:	7a e0       	ldi	r23, 0x0A	; 10
     da6:	97 9f       	mul	r25, r23
     da8:	90 2d       	mov	r25, r0
     daa:	87 9f       	mul	r24, r23
     dac:	80 2d       	mov	r24, r0
     dae:	91 0d       	add	r25, r1
     db0:	11 24       	eor	r1, r1
     db2:	08 95       	ret

00000db4 <fgets>:
     db4:	cf 92       	push	r12
     db6:	df 92       	push	r13
     db8:	ef 92       	push	r14
     dba:	ff 92       	push	r15
     dbc:	0f 93       	push	r16
     dbe:	1f 93       	push	r17
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	8c 01       	movw	r16, r24
     dc6:	6a 01       	movw	r12, r20
     dc8:	fa 01       	movw	r30, r20
     dca:	83 81       	ldd	r24, Z+3	; 0x03
     dcc:	80 ff       	sbrs	r24, 0
     dce:	1a c0       	rjmp	.+52     	; 0xe04 <fgets+0x50>
     dd0:	16 16       	cp	r1, r22
     dd2:	17 06       	cpc	r1, r23
     dd4:	bc f4       	brge	.+46     	; 0xe04 <fgets+0x50>
     dd6:	7b 01       	movw	r14, r22
     dd8:	e8 01       	movw	r28, r16
     dda:	0e c0       	rjmp	.+28     	; 0xdf8 <fgets+0x44>
     ddc:	c6 01       	movw	r24, r12
     dde:	0e 94 44 09 	call	0x1288	; 0x1288 <fgetc>
     de2:	ff ef       	ldi	r31, 0xFF	; 255
     de4:	8f 3f       	cpi	r24, 0xFF	; 255
     de6:	9f 07       	cpc	r25, r31
     de8:	69 f0       	breq	.+26     	; 0xe04 <fgets+0x50>
     dea:	89 93       	st	Y+, r24
     dec:	08 94       	sec
     dee:	e1 08       	sbc	r14, r1
     df0:	f1 08       	sbc	r15, r1
     df2:	8a 30       	cpi	r24, 0x0A	; 10
     df4:	91 05       	cpc	r25, r1
     df6:	21 f0       	breq	.+8      	; 0xe00 <fgets+0x4c>
     df8:	21 e0       	ldi	r18, 0x01	; 1
     dfa:	e2 16       	cp	r14, r18
     dfc:	f1 04       	cpc	r15, r1
     dfe:	71 f7       	brne	.-36     	; 0xddc <fgets+0x28>
     e00:	18 82       	st	Y, r1
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <fgets+0x54>
     e04:	00 e0       	ldi	r16, 0x00	; 0
     e06:	10 e0       	ldi	r17, 0x00	; 0
     e08:	c8 01       	movw	r24, r16
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	ff 90       	pop	r15
     e14:	ef 90       	pop	r14
     e16:	df 90       	pop	r13
     e18:	cf 90       	pop	r12
     e1a:	08 95       	ret

00000e1c <printf>:
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	fe 01       	movw	r30, r28
     e26:	36 96       	adiw	r30, 0x06	; 6
     e28:	61 91       	ld	r22, Z+
     e2a:	71 91       	ld	r23, Z+
     e2c:	80 91 c7 04 	lds	r24, 0x04C7
     e30:	90 91 c8 04 	lds	r25, 0x04C8
     e34:	af 01       	movw	r20, r30
     e36:	0e 94 27 07 	call	0xe4e	; 0xe4e <vfprintf>
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	08 95       	ret

00000e40 <putchar>:
     e40:	60 91 c7 04 	lds	r22, 0x04C7
     e44:	70 91 c8 04 	lds	r23, 0x04C8
     e48:	0e 94 84 09 	call	0x1308	; 0x1308 <fputc>
     e4c:	08 95       	ret

00000e4e <vfprintf>:
     e4e:	2f 92       	push	r2
     e50:	3f 92       	push	r3
     e52:	4f 92       	push	r4
     e54:	5f 92       	push	r5
     e56:	6f 92       	push	r6
     e58:	7f 92       	push	r7
     e5a:	8f 92       	push	r8
     e5c:	9f 92       	push	r9
     e5e:	af 92       	push	r10
     e60:	bf 92       	push	r11
     e62:	cf 92       	push	r12
     e64:	df 92       	push	r13
     e66:	ef 92       	push	r14
     e68:	ff 92       	push	r15
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	2d 97       	sbiw	r28, 0x0d	; 13
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	cd bf       	out	0x3d, r28	; 61
     e82:	3c 01       	movw	r6, r24
     e84:	7d 87       	std	Y+13, r23	; 0x0d
     e86:	6c 87       	std	Y+12, r22	; 0x0c
     e88:	5a 01       	movw	r10, r20
     e8a:	fc 01       	movw	r30, r24
     e8c:	17 82       	std	Z+7, r1	; 0x07
     e8e:	16 82       	std	Z+6, r1	; 0x06
     e90:	83 81       	ldd	r24, Z+3	; 0x03
     e92:	81 ff       	sbrs	r24, 1
     e94:	c8 c1       	rjmp	.+912    	; 0x1226 <vfprintf+0x3d8>
     e96:	2e 01       	movw	r4, r28
     e98:	08 94       	sec
     e9a:	41 1c       	adc	r4, r1
     e9c:	51 1c       	adc	r5, r1
     e9e:	f3 01       	movw	r30, r6
     ea0:	93 81       	ldd	r25, Z+3	; 0x03
     ea2:	ec 85       	ldd	r30, Y+12	; 0x0c
     ea4:	fd 85       	ldd	r31, Y+13	; 0x0d
     ea6:	93 fd       	sbrc	r25, 3
     ea8:	85 91       	lpm	r24, Z+
     eaa:	93 ff       	sbrs	r25, 3
     eac:	81 91       	ld	r24, Z+
     eae:	fd 87       	std	Y+13, r31	; 0x0d
     eb0:	ec 87       	std	Y+12, r30	; 0x0c
     eb2:	88 23       	and	r24, r24
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <vfprintf+0x6a>
     eb6:	b3 c1       	rjmp	.+870    	; 0x121e <vfprintf+0x3d0>
     eb8:	85 32       	cpi	r24, 0x25	; 37
     eba:	41 f4       	brne	.+16     	; 0xecc <vfprintf+0x7e>
     ebc:	93 fd       	sbrc	r25, 3
     ebe:	85 91       	lpm	r24, Z+
     ec0:	93 ff       	sbrs	r25, 3
     ec2:	81 91       	ld	r24, Z+
     ec4:	fd 87       	std	Y+13, r31	; 0x0d
     ec6:	ec 87       	std	Y+12, r30	; 0x0c
     ec8:	85 32       	cpi	r24, 0x25	; 37
     eca:	29 f4       	brne	.+10     	; 0xed6 <vfprintf+0x88>
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	b3 01       	movw	r22, r6
     ed0:	0e 94 84 09 	call	0x1308	; 0x1308 <fputc>
     ed4:	e4 cf       	rjmp	.-56     	; 0xe9e <vfprintf+0x50>
     ed6:	ff 24       	eor	r15, r15
     ed8:	ee 24       	eor	r14, r14
     eda:	10 e0       	ldi	r17, 0x00	; 0
     edc:	10 32       	cpi	r17, 0x20	; 32
     ede:	b0 f4       	brcc	.+44     	; 0xf0c <vfprintf+0xbe>
     ee0:	8b 32       	cpi	r24, 0x2B	; 43
     ee2:	69 f0       	breq	.+26     	; 0xefe <vfprintf+0xb0>
     ee4:	8c 32       	cpi	r24, 0x2C	; 44
     ee6:	28 f4       	brcc	.+10     	; 0xef2 <vfprintf+0xa4>
     ee8:	80 32       	cpi	r24, 0x20	; 32
     eea:	51 f0       	breq	.+20     	; 0xf00 <vfprintf+0xb2>
     eec:	83 32       	cpi	r24, 0x23	; 35
     eee:	71 f4       	brne	.+28     	; 0xf0c <vfprintf+0xbe>
     ef0:	0b c0       	rjmp	.+22     	; 0xf08 <vfprintf+0xba>
     ef2:	8d 32       	cpi	r24, 0x2D	; 45
     ef4:	39 f0       	breq	.+14     	; 0xf04 <vfprintf+0xb6>
     ef6:	80 33       	cpi	r24, 0x30	; 48
     ef8:	49 f4       	brne	.+18     	; 0xf0c <vfprintf+0xbe>
     efa:	11 60       	ori	r17, 0x01	; 1
     efc:	2c c0       	rjmp	.+88     	; 0xf56 <vfprintf+0x108>
     efe:	12 60       	ori	r17, 0x02	; 2
     f00:	14 60       	ori	r17, 0x04	; 4
     f02:	29 c0       	rjmp	.+82     	; 0xf56 <vfprintf+0x108>
     f04:	18 60       	ori	r17, 0x08	; 8
     f06:	27 c0       	rjmp	.+78     	; 0xf56 <vfprintf+0x108>
     f08:	10 61       	ori	r17, 0x10	; 16
     f0a:	25 c0       	rjmp	.+74     	; 0xf56 <vfprintf+0x108>
     f0c:	17 fd       	sbrc	r17, 7
     f0e:	2e c0       	rjmp	.+92     	; 0xf6c <vfprintf+0x11e>
     f10:	28 2f       	mov	r18, r24
     f12:	20 53       	subi	r18, 0x30	; 48
     f14:	2a 30       	cpi	r18, 0x0A	; 10
     f16:	98 f4       	brcc	.+38     	; 0xf3e <vfprintf+0xf0>
     f18:	16 ff       	sbrs	r17, 6
     f1a:	08 c0       	rjmp	.+16     	; 0xf2c <vfprintf+0xde>
     f1c:	8f 2d       	mov	r24, r15
     f1e:	88 0f       	add	r24, r24
     f20:	f8 2e       	mov	r15, r24
     f22:	ff 0c       	add	r15, r15
     f24:	ff 0c       	add	r15, r15
     f26:	f8 0e       	add	r15, r24
     f28:	f2 0e       	add	r15, r18
     f2a:	15 c0       	rjmp	.+42     	; 0xf56 <vfprintf+0x108>
     f2c:	8e 2d       	mov	r24, r14
     f2e:	88 0f       	add	r24, r24
     f30:	e8 2e       	mov	r14, r24
     f32:	ee 0c       	add	r14, r14
     f34:	ee 0c       	add	r14, r14
     f36:	e8 0e       	add	r14, r24
     f38:	e2 0e       	add	r14, r18
     f3a:	10 62       	ori	r17, 0x20	; 32
     f3c:	0c c0       	rjmp	.+24     	; 0xf56 <vfprintf+0x108>
     f3e:	8e 32       	cpi	r24, 0x2E	; 46
     f40:	21 f4       	brne	.+8      	; 0xf4a <vfprintf+0xfc>
     f42:	16 fd       	sbrc	r17, 6
     f44:	6c c1       	rjmp	.+728    	; 0x121e <vfprintf+0x3d0>
     f46:	10 64       	ori	r17, 0x40	; 64
     f48:	06 c0       	rjmp	.+12     	; 0xf56 <vfprintf+0x108>
     f4a:	8c 36       	cpi	r24, 0x6C	; 108
     f4c:	11 f4       	brne	.+4      	; 0xf52 <vfprintf+0x104>
     f4e:	10 68       	ori	r17, 0x80	; 128
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <vfprintf+0x108>
     f52:	88 36       	cpi	r24, 0x68	; 104
     f54:	59 f4       	brne	.+22     	; 0xf6c <vfprintf+0x11e>
     f56:	ec 85       	ldd	r30, Y+12	; 0x0c
     f58:	fd 85       	ldd	r31, Y+13	; 0x0d
     f5a:	93 fd       	sbrc	r25, 3
     f5c:	85 91       	lpm	r24, Z+
     f5e:	93 ff       	sbrs	r25, 3
     f60:	81 91       	ld	r24, Z+
     f62:	fd 87       	std	Y+13, r31	; 0x0d
     f64:	ec 87       	std	Y+12, r30	; 0x0c
     f66:	88 23       	and	r24, r24
     f68:	09 f0       	breq	.+2      	; 0xf6c <vfprintf+0x11e>
     f6a:	b8 cf       	rjmp	.-144    	; 0xedc <vfprintf+0x8e>
     f6c:	98 2f       	mov	r25, r24
     f6e:	95 54       	subi	r25, 0x45	; 69
     f70:	93 30       	cpi	r25, 0x03	; 3
     f72:	18 f0       	brcs	.+6      	; 0xf7a <vfprintf+0x12c>
     f74:	90 52       	subi	r25, 0x20	; 32
     f76:	93 30       	cpi	r25, 0x03	; 3
     f78:	38 f4       	brcc	.+14     	; 0xf88 <vfprintf+0x13a>
     f7a:	24 e0       	ldi	r18, 0x04	; 4
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	a2 0e       	add	r10, r18
     f80:	b3 1e       	adc	r11, r19
     f82:	3f e3       	ldi	r19, 0x3F	; 63
     f84:	39 83       	std	Y+1, r19	; 0x01
     f86:	0f c0       	rjmp	.+30     	; 0xfa6 <vfprintf+0x158>
     f88:	83 36       	cpi	r24, 0x63	; 99
     f8a:	31 f0       	breq	.+12     	; 0xf98 <vfprintf+0x14a>
     f8c:	83 37       	cpi	r24, 0x73	; 115
     f8e:	81 f0       	breq	.+32     	; 0xfb0 <vfprintf+0x162>
     f90:	83 35       	cpi	r24, 0x53	; 83
     f92:	09 f0       	breq	.+2      	; 0xf96 <vfprintf+0x148>
     f94:	5a c0       	rjmp	.+180    	; 0x104a <vfprintf+0x1fc>
     f96:	22 c0       	rjmp	.+68     	; 0xfdc <vfprintf+0x18e>
     f98:	f5 01       	movw	r30, r10
     f9a:	80 81       	ld	r24, Z
     f9c:	89 83       	std	Y+1, r24	; 0x01
     f9e:	22 e0       	ldi	r18, 0x02	; 2
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	a2 0e       	add	r10, r18
     fa4:	b3 1e       	adc	r11, r19
     fa6:	21 e0       	ldi	r18, 0x01	; 1
     fa8:	c2 2e       	mov	r12, r18
     faa:	d1 2c       	mov	r13, r1
     fac:	42 01       	movw	r8, r4
     fae:	14 c0       	rjmp	.+40     	; 0xfd8 <vfprintf+0x18a>
     fb0:	92 e0       	ldi	r25, 0x02	; 2
     fb2:	29 2e       	mov	r2, r25
     fb4:	31 2c       	mov	r3, r1
     fb6:	2a 0c       	add	r2, r10
     fb8:	3b 1c       	adc	r3, r11
     fba:	f5 01       	movw	r30, r10
     fbc:	80 80       	ld	r8, Z
     fbe:	91 80       	ldd	r9, Z+1	; 0x01
     fc0:	16 ff       	sbrs	r17, 6
     fc2:	03 c0       	rjmp	.+6      	; 0xfca <vfprintf+0x17c>
     fc4:	6f 2d       	mov	r22, r15
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <vfprintf+0x180>
     fca:	6f ef       	ldi	r22, 0xFF	; 255
     fcc:	7f ef       	ldi	r23, 0xFF	; 255
     fce:	c4 01       	movw	r24, r8
     fd0:	0e 94 39 09 	call	0x1272	; 0x1272 <strnlen>
     fd4:	6c 01       	movw	r12, r24
     fd6:	51 01       	movw	r10, r2
     fd8:	1f 77       	andi	r17, 0x7F	; 127
     fda:	15 c0       	rjmp	.+42     	; 0x1006 <vfprintf+0x1b8>
     fdc:	82 e0       	ldi	r24, 0x02	; 2
     fde:	28 2e       	mov	r2, r24
     fe0:	31 2c       	mov	r3, r1
     fe2:	2a 0c       	add	r2, r10
     fe4:	3b 1c       	adc	r3, r11
     fe6:	f5 01       	movw	r30, r10
     fe8:	80 80       	ld	r8, Z
     fea:	91 80       	ldd	r9, Z+1	; 0x01
     fec:	16 ff       	sbrs	r17, 6
     fee:	03 c0       	rjmp	.+6      	; 0xff6 <vfprintf+0x1a8>
     ff0:	6f 2d       	mov	r22, r15
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <vfprintf+0x1ac>
     ff6:	6f ef       	ldi	r22, 0xFF	; 255
     ff8:	7f ef       	ldi	r23, 0xFF	; 255
     ffa:	c4 01       	movw	r24, r8
     ffc:	0e 94 2e 09 	call	0x125c	; 0x125c <strnlen_P>
    1000:	6c 01       	movw	r12, r24
    1002:	10 68       	ori	r17, 0x80	; 128
    1004:	51 01       	movw	r10, r2
    1006:	13 fd       	sbrc	r17, 3
    1008:	1c c0       	rjmp	.+56     	; 0x1042 <vfprintf+0x1f4>
    100a:	06 c0       	rjmp	.+12     	; 0x1018 <vfprintf+0x1ca>
    100c:	80 e2       	ldi	r24, 0x20	; 32
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	b3 01       	movw	r22, r6
    1012:	0e 94 84 09 	call	0x1308	; 0x1308 <fputc>
    1016:	ea 94       	dec	r14
    1018:	8e 2d       	mov	r24, r14
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	c8 16       	cp	r12, r24
    101e:	d9 06       	cpc	r13, r25
    1020:	a8 f3       	brcs	.-22     	; 0x100c <vfprintf+0x1be>
    1022:	0f c0       	rjmp	.+30     	; 0x1042 <vfprintf+0x1f4>
    1024:	f4 01       	movw	r30, r8
    1026:	17 fd       	sbrc	r17, 7
    1028:	85 91       	lpm	r24, Z+
    102a:	17 ff       	sbrs	r17, 7
    102c:	81 91       	ld	r24, Z+
    102e:	4f 01       	movw	r8, r30
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	b3 01       	movw	r22, r6
    1034:	0e 94 84 09 	call	0x1308	; 0x1308 <fputc>
    1038:	e1 10       	cpse	r14, r1
    103a:	ea 94       	dec	r14
    103c:	08 94       	sec
    103e:	c1 08       	sbc	r12, r1
    1040:	d1 08       	sbc	r13, r1
    1042:	c1 14       	cp	r12, r1
    1044:	d1 04       	cpc	r13, r1
    1046:	71 f7       	brne	.-36     	; 0x1024 <vfprintf+0x1d6>
    1048:	e7 c0       	rjmp	.+462    	; 0x1218 <vfprintf+0x3ca>
    104a:	84 36       	cpi	r24, 0x64	; 100
    104c:	11 f0       	breq	.+4      	; 0x1052 <vfprintf+0x204>
    104e:	89 36       	cpi	r24, 0x69	; 105
    1050:	51 f5       	brne	.+84     	; 0x10a6 <vfprintf+0x258>
    1052:	f5 01       	movw	r30, r10
    1054:	17 ff       	sbrs	r17, 7
    1056:	07 c0       	rjmp	.+14     	; 0x1066 <vfprintf+0x218>
    1058:	80 81       	ld	r24, Z
    105a:	91 81       	ldd	r25, Z+1	; 0x01
    105c:	a2 81       	ldd	r26, Z+2	; 0x02
    105e:	b3 81       	ldd	r27, Z+3	; 0x03
    1060:	24 e0       	ldi	r18, 0x04	; 4
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	08 c0       	rjmp	.+16     	; 0x1076 <vfprintf+0x228>
    1066:	80 81       	ld	r24, Z
    1068:	91 81       	ldd	r25, Z+1	; 0x01
    106a:	aa 27       	eor	r26, r26
    106c:	97 fd       	sbrc	r25, 7
    106e:	a0 95       	com	r26
    1070:	ba 2f       	mov	r27, r26
    1072:	22 e0       	ldi	r18, 0x02	; 2
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	a2 0e       	add	r10, r18
    1078:	b3 1e       	adc	r11, r19
    107a:	01 2f       	mov	r16, r17
    107c:	0f 76       	andi	r16, 0x6F	; 111
    107e:	b7 ff       	sbrs	r27, 7
    1080:	08 c0       	rjmp	.+16     	; 0x1092 <vfprintf+0x244>
    1082:	b0 95       	com	r27
    1084:	a0 95       	com	r26
    1086:	90 95       	com	r25
    1088:	81 95       	neg	r24
    108a:	9f 4f       	sbci	r25, 0xFF	; 255
    108c:	af 4f       	sbci	r26, 0xFF	; 255
    108e:	bf 4f       	sbci	r27, 0xFF	; 255
    1090:	00 68       	ori	r16, 0x80	; 128
    1092:	bc 01       	movw	r22, r24
    1094:	cd 01       	movw	r24, r26
    1096:	a2 01       	movw	r20, r4
    1098:	2a e0       	ldi	r18, 0x0A	; 10
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	0e 94 b0 09 	call	0x1360	; 0x1360 <__ultoa_invert>
    10a0:	d8 2e       	mov	r13, r24
    10a2:	d4 18       	sub	r13, r4
    10a4:	3f c0       	rjmp	.+126    	; 0x1124 <vfprintf+0x2d6>
    10a6:	85 37       	cpi	r24, 0x75	; 117
    10a8:	21 f4       	brne	.+8      	; 0x10b2 <vfprintf+0x264>
    10aa:	1f 7e       	andi	r17, 0xEF	; 239
    10ac:	2a e0       	ldi	r18, 0x0A	; 10
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	20 c0       	rjmp	.+64     	; 0x10f2 <vfprintf+0x2a4>
    10b2:	19 7f       	andi	r17, 0xF9	; 249
    10b4:	8f 36       	cpi	r24, 0x6F	; 111
    10b6:	a9 f0       	breq	.+42     	; 0x10e2 <vfprintf+0x294>
    10b8:	80 37       	cpi	r24, 0x70	; 112
    10ba:	20 f4       	brcc	.+8      	; 0x10c4 <vfprintf+0x276>
    10bc:	88 35       	cpi	r24, 0x58	; 88
    10be:	09 f0       	breq	.+2      	; 0x10c2 <vfprintf+0x274>
    10c0:	ae c0       	rjmp	.+348    	; 0x121e <vfprintf+0x3d0>
    10c2:	0b c0       	rjmp	.+22     	; 0x10da <vfprintf+0x28c>
    10c4:	80 37       	cpi	r24, 0x70	; 112
    10c6:	21 f0       	breq	.+8      	; 0x10d0 <vfprintf+0x282>
    10c8:	88 37       	cpi	r24, 0x78	; 120
    10ca:	09 f0       	breq	.+2      	; 0x10ce <vfprintf+0x280>
    10cc:	a8 c0       	rjmp	.+336    	; 0x121e <vfprintf+0x3d0>
    10ce:	01 c0       	rjmp	.+2      	; 0x10d2 <vfprintf+0x284>
    10d0:	10 61       	ori	r17, 0x10	; 16
    10d2:	14 ff       	sbrs	r17, 4
    10d4:	09 c0       	rjmp	.+18     	; 0x10e8 <vfprintf+0x29a>
    10d6:	14 60       	ori	r17, 0x04	; 4
    10d8:	07 c0       	rjmp	.+14     	; 0x10e8 <vfprintf+0x29a>
    10da:	14 ff       	sbrs	r17, 4
    10dc:	08 c0       	rjmp	.+16     	; 0x10ee <vfprintf+0x2a0>
    10de:	16 60       	ori	r17, 0x06	; 6
    10e0:	06 c0       	rjmp	.+12     	; 0x10ee <vfprintf+0x2a0>
    10e2:	28 e0       	ldi	r18, 0x08	; 8
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	05 c0       	rjmp	.+10     	; 0x10f2 <vfprintf+0x2a4>
    10e8:	20 e1       	ldi	r18, 0x10	; 16
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <vfprintf+0x2a4>
    10ee:	20 e1       	ldi	r18, 0x10	; 16
    10f0:	32 e0       	ldi	r19, 0x02	; 2
    10f2:	f5 01       	movw	r30, r10
    10f4:	17 ff       	sbrs	r17, 7
    10f6:	07 c0       	rjmp	.+14     	; 0x1106 <vfprintf+0x2b8>
    10f8:	60 81       	ld	r22, Z
    10fa:	71 81       	ldd	r23, Z+1	; 0x01
    10fc:	82 81       	ldd	r24, Z+2	; 0x02
    10fe:	93 81       	ldd	r25, Z+3	; 0x03
    1100:	44 e0       	ldi	r20, 0x04	; 4
    1102:	50 e0       	ldi	r21, 0x00	; 0
    1104:	06 c0       	rjmp	.+12     	; 0x1112 <vfprintf+0x2c4>
    1106:	60 81       	ld	r22, Z
    1108:	71 81       	ldd	r23, Z+1	; 0x01
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	42 e0       	ldi	r20, 0x02	; 2
    1110:	50 e0       	ldi	r21, 0x00	; 0
    1112:	a4 0e       	add	r10, r20
    1114:	b5 1e       	adc	r11, r21
    1116:	a2 01       	movw	r20, r4
    1118:	0e 94 b0 09 	call	0x1360	; 0x1360 <__ultoa_invert>
    111c:	d8 2e       	mov	r13, r24
    111e:	d4 18       	sub	r13, r4
    1120:	01 2f       	mov	r16, r17
    1122:	0f 77       	andi	r16, 0x7F	; 127
    1124:	06 ff       	sbrs	r16, 6
    1126:	09 c0       	rjmp	.+18     	; 0x113a <vfprintf+0x2ec>
    1128:	0e 7f       	andi	r16, 0xFE	; 254
    112a:	df 14       	cp	r13, r15
    112c:	30 f4       	brcc	.+12     	; 0x113a <vfprintf+0x2ec>
    112e:	04 ff       	sbrs	r16, 4
    1130:	06 c0       	rjmp	.+12     	; 0x113e <vfprintf+0x2f0>
    1132:	02 fd       	sbrc	r16, 2
    1134:	04 c0       	rjmp	.+8      	; 0x113e <vfprintf+0x2f0>
    1136:	0f 7e       	andi	r16, 0xEF	; 239
    1138:	02 c0       	rjmp	.+4      	; 0x113e <vfprintf+0x2f0>
    113a:	1d 2d       	mov	r17, r13
    113c:	01 c0       	rjmp	.+2      	; 0x1140 <vfprintf+0x2f2>
    113e:	1f 2d       	mov	r17, r15
    1140:	80 2f       	mov	r24, r16
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	04 ff       	sbrs	r16, 4
    1146:	0c c0       	rjmp	.+24     	; 0x1160 <vfprintf+0x312>
    1148:	fe 01       	movw	r30, r28
    114a:	ed 0d       	add	r30, r13
    114c:	f1 1d       	adc	r31, r1
    114e:	20 81       	ld	r18, Z
    1150:	20 33       	cpi	r18, 0x30	; 48
    1152:	11 f4       	brne	.+4      	; 0x1158 <vfprintf+0x30a>
    1154:	09 7e       	andi	r16, 0xE9	; 233
    1156:	09 c0       	rjmp	.+18     	; 0x116a <vfprintf+0x31c>
    1158:	02 ff       	sbrs	r16, 2
    115a:	06 c0       	rjmp	.+12     	; 0x1168 <vfprintf+0x31a>
    115c:	1e 5f       	subi	r17, 0xFE	; 254
    115e:	05 c0       	rjmp	.+10     	; 0x116a <vfprintf+0x31c>
    1160:	86 78       	andi	r24, 0x86	; 134
    1162:	90 70       	andi	r25, 0x00	; 0
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	09 f0       	breq	.+2      	; 0x116a <vfprintf+0x31c>
    1168:	1f 5f       	subi	r17, 0xFF	; 255
    116a:	80 2e       	mov	r8, r16
    116c:	99 24       	eor	r9, r9
    116e:	03 fd       	sbrc	r16, 3
    1170:	12 c0       	rjmp	.+36     	; 0x1196 <vfprintf+0x348>
    1172:	00 ff       	sbrs	r16, 0
    1174:	0d c0       	rjmp	.+26     	; 0x1190 <vfprintf+0x342>
    1176:	fd 2c       	mov	r15, r13
    1178:	1e 15       	cp	r17, r14
    117a:	50 f4       	brcc	.+20     	; 0x1190 <vfprintf+0x342>
    117c:	fe 0c       	add	r15, r14
    117e:	f1 1a       	sub	r15, r17
    1180:	1e 2d       	mov	r17, r14
    1182:	06 c0       	rjmp	.+12     	; 0x1190 <vfprintf+0x342>
    1184:	80 e2       	ldi	r24, 0x20	; 32
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	b3 01       	movw	r22, r6
    118a:	0e 94 84 09 	call	0x1308	; 0x1308 <fputc>
    118e:	1f 5f       	subi	r17, 0xFF	; 255
    1190:	1e 15       	cp	r17, r14
    1192:	c0 f3       	brcs	.-16     	; 0x1184 <vfprintf+0x336>
    1194:	04 c0       	rjmp	.+8      	; 0x119e <vfprintf+0x350>
    1196:	1e 15       	cp	r17, r14
    1198:	10 f4       	brcc	.+4      	; 0x119e <vfprintf+0x350>
    119a:	e1 1a       	sub	r14, r17
    119c:	01 c0       	rjmp	.+2      	; 0x11a0 <vfprintf+0x352>
    119e:	ee 24       	eor	r14, r14
    11a0:	84 fe       	sbrs	r8, 4
    11a2:	0f c0       	rjmp	.+30     	; 0x11c2 <vfprintf+0x374>
    11a4:	80 e3       	ldi	r24, 0x30	; 48
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	b3 01       	movw	r22, r6
    11aa:	0e 94 84 09 	call	0x1308	; 0x1308 <fputc>
    11ae:	82 fe       	sbrs	r8, 2
    11b0:	1f c0       	rjmp	.+62     	; 0x11f0 <vfprintf+0x3a2>
    11b2:	81 fe       	sbrs	r8, 1
    11b4:	03 c0       	rjmp	.+6      	; 0x11bc <vfprintf+0x36e>
    11b6:	88 e5       	ldi	r24, 0x58	; 88
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	10 c0       	rjmp	.+32     	; 0x11dc <vfprintf+0x38e>
    11bc:	88 e7       	ldi	r24, 0x78	; 120
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	0d c0       	rjmp	.+26     	; 0x11dc <vfprintf+0x38e>
    11c2:	c4 01       	movw	r24, r8
    11c4:	86 78       	andi	r24, 0x86	; 134
    11c6:	90 70       	andi	r25, 0x00	; 0
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	91 f0       	breq	.+36     	; 0x11f0 <vfprintf+0x3a2>
    11cc:	81 fc       	sbrc	r8, 1
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <vfprintf+0x386>
    11d0:	80 e2       	ldi	r24, 0x20	; 32
    11d2:	01 c0       	rjmp	.+2      	; 0x11d6 <vfprintf+0x388>
    11d4:	8b e2       	ldi	r24, 0x2B	; 43
    11d6:	07 fd       	sbrc	r16, 7
    11d8:	8d e2       	ldi	r24, 0x2D	; 45
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	b3 01       	movw	r22, r6
    11de:	0e 94 84 09 	call	0x1308	; 0x1308 <fputc>
    11e2:	06 c0       	rjmp	.+12     	; 0x11f0 <vfprintf+0x3a2>
    11e4:	80 e3       	ldi	r24, 0x30	; 48
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	b3 01       	movw	r22, r6
    11ea:	0e 94 84 09 	call	0x1308	; 0x1308 <fputc>
    11ee:	fa 94       	dec	r15
    11f0:	df 14       	cp	r13, r15
    11f2:	c0 f3       	brcs	.-16     	; 0x11e4 <vfprintf+0x396>
    11f4:	da 94       	dec	r13
    11f6:	f2 01       	movw	r30, r4
    11f8:	ed 0d       	add	r30, r13
    11fa:	f1 1d       	adc	r31, r1
    11fc:	80 81       	ld	r24, Z
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	b3 01       	movw	r22, r6
    1202:	0e 94 84 09 	call	0x1308	; 0x1308 <fputc>
    1206:	dd 20       	and	r13, r13
    1208:	a9 f7       	brne	.-22     	; 0x11f4 <vfprintf+0x3a6>
    120a:	06 c0       	rjmp	.+12     	; 0x1218 <vfprintf+0x3ca>
    120c:	80 e2       	ldi	r24, 0x20	; 32
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	b3 01       	movw	r22, r6
    1212:	0e 94 84 09 	call	0x1308	; 0x1308 <fputc>
    1216:	ea 94       	dec	r14
    1218:	ee 20       	and	r14, r14
    121a:	c1 f7       	brne	.-16     	; 0x120c <vfprintf+0x3be>
    121c:	40 ce       	rjmp	.-896    	; 0xe9e <vfprintf+0x50>
    121e:	f3 01       	movw	r30, r6
    1220:	86 81       	ldd	r24, Z+6	; 0x06
    1222:	97 81       	ldd	r25, Z+7	; 0x07
    1224:	02 c0       	rjmp	.+4      	; 0x122a <vfprintf+0x3dc>
    1226:	8f ef       	ldi	r24, 0xFF	; 255
    1228:	9f ef       	ldi	r25, 0xFF	; 255
    122a:	2d 96       	adiw	r28, 0x0d	; 13
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	f8 94       	cli
    1230:	de bf       	out	0x3e, r29	; 62
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	cd bf       	out	0x3d, r28	; 61
    1236:	df 91       	pop	r29
    1238:	cf 91       	pop	r28
    123a:	1f 91       	pop	r17
    123c:	0f 91       	pop	r16
    123e:	ff 90       	pop	r15
    1240:	ef 90       	pop	r14
    1242:	df 90       	pop	r13
    1244:	cf 90       	pop	r12
    1246:	bf 90       	pop	r11
    1248:	af 90       	pop	r10
    124a:	9f 90       	pop	r9
    124c:	8f 90       	pop	r8
    124e:	7f 90       	pop	r7
    1250:	6f 90       	pop	r6
    1252:	5f 90       	pop	r5
    1254:	4f 90       	pop	r4
    1256:	3f 90       	pop	r3
    1258:	2f 90       	pop	r2
    125a:	08 95       	ret

0000125c <strnlen_P>:
    125c:	fc 01       	movw	r30, r24
    125e:	05 90       	lpm	r0, Z+
    1260:	61 50       	subi	r22, 0x01	; 1
    1262:	70 40       	sbci	r23, 0x00	; 0
    1264:	01 10       	cpse	r0, r1
    1266:	d8 f7       	brcc	.-10     	; 0x125e <strnlen_P+0x2>
    1268:	80 95       	com	r24
    126a:	90 95       	com	r25
    126c:	8e 0f       	add	r24, r30
    126e:	9f 1f       	adc	r25, r31
    1270:	08 95       	ret

00001272 <strnlen>:
    1272:	fc 01       	movw	r30, r24
    1274:	61 50       	subi	r22, 0x01	; 1
    1276:	70 40       	sbci	r23, 0x00	; 0
    1278:	01 90       	ld	r0, Z+
    127a:	01 10       	cpse	r0, r1
    127c:	d8 f7       	brcc	.-10     	; 0x1274 <strnlen+0x2>
    127e:	80 95       	com	r24
    1280:	90 95       	com	r25
    1282:	8e 0f       	add	r24, r30
    1284:	9f 1f       	adc	r25, r31
    1286:	08 95       	ret

00001288 <fgetc>:
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	ec 01       	movw	r28, r24
    128e:	2b 81       	ldd	r18, Y+3	; 0x03
    1290:	20 ff       	sbrs	r18, 0
    1292:	35 c0       	rjmp	.+106    	; 0x12fe <fgetc+0x76>
    1294:	26 ff       	sbrs	r18, 6
    1296:	09 c0       	rjmp	.+18     	; 0x12aa <fgetc+0x22>
    1298:	2f 7b       	andi	r18, 0xBF	; 191
    129a:	2b 83       	std	Y+3, r18	; 0x03
    129c:	8e 81       	ldd	r24, Y+6	; 0x06
    129e:	9f 81       	ldd	r25, Y+7	; 0x07
    12a0:	01 96       	adiw	r24, 0x01	; 1
    12a2:	9f 83       	std	Y+7, r25	; 0x07
    12a4:	8e 83       	std	Y+6, r24	; 0x06
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	28 c0       	rjmp	.+80     	; 0x12fa <fgetc+0x72>
    12aa:	22 ff       	sbrs	r18, 2
    12ac:	0f c0       	rjmp	.+30     	; 0x12cc <fgetc+0x44>
    12ae:	e8 81       	ld	r30, Y
    12b0:	f9 81       	ldd	r31, Y+1	; 0x01
    12b2:	80 81       	ld	r24, Z
    12b4:	99 27       	eor	r25, r25
    12b6:	87 fd       	sbrc	r24, 7
    12b8:	90 95       	com	r25
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	19 f4       	brne	.+6      	; 0x12c4 <fgetc+0x3c>
    12be:	20 62       	ori	r18, 0x20	; 32
    12c0:	2b 83       	std	Y+3, r18	; 0x03
    12c2:	1d c0       	rjmp	.+58     	; 0x12fe <fgetc+0x76>
    12c4:	31 96       	adiw	r30, 0x01	; 1
    12c6:	f9 83       	std	Y+1, r31	; 0x01
    12c8:	e8 83       	st	Y, r30
    12ca:	11 c0       	rjmp	.+34     	; 0x12ee <fgetc+0x66>
    12cc:	ea 85       	ldd	r30, Y+10	; 0x0a
    12ce:	fb 85       	ldd	r31, Y+11	; 0x0b
    12d0:	ce 01       	movw	r24, r28
    12d2:	19 95       	eicall
    12d4:	97 ff       	sbrs	r25, 7
    12d6:	0b c0       	rjmp	.+22     	; 0x12ee <fgetc+0x66>
    12d8:	2b 81       	ldd	r18, Y+3	; 0x03
    12da:	3f ef       	ldi	r19, 0xFF	; 255
    12dc:	8f 3f       	cpi	r24, 0xFF	; 255
    12de:	93 07       	cpc	r25, r19
    12e0:	11 f4       	brne	.+4      	; 0x12e6 <fgetc+0x5e>
    12e2:	80 e1       	ldi	r24, 0x10	; 16
    12e4:	01 c0       	rjmp	.+2      	; 0x12e8 <fgetc+0x60>
    12e6:	80 e2       	ldi	r24, 0x20	; 32
    12e8:	82 2b       	or	r24, r18
    12ea:	8b 83       	std	Y+3, r24	; 0x03
    12ec:	08 c0       	rjmp	.+16     	; 0x12fe <fgetc+0x76>
    12ee:	2e 81       	ldd	r18, Y+6	; 0x06
    12f0:	3f 81       	ldd	r19, Y+7	; 0x07
    12f2:	2f 5f       	subi	r18, 0xFF	; 255
    12f4:	3f 4f       	sbci	r19, 0xFF	; 255
    12f6:	3f 83       	std	Y+7, r19	; 0x07
    12f8:	2e 83       	std	Y+6, r18	; 0x06
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <fgetc+0x7a>
    12fe:	8f ef       	ldi	r24, 0xFF	; 255
    1300:	9f ef       	ldi	r25, 0xFF	; 255
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	08 95       	ret

00001308 <fputc>:
    1308:	0f 93       	push	r16
    130a:	1f 93       	push	r17
    130c:	cf 93       	push	r28
    130e:	df 93       	push	r29
    1310:	8c 01       	movw	r16, r24
    1312:	eb 01       	movw	r28, r22
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	81 ff       	sbrs	r24, 1
    1318:	1b c0       	rjmp	.+54     	; 0x1350 <fputc+0x48>
    131a:	82 ff       	sbrs	r24, 2
    131c:	0d c0       	rjmp	.+26     	; 0x1338 <fputc+0x30>
    131e:	2e 81       	ldd	r18, Y+6	; 0x06
    1320:	3f 81       	ldd	r19, Y+7	; 0x07
    1322:	8c 81       	ldd	r24, Y+4	; 0x04
    1324:	9d 81       	ldd	r25, Y+5	; 0x05
    1326:	28 17       	cp	r18, r24
    1328:	39 07       	cpc	r19, r25
    132a:	64 f4       	brge	.+24     	; 0x1344 <fputc+0x3c>
    132c:	e8 81       	ld	r30, Y
    132e:	f9 81       	ldd	r31, Y+1	; 0x01
    1330:	01 93       	st	Z+, r16
    1332:	f9 83       	std	Y+1, r31	; 0x01
    1334:	e8 83       	st	Y, r30
    1336:	06 c0       	rjmp	.+12     	; 0x1344 <fputc+0x3c>
    1338:	e8 85       	ldd	r30, Y+8	; 0x08
    133a:	f9 85       	ldd	r31, Y+9	; 0x09
    133c:	80 2f       	mov	r24, r16
    133e:	19 95       	eicall
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	31 f4       	brne	.+12     	; 0x1350 <fputc+0x48>
    1344:	8e 81       	ldd	r24, Y+6	; 0x06
    1346:	9f 81       	ldd	r25, Y+7	; 0x07
    1348:	01 96       	adiw	r24, 0x01	; 1
    134a:	9f 83       	std	Y+7, r25	; 0x07
    134c:	8e 83       	std	Y+6, r24	; 0x06
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <fputc+0x4c>
    1350:	0f ef       	ldi	r16, 0xFF	; 255
    1352:	1f ef       	ldi	r17, 0xFF	; 255
    1354:	c8 01       	movw	r24, r16
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	1f 91       	pop	r17
    135c:	0f 91       	pop	r16
    135e:	08 95       	ret

00001360 <__ultoa_invert>:
    1360:	fa 01       	movw	r30, r20
    1362:	aa 27       	eor	r26, r26
    1364:	28 30       	cpi	r18, 0x08	; 8
    1366:	51 f1       	breq	.+84     	; 0x13bc <__ultoa_invert+0x5c>
    1368:	20 31       	cpi	r18, 0x10	; 16
    136a:	81 f1       	breq	.+96     	; 0x13cc <__ultoa_invert+0x6c>
    136c:	e8 94       	clt
    136e:	6f 93       	push	r22
    1370:	6e 7f       	andi	r22, 0xFE	; 254
    1372:	6e 5f       	subi	r22, 0xFE	; 254
    1374:	7f 4f       	sbci	r23, 0xFF	; 255
    1376:	8f 4f       	sbci	r24, 0xFF	; 255
    1378:	9f 4f       	sbci	r25, 0xFF	; 255
    137a:	af 4f       	sbci	r26, 0xFF	; 255
    137c:	b1 e0       	ldi	r27, 0x01	; 1
    137e:	3e d0       	rcall	.+124    	; 0x13fc <__ultoa_invert+0x9c>
    1380:	b4 e0       	ldi	r27, 0x04	; 4
    1382:	3c d0       	rcall	.+120    	; 0x13fc <__ultoa_invert+0x9c>
    1384:	67 0f       	add	r22, r23
    1386:	78 1f       	adc	r23, r24
    1388:	89 1f       	adc	r24, r25
    138a:	9a 1f       	adc	r25, r26
    138c:	a1 1d       	adc	r26, r1
    138e:	68 0f       	add	r22, r24
    1390:	79 1f       	adc	r23, r25
    1392:	8a 1f       	adc	r24, r26
    1394:	91 1d       	adc	r25, r1
    1396:	a1 1d       	adc	r26, r1
    1398:	6a 0f       	add	r22, r26
    139a:	71 1d       	adc	r23, r1
    139c:	81 1d       	adc	r24, r1
    139e:	91 1d       	adc	r25, r1
    13a0:	a1 1d       	adc	r26, r1
    13a2:	20 d0       	rcall	.+64     	; 0x13e4 <__ultoa_invert+0x84>
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <__ultoa_invert+0x48>
    13a6:	68 94       	set
    13a8:	3f 91       	pop	r19
    13aa:	2a e0       	ldi	r18, 0x0A	; 10
    13ac:	26 9f       	mul	r18, r22
    13ae:	11 24       	eor	r1, r1
    13b0:	30 19       	sub	r19, r0
    13b2:	30 5d       	subi	r19, 0xD0	; 208
    13b4:	31 93       	st	Z+, r19
    13b6:	de f6       	brtc	.-74     	; 0x136e <__ultoa_invert+0xe>
    13b8:	cf 01       	movw	r24, r30
    13ba:	08 95       	ret
    13bc:	46 2f       	mov	r20, r22
    13be:	47 70       	andi	r20, 0x07	; 7
    13c0:	40 5d       	subi	r20, 0xD0	; 208
    13c2:	41 93       	st	Z+, r20
    13c4:	b3 e0       	ldi	r27, 0x03	; 3
    13c6:	0f d0       	rcall	.+30     	; 0x13e6 <__ultoa_invert+0x86>
    13c8:	c9 f7       	brne	.-14     	; 0x13bc <__ultoa_invert+0x5c>
    13ca:	f6 cf       	rjmp	.-20     	; 0x13b8 <__ultoa_invert+0x58>
    13cc:	46 2f       	mov	r20, r22
    13ce:	4f 70       	andi	r20, 0x0F	; 15
    13d0:	40 5d       	subi	r20, 0xD0	; 208
    13d2:	4a 33       	cpi	r20, 0x3A	; 58
    13d4:	18 f0       	brcs	.+6      	; 0x13dc <__ultoa_invert+0x7c>
    13d6:	49 5d       	subi	r20, 0xD9	; 217
    13d8:	31 fd       	sbrc	r19, 1
    13da:	40 52       	subi	r20, 0x20	; 32
    13dc:	41 93       	st	Z+, r20
    13de:	02 d0       	rcall	.+4      	; 0x13e4 <__ultoa_invert+0x84>
    13e0:	a9 f7       	brne	.-22     	; 0x13cc <__ultoa_invert+0x6c>
    13e2:	ea cf       	rjmp	.-44     	; 0x13b8 <__ultoa_invert+0x58>
    13e4:	b4 e0       	ldi	r27, 0x04	; 4
    13e6:	a6 95       	lsr	r26
    13e8:	97 95       	ror	r25
    13ea:	87 95       	ror	r24
    13ec:	77 95       	ror	r23
    13ee:	67 95       	ror	r22
    13f0:	ba 95       	dec	r27
    13f2:	c9 f7       	brne	.-14     	; 0x13e6 <__ultoa_invert+0x86>
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	61 05       	cpc	r22, r1
    13f8:	71 05       	cpc	r23, r1
    13fa:	08 95       	ret
    13fc:	9b 01       	movw	r18, r22
    13fe:	ac 01       	movw	r20, r24
    1400:	0a 2e       	mov	r0, r26
    1402:	06 94       	lsr	r0
    1404:	57 95       	ror	r21
    1406:	47 95       	ror	r20
    1408:	37 95       	ror	r19
    140a:	27 95       	ror	r18
    140c:	ba 95       	dec	r27
    140e:	c9 f7       	brne	.-14     	; 0x1402 <__ultoa_invert+0xa2>
    1410:	62 0f       	add	r22, r18
    1412:	73 1f       	adc	r23, r19
    1414:	84 1f       	adc	r24, r20
    1416:	95 1f       	adc	r25, r21
    1418:	a0 1d       	adc	r26, r0
    141a:	08 95       	ret

0000141c <_exit>:
    141c:	f8 94       	cli

0000141e <__stop_program>:
    141e:	ff cf       	rjmp	.-2      	; 0x141e <__stop_program>
